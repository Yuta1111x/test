{
    "sourceFile": "index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1743959396761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743959652179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1273,11 +1273,11 @@\n             selectedImage = null;\n         }\n         \n         // Obsługa przycisku wysyłania\n-        sendButton.addEventListener('click', function() {\n-            sendMessage();\n-        });\n+sendButton.addEventListener('click', function() {\n+    sendMessage();\n+});\n         \n         // Obsługa klawisza Enter\n         userInput.addEventListener('keydown', function(e) {\n             if (e.key === 'Enter') {\n"
                },
                {
                    "date": 1743959658983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1274,10 +1274,10 @@\n         }\n         \n         // Obsługa przycisku wysyłania\n sendButton.addEventListener('click', function() {\n-    sendMessage();\n-});\n+            sendMessage();\n+        });\n         \n         // Obsługa klawisza Enter\n         userInput.addEventListener('keydown', function(e) {\n             if (e.key === 'Enter') {\n"
                },
                {
                    "date": 1743959669255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1273,9 +1273,9 @@\n             selectedImage = null;\n         }\n         \n         // Obsługa przycisku wysyłania\n-sendButton.addEventListener('click', function() {\n+        sendButton.addEventListener('click', function() {\n             sendMessage();\n         });\n         \n         // Obsługa klawisza Enter\n"
                },
                {
                    "date": 1743959709365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -636,19 +636,18 @@\n       }\n       \n       .input-area textarea {\n           flex-grow: 1;\n-          padding: 0.6rem 1rem 0.6rem 3rem;\n+          padding: 0.8rem 1rem 0.8rem 3rem;\n           border: 1px solid rgba(255, 255, 255, 0.1);\n           border-radius: 15px;\n           background: rgba(15, 23, 42, 0.6);\n           color: #fff;\n           font-family: 'Poppins', sans-serif;\n           font-size: 1rem;\n           transition: all 0.3s ease;\n-          height: 42px;\n-          min-height: 42px;\n-          max-height: 42px;\n+          min-height: 46px;\n+          max-height: 120px;\n           resize: none;\n           overflow-y: auto;\n           line-height: 1.5;\n           white-space: pre-wrap;\n@@ -1061,15 +1060,9 @@\n         window.copyCode = function(blockId) {\n             const codeElement = document.getElementById(blockId);\n             if (!codeElement) return;\n             \n-            // Pobierz tekst z HTML, zamieniając encje HTML z powrotem na znaki\n-            const encodedText = codeElement.innerHTML;\n-            const textarea = document.createElement('textarea');\n-            textarea.innerHTML = encodedText; // Automatycznie konwertuje encje HTML\n-            const decodedText = textarea.value;\n-            \n-            navigator.clipboard.writeText(decodedText)\n+            navigator.clipboard.writeText(codeElement.textContent)\n                 .then(() => {\n                     const btn = codeElement.closest('.code-container').querySelector('.copy-btn');\n                     const originalText = btn.textContent;\n                     btn.textContent = 'Skopiowano!';\n@@ -1127,38 +1120,19 @@\n                 let processedText = text;\n                 \n                 // Najpierw zabezpiecz bloki kodu, aby marked ich nie przetwarzał\n                 const codeBlocks = [];\n-                processedText = processedText.replace(/\\`\\`\\`([\\s\\S]*?)\\`\\`\\`/g, function(match, code) {\n-                    // Escape HTML special characters in code blocks\n-                    const escapedCode = code\n-                        .replace(/</g, '&lt;')\n-                        .replace(/>/g, '&gt;');\n-                    codeBlocks.push(escapedCode);\n+                processedText = processedText.replace(/<div class=\"code-container\">[\\\\s\\\\S]*?<\\\\/div>/g, function(match) {\n+                    codeBlocks.push(match);\n                     return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n                 });\n                 \n                 // Zastosuj formatowanie Markdown\n                 processedText = marked.parse(processedText);\n                 \n-                // Przywróć bloki kodu z odpowiednim formatowaniem HTML\n-                processedText = processedText.replace(/{{CODE_BLOCK_(\\d+)}}/g, function(match, index) {\n-                    const codeContent = codeBlocks[parseInt(index)];\n-                    const codeId = 'code-block-' + Date.now() + '-' + index;\n-                    return '<div class=\"code-container\">' +\n-                        '<div class=\"code-header\">' +\n-                        '<span>Code</span>' +\n-                        '<div class=\"code-actions\">' +\n-                        '<button class=\"copy-btn\" onclick=\"copyCode(\\'' + codeId + '\\')\">' +\n-                        '<i class=\"fas fa-copy\"></i> Kopiuj' +\n-                        '</button>' +\n-                        '</div>' +\n-                        '</div>' +\n-                        '<pre class=\"code-block\"><code id=\"' + codeId + '\">' + codeContent + '</code></pre>' +\n-                        '<div class=\"code-footer\">' +\n-                        '<div class=\"mini-counter\"><i class=\"fas fa-code\"></i> kod</div>' +\n-                        '</div>' +\n-                        '</div>';\n+                // Przywróć bloki kodu\n+                processedText = processedText.replace(/{{CODE_BLOCK_(\\\\d+)}}/g, function(match, index) {\n+                    return codeBlocks[parseInt(index)];\n                 });\n                 \n                 contentDiv.innerHTML = processedText;\n             }\n@@ -1273,20 +1247,29 @@\n             selectedImage = null;\n         }\n         \n         // Obsługa przycisku wysyłania\n-        sendButton.addEventListener('click', function() {\n-            sendMessage();\n-        });\n+        sendButton.addEventListener('click', sendMessage);\n         \n         // Obsługa klawisza Enter\n-        userInput.addEventListener('keydown', function(e) {\n+        userInput.addEventListener('keypress', function(e) {\n             if (e.key === 'Enter') {\n                 if (e.shiftKey) {\n-                    // Shift+Enter - dodaj nową linię (domyślne zachowanie)\n-                    return true;\n+                    // Jeśli Shift+Enter, dodaj nową linię\n+                    e.preventDefault();\n+                    const cursorPos = this.selectionStart;\n+                    const textBefore = this.value.substring(0, cursorPos);\n+                    const textAfter = this.value.substring(cursorPos);\n+                    this.value = textBefore + '\\n' + textAfter;\n+                    \n+                    // Ustaw kursor po nowej linii\n+                    this.selectionStart = cursorPos + 1;\n+                    this.selectionEnd = cursorPos + 1;\n+                    \n+                    // Przewiń tekst, jeśli potrzeba\n+                    this.scrollTop = this.scrollHeight;\n                 } else {\n-                    // Sam Enter - wyślij wiadomość\n+                    // Normalny Enter - wyślij wiadomość\n                     e.preventDefault();\n                     sendMessage();\n                 }\n             }\n@@ -1373,40 +1356,16 @@\n     let aiReply = response.data.candidates[0].content.parts[0].text;\n     \n     // Format code blocks properly\n     // Replace markdown code blocks with styled HTML code containers\n-    aiReply = aiReply.replace(/\\`\\`\\`(.*)\\n([\\s\\S]*?)\\`\\`\\`/g, function(match, language, code) {\n-        // Generate a unique ID for this code block\n-        const blockId = 'code-block-' + Date.now() + '-' + Math.floor(Math.random() * 1000);\n-        \n-        // Escape HTML in the code content\n-        const escapedCode = code\n-            .replace(/</g, '&lt;')\n-            .replace(/>/g, '&gt;');\n-        \n-        // Determine language display name\n-        let displayLang = 'Code';\n-        if (language) {\n-            if (language === 'c++' || language === 'cpp') displayLang = 'C++';\n-            else if (language === 'js') displayLang = 'JavaScript';\n-            else displayLang = language.charAt(0).toUpperCase() + language.slice(1);\n-        }\n-        \n-        return '<div class=\"code-container\">' +\n-            '<div class=\"code-header\">' +\n-            '<span>' + displayLang + '</span>' +\n-            '<div class=\"code-actions\">' +\n-            '<button class=\"copy-btn\" onclick=\"copyCode(\\'' + blockId + '\\')\">' +\n-            '<i class=\"fas fa-copy\"></i> Kopiuj' +\n-            '</button>' +\n-            '</div>' +\n-            '</div>' +\n-            '<pre class=\"code-block\"><code id=\"' + blockId + '\">' + escapedCode + '</code></pre>' +\n-            '<div class=\"code-footer\">' +\n-            '<div class=\"mini-counter\"><i class=\"fas fa-code\"></i> kod</div>' +\n-            '</div>' +\n-            '</div>';\n-    });\n+    aiReply = aiReply.replace(/```c\\+\\+/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+    aiReply = aiReply.replace(/```cpp/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+    aiReply = aiReply.replace(/KOD C\\+\\+:/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+    aiReply = aiReply.replace(/```python/g, '<div class=\"code-container\"><div class=\"code-header\"><span>Python</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+    aiReply = aiReply.replace(/```javascript/g, '<div class=\"code-container\"><div class=\"code-header\"><span>JavaScript</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+    aiReply = aiReply.replace(/```html/g, '<div class=\"code-container\"><div class=\"code-header\"><span>HTML</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+    aiReply = aiReply.replace(/```css/g, '<div class=\"code-container\"><div class=\"code-header\"><span>CSS</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+    aiReply = aiReply.replace(/```/g, '</code></pre><div class=\"code-footer\"><div class=\"mini-counter\"><i class=\"fas fa-code\"></i> kod</div></div></div>');\n     \n     // If image was uploaded temporarily, delete it after processing\n     if (req.file) {\n       fs.unlink(path.join(__dirname, req.file.path), (err) => {\n"
                },
                {
                    "date": 1743959732519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -623,9 +623,9 @@\n           text-align: right;\n       }\n       \n       .footer {\n-          padding: 1rem 2rem;\n+          padding: 1.5rem 2rem;\n           border-top: 1px solid rgba(255, 255, 255, 0.1);\n           background: rgba(15, 23, 42, 0.5);\n       }\n       \n@@ -634,27 +634,21 @@\n           gap: 10px;\n           position: relative;\n       }\n       \n-      .input-area textarea {\n+      .input-area input {\n           flex-grow: 1;\n-          padding: 0.8rem 1rem 0.8rem 3rem;\n+          padding: 1rem 1rem 1rem 3rem;\n           border: 1px solid rgba(255, 255, 255, 0.1);\n           border-radius: 15px;\n           background: rgba(15, 23, 42, 0.6);\n           color: #fff;\n           font-family: 'Poppins', sans-serif;\n           font-size: 1rem;\n           transition: all 0.3s ease;\n-          min-height: 46px;\n-          max-height: 120px;\n-          resize: none;\n-          overflow-y: auto;\n-          line-height: 1.5;\n-          white-space: pre-wrap;\n       }\n       \n-      .input-area textarea:focus {\n+      .input-area input:focus {\n           outline: none;\n           border-color: #6366f1;\n           box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.3);\n       }\n@@ -1017,9 +1011,9 @@\n         \n         <div class=\"footer\">\n             <div class=\"input-area\">\n                 <i class=\"fas fa-message input-icon\"></i>\n-                <textarea id=\"user-input\" placeholder=\"Napisz wiadomość... (Shift+Enter dla nowej linii)\" autocomplete=\"off\"></textarea>\n+                <input type=\"text\" id=\"user-input\" placeholder=\"Napisz wiadomość...\" autocomplete=\"off\">\n                 <button id=\"send-button\">\n                     <span>Wyślij</span>\n                     <i class=\"fas fa-paper-plane\"></i>\n                 </button>\n@@ -1086,9 +1080,8 @@\n             \n             const contentDiv = document.createElement('div');\n             \n             if (isUser) {\n-                // Escape HTML tags w wiadomościach użytkownika\n                 contentDiv.textContent = text;\n                 \n                 // Dodaj zdjęcie jeśli zostało wybrane\n                 if (imageUrl) {\n@@ -1102,19 +1095,13 @@\n                 // Dla wiadomości AI używamy marked.js do formatowania Markdown\n                 // Skonfiguruj marked.js do obsługi pogrubienia i innych stylów Markdown\n                 const renderer = new marked.Renderer();\n                 \n-                // Bezpieczne przetwarzanie kodu HTML\n-                renderer.text = function(text) {\n-                    return text.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n-                };\n-                \n                 // Użyj marked do konwersji Markdown na HTML\n                 marked.setOptions({\n                     renderer: renderer,\n                     breaks: true,\n-                    gfm: true,\n-                    sanitize: false  // Wyłączamy wbudowane sanitize, bo używamy własnego renderer.text\n+                    gfm: true\n                 });\n                 \n                 // Przetwórz tekst na HTML z zachowaniem bloków kodu\n                 let processedText = text;\n@@ -1252,27 +1239,9 @@\n         \n         // Obsługa klawisza Enter\n         userInput.addEventListener('keypress', function(e) {\n             if (e.key === 'Enter') {\n-                if (e.shiftKey) {\n-                    // Jeśli Shift+Enter, dodaj nową linię\n-                    e.preventDefault();\n-                    const cursorPos = this.selectionStart;\n-                    const textBefore = this.value.substring(0, cursorPos);\n-                    const textAfter = this.value.substring(cursorPos);\n-                    this.value = textBefore + '\\n' + textAfter;\n-                    \n-                    // Ustaw kursor po nowej linii\n-                    this.selectionStart = cursorPos + 1;\n-                    this.selectionEnd = cursorPos + 1;\n-                    \n-                    // Przewiń tekst, jeśli potrzeba\n-                    this.scrollTop = this.scrollHeight;\n-                } else {\n-                    // Normalny Enter - wyślij wiadomość\n-                    e.preventDefault();\n-                    sendMessage();\n-                }\n+                sendMessage();\n             }\n         });\n         \n         // Obsługa uploadu zdjęć\n"
                },
                {
                    "date": 1743959891334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,34 +10,34 @@\n const GEMINI_API_KEY = 'AIzaSyAP1EOpnlAhNRh9MI41v8EHtyRGylNR_bA';\n \n // Upewnij się, że istnieje folder temp\n if (!fs.existsSync('temp')) {\n-  fs.mkdirSync('temp');\n+    fs.mkdirSync('temp');\n }\n \n // Configure multer to preserve original filename for file panel\n const storage = multer.diskStorage({\n-  destination: (req, file, cb) => {\n-    // Make sure the \"pliki\" directory exists\n-    if (!fs.existsSync('pliki')) {\n-      fs.mkdirSync('pliki');\n+    destination: (req, file, cb) => {\n+        // Make sure the \"pliki\" directory exists\n+        if (!fs.existsSync('pliki')) {\n+            fs.mkdirSync('pliki');\n+        }\n+        cb(null, 'pliki/');\n+    },\n+    filename: (req, file, cb) => {\n+        cb(null, file.originalname);\n     }\n-    cb(null, 'pliki/');\n-  },\n-  filename: (req, file, cb) => {\n-    cb(null, file.originalname);\n-  }\n });\n const upload = multer({ storage: storage });\n \n // Configure multer for temporary image uploads\n const tempStorage = multer.diskStorage({\n-  destination: (req, file, cb) => {\n-    cb(null, 'temp/');\n-  },\n-  filename: (req, file, cb) => {\n-    cb(null, Date.now() + '-' + file.originalname);\n-  }\n+    destination: (req, file, cb) => {\n+        cb(null, 'temp/');\n+    },\n+    filename: (req, file, cb) => {\n+        cb(null, Date.now() + '-' + file.originalname);\n+    }\n });\n const tempUpload = multer({ storage: tempStorage });\n \n app.use(express.urlencoded({ extended: true }));\n@@ -243,9 +243,9 @@\n </style>\n `;\n \n app.get('/', (req, res) => {\n-res.send(`\n+    res.send(`\n <html>\n <head>\n     <title>Files Portal</title>\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n@@ -271,20 +271,20 @@\n `);\n });\n \n app.get('/panel', (req, res) => {\n-  fs.readdir('pliki', (err, files) => {\n-    if (err) {\n-      if (err.code === 'ENOENT') {\n-        // Directory doesn't exist, create it\n-        fs.mkdirSync('pliki');\n-        files = [];\n-      } else {\n-        return res.send('Error loading files.');\n-      }\n-    }\n+    fs.readdir('pliki', (err, files) => {\n+        if (err) {\n+            if (err.code === 'ENOENT') {\n+                // Directory doesn't exist, create it\n+                fs.mkdirSync('pliki');\n+                files = [];\n+            } else {\n+                return res.send('Error loading files.');\n+            }\n+        }\n \n-const fileRows = files.map(file => `\n+        const fileRows = files.map(file => `\n <tr class=\"fade-in\">\n     <td>${file}</td>\n     <td class=\"actions\">\n             <a href=\"/files/${encodeURIComponent(file)}\" download class=\"btn btn-secondary\">Download</a>\n@@ -295,9 +295,9 @@\n     </td>\n </tr>\n `).join('');\n \n-res.send(`\n+        res.send(`\n <html>\n <head>\n         <title>File Management</title>\n         <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n@@ -329,13 +329,13 @@\n     </div>\n </body>\n </html>\n `);\n+    });\n });\n-});\n \n app.get('/panel/create', (req, res) => {\n-res.send(`\n+    res.send(`\n <html>\n <head>\n     <title>Create New File</title>\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n@@ -359,28 +359,28 @@\n });\n \n // Obsługa tworzenia plików\n app.post('/panel/create', (req, res) => {\n-const { filename, content } = req.body;\n-if (!filename) return res.send('File name is required!');\n+    const { filename, content } = req.body;\n+    if (!filename) return res.send('File name is required!');\n \n-const filePath = path.join(__dirname, 'pliki', filename);\n+    const filePath = path.join(__dirname, 'pliki', filename);\n \n-// Sprawdź czy plik już istnieje\n-fs.access(filePath, fs.constants.F_OK, (err) => {\n-if (!err) return res.send('File already exists!');\n+    // Sprawdź czy plik już istnieje\n+    fs.access(filePath, fs.constants.F_OK, (err) => {\n+        if (!err) return res.send('File already exists!');\n \n-fs.writeFile(filePath, content || '', (err) => {\n-if (err) return res.send('Error creating file!');\n-res.redirect('/panel');\n+        fs.writeFile(filePath, content || '', (err) => {\n+            if (err) return res.send('Error creating file!');\n+            res.redirect('/panel');\n+        });\n+    });\n });\n-});\n-});\n \n app.get('/panel/edit/:filename', (req, res) => {\n-fs.readFile(path.join(__dirname, 'pliki', req.params.filename), 'utf8', (err, data) => {\n-if (err) return res.send('Error reading file.');\n-res.send(`\n+    fs.readFile(path.join(__dirname, 'pliki', req.params.filename), 'utf8', (err, data) => {\n+        if (err) return res.send('Error reading file.');\n+        res.send(`\n <html>\n <head>\n     <title>Edit File</title>\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n@@ -399,13 +399,13 @@\n     </div>\n </body>\n </html>\n `);\n+    });\n });\n-});\n \n app.get('/panel/rename/:filename', (req, res) => {\n-res.send(`\n+    res.send(`\n <html>\n <head>\n     <title>Rename File</title>\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n@@ -430,37 +430,37 @@\n // Pozostałe endpointy\n app.post('/panel/upload', upload.single('file'), (req, res) => res.redirect('/panel'));\n \n app.get('/panel/delete/:filename', (req, res) => {\n-fs.unlink(path.join(__dirname, 'pliki', req.params.filename), (err) => {\n-res.redirect('/panel');\n+    fs.unlink(path.join(__dirname, 'pliki', req.params.filename), (err) => {\n+        res.redirect('/panel');\n+    });\n });\n-});\n \n app.post('/panel/edit/:filename', (req, res) => {\n-fs.writeFile(path.join(__dirname, 'pliki', req.params.filename), req.body.content, 'utf8', (err) => {\n-res.redirect('/panel');\n+    fs.writeFile(path.join(__dirname, 'pliki', req.params.filename), req.body.content, 'utf8', (err) => {\n+        res.redirect('/panel');\n+    });\n });\n-});\n \n app.post('/panel/rename/:filename', (req, res) => {\n-fs.rename(\n-path.join(__dirname, 'pliki', req.params.filename),\n-path.join(__dirname, 'pliki', req.body.newName),\n-() => res.redirect('/panel')\n-);\n+    fs.rename(\n+        path.join(__dirname, 'pliki', req.params.filename),\n+        path.join(__dirname, 'pliki', req.body.newName),\n+        () => res.redirect('/panel')\n+    );\n });\n \n app.get('/panel/redirect/:filename', (req, res) => {\n-res.redirect(`/files/${encodeURIComponent(req.params.filename)}`);\n+    res.redirect(`/files/${encodeURIComponent(req.params.filename)}`);\n });\n \n // Dodaj endpoint do udostępniania plików z folderu pliki\n app.use('/files', express.static('pliki'));\n \n // Add Gemini chat page\n app.get('/chat', (req, res) => {\n-  const chatHtml = `<!DOCTYPE html>\n+    const chatHtml = `<!DOCTYPE html>\n <html>\n <head>\n     <title>YutAi - Inteligentny Asystent</title>\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n@@ -1256,97 +1256,97 @@\n     </script>\n </body>\n </html>`;\n \n-  res.send(chatHtml);\n+    res.send(chatHtml);\n });\n \n // Add API endpoint for Gemini with image support\n app.post('/api/chat', tempUpload.single('image'), async (req, res) => {\n-  try {\n-    const userMessage = req.body.message || '';\n-    \n-    // Podstawowa instrukcja dla modelu\n-    let instruction = \"Odpowiadaj zawsze w języku polskim, bez względu na język zapytania. Twoje odpowiedzi powinny być pomocne, dokładne i przyjazne.\";\n-    \n-    const fullMessage = instruction + \" \" + userMessage;\n-    \n-    let apiRequestBody = {\n-      contents: [\n-        {\n-          parts: [\n+    try {\n+        const userMessage = req.body.message || '';\n+\n+        // Podstawowa instrukcja dla modelu\n+        let instruction = \"Odpowiadaj zawsze w języku polskim, bez względu na język zapytania. Twoje odpowiedzi powinny być pomocne, dokładne i przyjazne oraz dopracowane i.\";\n+\n+        const fullMessage = instruction + \" \" + userMessage;\n+\n+        let apiRequestBody = {\n+            contents: [\n+                {\n+                    parts: [\n+                        {\n+                            text: fullMessage\n+                        }\n+                    ]\n+                }\n+            ],\n+            generationConfig: {\n+                temperature: 0.7,\n+                topK: 40,\n+                topP: 0.95,\n+                maxOutputTokens: 8192\n+            }\n+        };\n+\n+        // If image is present, add it to the API request\n+        if (req.file) {\n+            const imagePath = path.join(__dirname, req.file.path);\n+            const imageBuffer = fs.readFileSync(imagePath);\n+            const base64Image = imageBuffer.toString('base64');\n+\n+            // Modify the request to include image\n+            apiRequestBody.contents[0].parts = [\n+                {\n+                    text: fullMessage || \"Opisz to zdjęcie w języku polskim\"\n+                },\n+                {\n+                    inlineData: {\n+                        mimeType: req.file.mimetype,\n+                        data: base64Image\n+                    }\n+                }\n+            ];\n+        }\n+\n+        // Determine the appropriate model based on whether an image is included\n+        const apiModel = req.file ? 'gemini-1.5-pro-latest' : 'gemini-1.5-flash-latest';\n+\n+        const response = await axios.post(\n+            `https://generativelanguage.googleapis.com/v1beta/models/${apiModel}:generateContent?key=${GEMINI_API_KEY}`,\n+            apiRequestBody,\n             {\n-              text: fullMessage\n+                headers: {\n+                    'Content-Type': 'application/json'\n+                }\n             }\n-          ]\n+        );\n+\n+        // Extract the AI's response text\n+        let aiReply = response.data.candidates[0].content.parts[0].text;\n+\n+        // Format code blocks properly\n+        // Replace markdown code blocks with styled HTML code containers\n+        aiReply = aiReply.replace(/```c\\+\\+/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```cpp/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/KOD C\\+\\+:/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```python/g, '<div class=\"code-container\"><div class=\"code-header\"><span>Python</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```javascript/g, '<div class=\"code-container\"><div class=\"code-header\"><span>JavaScript</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```html/g, '<div class=\"code-container\"><div class=\"code-header\"><span>HTML</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```css/g, '<div class=\"code-container\"><div class=\"code-header\"><span>CSS</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```/g, '</code></pre><div class=\"code-footer\"><div class=\"mini-counter\"><i class=\"fas fa-code\"></i> kod</div></div></div>');\n+\n+        // If image was uploaded temporarily, delete it after processing\n+        if (req.file) {\n+            fs.unlink(path.join(__dirname, req.file.path), (err) => {\n+                if (err) console.error('Error deleting temporary image:', err);\n+            });\n         }\n-      ],\n-      generationConfig: {\n-        temperature: 0.7,\n-        topK: 40,\n-        topP: 0.95,\n-        maxOutputTokens: 8192\n-      }\n-    };\n-    \n-    // If image is present, add it to the API request\n-    if (req.file) {\n-      const imagePath = path.join(__dirname, req.file.path);\n-      const imageBuffer = fs.readFileSync(imagePath);\n-      const base64Image = imageBuffer.toString('base64');\n-      \n-      // Modify the request to include image\n-      apiRequestBody.contents[0].parts = [\n-        {\n-          text: fullMessage || \"Opisz to zdjęcie w języku polskim\"\n-        },\n-        {\n-          inlineData: {\n-            mimeType: req.file.mimetype,\n-            data: base64Image\n-          }\n-        }\n-      ];\n+\n+        res.json({ reply: aiReply });\n+    } catch (error) {\n+        console.error('Error calling Gemini API:', error);\n+        res.status(500).json({ error: 'Failed to get response from Gemini', reply: 'Przepraszam, wystąpił błąd. Spróbuj ponownie później.' });\n     }\n-    \n-    // Determine the appropriate model based on whether an image is included\n-    const apiModel = req.file ? 'gemini-1.5-pro-latest' : 'gemini-1.5-flash-latest';\n-    \n-    const response = await axios.post(\n-      `https://generativelanguage.googleapis.com/v1beta/models/${apiModel}:generateContent?key=${GEMINI_API_KEY}`,\n-      apiRequestBody,\n-      {\n-        headers: {\n-          'Content-Type': 'application/json'\n-        }\n-      }\n-    );\n-    \n-    // Extract the AI's response text\n-    let aiReply = response.data.candidates[0].content.parts[0].text;\n-    \n-    // Format code blocks properly\n-    // Replace markdown code blocks with styled HTML code containers\n-    aiReply = aiReply.replace(/```c\\+\\+/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-    aiReply = aiReply.replace(/```cpp/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-    aiReply = aiReply.replace(/KOD C\\+\\+:/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-    aiReply = aiReply.replace(/```python/g, '<div class=\"code-container\"><div class=\"code-header\"><span>Python</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-    aiReply = aiReply.replace(/```javascript/g, '<div class=\"code-container\"><div class=\"code-header\"><span>JavaScript</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-    aiReply = aiReply.replace(/```html/g, '<div class=\"code-container\"><div class=\"code-header\"><span>HTML</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-    aiReply = aiReply.replace(/```css/g, '<div class=\"code-container\"><div class=\"code-header\"><span>CSS</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-    aiReply = aiReply.replace(/```/g, '</code></pre><div class=\"code-footer\"><div class=\"mini-counter\"><i class=\"fas fa-code\"></i> kod</div></div></div>');\n-    \n-    // If image was uploaded temporarily, delete it after processing\n-    if (req.file) {\n-      fs.unlink(path.join(__dirname, req.file.path), (err) => {\n-        if (err) console.error('Error deleting temporary image:', err);\n-      });\n-    }\n-    \n-    res.json({ reply: aiReply });\n-  } catch (error) {\n-    console.error('Error calling Gemini API:', error);\n-    res.status(500).json({ error: 'Failed to get response from Gemini', reply: 'Przepraszam, wystąpił błąd. Spróbuj ponownie później.' });\n-  }\n });\n \n app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));\n"
                },
                {
                    "date": 1743959896468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1265,9 +1265,9 @@\n     try {\n         const userMessage = req.body.message || '';\n \n         // Podstawowa instrukcja dla modelu\n-        let instruction = \"Odpowiadaj zawsze w języku polskim, bez względu na język zapytania. Twoje odpowiedzi powinny być pomocne, dokładne i przyjazne oraz dopracowane i.\";\n+        let instruction = \"Odpowiadaj zawsze w języku polskim, bez względu na język zapytania. Twoje odpowiedzi powinny być pomocne, dokładne i przyjazne oraz dopracowane i zrozumiale.\";\n \n         const fullMessage = instruction + \" \" + userMessage;\n \n         let apiRequestBody = {\n"
                },
                {
                    "date": 1743960222717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1260,15 +1260,75 @@\n     res.send(chatHtml);\n });\n \n // Add API endpoint for Gemini with image support\n+// Funkcja pomocnicza do parsowania bloków kodu\n+function parseCodeBlocks(aiReply) {\n+    // Wyrażenie regularne wyszukujące bloki kodu z trzema backtickami\n+    const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]*?)```/g;\n+    let blockCounter = 0;\n+\n+    const parsed = aiReply.replace(codeBlockRegex, (match, lang = '', code) => {\n+        blockCounter++;\n+        const codeBlockId = `code-block-${blockCounter}`;\n+\n+        // Zamiana znaków < i > na encje HTML\n+        const escapedCode = code\n+            .replace(/</g, '&lt;')\n+            .replace(/>/g, '&gt;');\n+\n+        // Dobieranie etykiety języka\n+        let langLabel;\n+        switch (lang.toLowerCase()) {\n+            case 'cpp':\n+            case 'c++':\n+                langLabel = 'C++';\n+                break;\n+            case 'python':\n+                langLabel = 'Python';\n+                break;\n+            case 'javascript':\n+                langLabel = 'JavaScript';\n+                break;\n+            case 'html':\n+                langLabel = 'HTML';\n+                break;\n+            case 'css':\n+                langLabel = 'CSS';\n+                break;\n+            default:\n+                langLabel = lang ? lang : 'Kod';\n+        }\n+\n+        return `\n+<div class=\"code-container\">\n+  <div class=\"code-header\">\n+    <span>${langLabel}</span>\n+    <div class=\"code-actions\">\n+      <button class=\"copy-btn\" onclick=\"copyCode('${codeBlockId}')\">\n+        <i class=\"fas fa-copy\"></i> Kopiuj\n+      </button>\n+    </div>\n+  </div>\n+  <pre class=\"code-block\"><code id=\"${codeBlockId}\">${escapedCode}</code></pre>\n+  <div class=\"code-footer\">\n+    <div class=\"mini-counter\">\n+      <i class=\"fas fa-code\"></i> kod\n+    </div>\n+  </div>\n+</div>`;\n+    });\n+\n+    return parsed;\n+}\n+\n+// Endpoint obsługujący zapytania\n app.post('/api/chat', tempUpload.single('image'), async (req, res) => {\n     try {\n         const userMessage = req.body.message || '';\n \n         // Podstawowa instrukcja dla modelu\n         let instruction = \"Odpowiadaj zawsze w języku polskim, bez względu na język zapytania. Twoje odpowiedzi powinny być pomocne, dokładne i przyjazne oraz dopracowane i zrozumiale.\";\n-\n         const fullMessage = instruction + \" \" + userMessage;\n \n         let apiRequestBody = {\n             contents: [\n@@ -1287,15 +1347,14 @@\n                 maxOutputTokens: 8192\n             }\n         };\n \n-        // If image is present, add it to the API request\n+        // Jeśli przesłano obrazek, dodajemy go do zapytania API\n         if (req.file) {\n             const imagePath = path.join(__dirname, req.file.path);\n             const imageBuffer = fs.readFileSync(imagePath);\n             const base64Image = imageBuffer.toString('base64');\n \n-            // Modify the request to include image\n             apiRequestBody.contents[0].parts = [\n                 {\n                     text: fullMessage || \"Opisz to zdjęcie w języku polskim\"\n                 },\n@@ -1307,9 +1366,9 @@\n                 }\n             ];\n         }\n \n-        // Determine the appropriate model based on whether an image is included\n+        // Wybór modelu w zależności od obecności obrazka\n         const apiModel = req.file ? 'gemini-1.5-pro-latest' : 'gemini-1.5-flash-latest';\n \n         const response = await axios.post(\n             `https://generativelanguage.googleapis.com/v1beta/models/${apiModel}:generateContent?key=${GEMINI_API_KEY}`,\n@@ -1320,23 +1379,15 @@\n                 }\n             }\n         );\n \n-        // Extract the AI's response text\n+        // Pobieramy odpowiedź AI\n         let aiReply = response.data.candidates[0].content.parts[0].text;\n \n-        // Format code blocks properly\n-        // Replace markdown code blocks with styled HTML code containers\n-        aiReply = aiReply.replace(/```c\\+\\+/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```cpp/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/KOD C\\+\\+:/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```python/g, '<div class=\"code-container\"><div class=\"code-header\"><span>Python</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```javascript/g, '<div class=\"code-container\"><div class=\"code-header\"><span>JavaScript</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```html/g, '<div class=\"code-container\"><div class=\"code-header\"><span>HTML</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```css/g, '<div class=\"code-container\"><div class=\"code-header\"><span>CSS</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```/g, '</code></pre><div class=\"code-footer\"><div class=\"mini-counter\"><i class=\"fas fa-code\"></i> kod</div></div></div>');\n+        // Przetwarzamy odpowiedź, aby poprawnie wyświetlać bloki kodu\n+        aiReply = parseCodeBlocks(aiReply);\n \n-        // If image was uploaded temporarily, delete it after processing\n+        // Jeśli obrazek został przesłany tymczasowo, usuwamy go po przetworzeniu\n         if (req.file) {\n             fs.unlink(path.join(__dirname, req.file.path), (err) => {\n                 if (err) console.error('Error deleting temporary image:', err);\n             });\n@@ -1348,5 +1399,6 @@\n         res.status(500).json({ error: 'Failed to get response from Gemini', reply: 'Przepraszam, wystąpił błąd. Spróbuj ponownie później.' });\n     }\n });\n \n+\n app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));\n"
                },
                {
                    "date": 1743960257335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1260,75 +1260,15 @@\n     res.send(chatHtml);\n });\n \n // Add API endpoint for Gemini with image support\n-// Funkcja pomocnicza do parsowania bloków kodu\n-function parseCodeBlocks(aiReply) {\n-    // Wyrażenie regularne wyszukujące bloki kodu z trzema backtickami\n-    const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]*?)```/g;\n-    let blockCounter = 0;\n-\n-    const parsed = aiReply.replace(codeBlockRegex, (match, lang = '', code) => {\n-        blockCounter++;\n-        const codeBlockId = `code-block-${blockCounter}`;\n-\n-        // Zamiana znaków < i > na encje HTML\n-        const escapedCode = code\n-            .replace(/</g, '&lt;')\n-            .replace(/>/g, '&gt;');\n-\n-        // Dobieranie etykiety języka\n-        let langLabel;\n-        switch (lang.toLowerCase()) {\n-            case 'cpp':\n-            case 'c++':\n-                langLabel = 'C++';\n-                break;\n-            case 'python':\n-                langLabel = 'Python';\n-                break;\n-            case 'javascript':\n-                langLabel = 'JavaScript';\n-                break;\n-            case 'html':\n-                langLabel = 'HTML';\n-                break;\n-            case 'css':\n-                langLabel = 'CSS';\n-                break;\n-            default:\n-                langLabel = lang ? lang : 'Kod';\n-        }\n-\n-        return `\n-<div class=\"code-container\">\n-  <div class=\"code-header\">\n-    <span>${langLabel}</span>\n-    <div class=\"code-actions\">\n-      <button class=\"copy-btn\" onclick=\"copyCode('${codeBlockId}')\">\n-        <i class=\"fas fa-copy\"></i> Kopiuj\n-      </button>\n-    </div>\n-  </div>\n-  <pre class=\"code-block\"><code id=\"${codeBlockId}\">${escapedCode}</code></pre>\n-  <div class=\"code-footer\">\n-    <div class=\"mini-counter\">\n-      <i class=\"fas fa-code\"></i> kod\n-    </div>\n-  </div>\n-</div>`;\n-    });\n-\n-    return parsed;\n-}\n-\n-// Endpoint obsługujący zapytania\n app.post('/api/chat', tempUpload.single('image'), async (req, res) => {\n     try {\n         const userMessage = req.body.message || '';\n \n         // Podstawowa instrukcja dla modelu\n         let instruction = \"Odpowiadaj zawsze w języku polskim, bez względu na język zapytania. Twoje odpowiedzi powinny być pomocne, dokładne i przyjazne oraz dopracowane i zrozumiale.\";\n+\n         const fullMessage = instruction + \" \" + userMessage;\n \n         let apiRequestBody = {\n             contents: [\n@@ -1347,14 +1287,15 @@\n                 maxOutputTokens: 8192\n             }\n         };\n \n-        // Jeśli przesłano obrazek, dodajemy go do zapytania API\n+        // If image is present, add it to the API request\n         if (req.file) {\n             const imagePath = path.join(__dirname, req.file.path);\n             const imageBuffer = fs.readFileSync(imagePath);\n             const base64Image = imageBuffer.toString('base64');\n \n+            // Modify the request to include image\n             apiRequestBody.contents[0].parts = [\n                 {\n                     text: fullMessage || \"Opisz to zdjęcie w języku polskim\"\n                 },\n@@ -1366,9 +1307,9 @@\n                 }\n             ];\n         }\n \n-        // Wybór modelu w zależności od obecności obrazka\n+        // Determine the appropriate model based on whether an image is included\n         const apiModel = req.file ? 'gemini-1.5-pro-latest' : 'gemini-1.5-flash-latest';\n \n         const response = await axios.post(\n             `https://generativelanguage.googleapis.com/v1beta/models/${apiModel}:generateContent?key=${GEMINI_API_KEY}`,\n@@ -1379,15 +1320,23 @@\n                 }\n             }\n         );\n \n-        // Pobieramy odpowiedź AI\n+        // Extract the AI's response text\n         let aiReply = response.data.candidates[0].content.parts[0].text;\n \n-        // Przetwarzamy odpowiedź, aby poprawnie wyświetlać bloki kodu\n-        aiReply = parseCodeBlocks(aiReply);\n+        // Format code blocks properly\n+        // Replace markdown code blocks with styled HTML code containers\n+        aiReply = aiReply.replace(/```c\\+\\+/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```cpp/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/KOD C\\+\\+:/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```python/g, '<div class=\"code-container\"><div class=\"code-header\"><span>Python</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```javascript/g, '<div class=\"code-container\"><div class=\"code-header\"><span>JavaScript</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```html/g, '<div class=\"code-container\"><div class=\"code-header\"><span>HTML</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```css/g, '<div class=\"code-container\"><div class=\"code-header\"><span>CSS</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```/g, '</code></pre><div class=\"code-footer\"><div class=\"mini-counter\"><i class=\"fas fa-code\"></i> kod</div></div></div>');\n \n-        // Jeśli obrazek został przesłany tymczasowo, usuwamy go po przetworzeniu\n+        // If image was uploaded temporarily, delete it after processing\n         if (req.file) {\n             fs.unlink(path.join(__dirname, req.file.path), (err) => {\n                 if (err) console.error('Error deleting temporary image:', err);\n             });\n@@ -1399,6 +1348,5 @@\n         res.status(500).json({ error: 'Failed to get response from Gemini', reply: 'Przepraszam, wystąpił błąd. Spróbuj ponownie później.' });\n     }\n });\n \n-\n app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));\n"
                },
                {
                    "date": 1743960326947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1352 @@\n+const express = require('express');\n+const path = require('path');\n+const fs = require('fs');\n+const multer = require('multer');\n+const axios = require('axios'); // Add axios for API requests\n+const marked = require('marked'); // Biblioteka do formatowania markdown\n+\n+const app = express();\n+const PORT = process.env.PORT || 3000;\n+const GEMINI_API_KEY = 'AIzaSyAP1EOpnlAhNRh9MI41v8EHtyRGylNR_bA';\n+\n+// Upewnij się, że istnieje folder temp\n+if (!fs.existsSync('temp')) {\n+    fs.mkdirSync('temp');\n+}\n+\n+// Configure multer to preserve original filename for file panel\n+const storage = multer.diskStorage({\n+    destination: (req, file, cb) => {\n+        // Make sure the \"pliki\" directory exists\n+        if (!fs.existsSync('pliki')) {\n+            fs.mkdirSync('pliki');\n+        }\n+        cb(null, 'pliki/');\n+    },\n+    filename: (req, file, cb) => {\n+        cb(null, file.originalname);\n+    }\n+});\n+const upload = multer({ storage: storage });\n+\n+// Configure multer for temporary image uploads\n+const tempStorage = multer.diskStorage({\n+    destination: (req, file, cb) => {\n+        cb(null, 'temp/');\n+    },\n+    filename: (req, file, cb) => {\n+        cb(null, Date.now() + '-' + file.originalname);\n+    }\n+});\n+const tempUpload = multer({ storage: tempStorage });\n+\n+app.use(express.urlencoded({ extended: true }));\n+app.use(express.json());\n+app.use(express.static('public', { index: false }));\n+\n+// Modern clean styles\n+const modernStyles = `\n+<style>\n+    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n+\n+    * {\n+        box-sizing: border-box;\n+        margin: 0;\n+        padding: 0;\n+    }\n+\n+    :root {\n+        --bg-dark: #121212;\n+        --bg-card: #1e1e2d;\n+        --accent-primary: #6366f1;\n+        --accent-secondary: #8b5cf6;\n+        --text-primary: #f3f4f6;\n+        --text-secondary: #d1d5db;\n+        --text-muted: #9ca3af;\n+        --border-color: #2d2d3d;\n+        --danger: #ef4444;\n+    }\n+\n+    body {\n+        font-family: 'Inter', sans-serif;\n+        background: linear-gradient(135deg, #121212 0%, #1a1a2e 100%);\n+        color: var(--text-primary);\n+        line-height: 1.6;\n+        min-height: 100vh;\n+    }\n+\n+    .container {\n+        width: 90%;\n+        max-width: 1200px;\n+        margin: 2rem auto;\n+        padding: 2rem;\n+        background: var(--bg-card);\n+        border-radius: 12px;\n+        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);\n+        border: 1px solid var(--border-color);\n+    }\n+\n+    h1 {\n+        text-align: center;\n+        margin-bottom: 2rem;\n+        background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));\n+        -webkit-background-clip: text;\n+        -webkit-text-fill-color: transparent;\n+        font-weight: 700;\n+    }\n+\n+    a {\n+        text-decoration: none;\n+    }\n+\n+    .btn {\n+        display: inline-block;\n+        padding: 0.6rem 1.2rem;\n+        margin: 0.3rem;\n+        border: none;\n+        border-radius: 6px;\n+        font-weight: 500;\n+        font-size: 0.9rem;\n+        cursor: pointer;\n+        transition: all 0.2s ease;\n+    }\n+\n+    .btn-primary {\n+        background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));\n+        color: white;\n+    }\n+\n+    .btn-secondary {\n+        background: rgba(255, 255, 255, 0.08);\n+        color: var(--text-primary);\n+        border: 1px solid var(--border-color);\n+    }\n+\n+    .btn-danger {\n+        background: var(--danger);\n+        color: white;\n+    }\n+\n+    .btn:hover {\n+        transform: translateY(-2px);\n+        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n+    }\n+\n+    .btn-primary:hover {\n+        background: linear-gradient(to right, #5254cc, #7e4fdb);\n+    }\n+\n+    .btn-secondary:hover {\n+        background: rgba(255, 255, 255, 0.12);\n+    }\n+\n+    table {\n+        width: 100%;\n+        border-collapse: collapse;\n+        margin: 1.5rem 0;\n+        border-radius: 8px;\n+        overflow: hidden;\n+    }\n+\n+    th, td {\n+        padding: 1rem;\n+        text-align: left;\n+        border-bottom: 1px solid var(--border-color);\n+    }\n+\n+    th {\n+        background-color: rgba(255, 255, 255, 0.05);\n+        font-weight: 600;\n+        color: var(--text-primary);\n+    }\n+\n+    tr:hover {\n+        background-color: rgba(255, 255, 255, 0.03);\n+    }\n+\n+    input[type=\"text\"], \n+    input[type=\"file\"] {\n+        width: 100%;\n+        padding: 0.8rem;\n+        margin: 0.8rem 0;\n+        background: rgba(255, 255, 255, 0.05);\n+        border: 1px solid var(--border-color);\n+        border-radius: 6px;\n+        color: var(--text-primary);\n+        font-family: 'Inter', sans-serif;\n+    }\n+\n+    input[type=\"text\"]:focus,\n+    input[type=\"file\"]:focus,\n+    textarea:focus {\n+        outline: none;\n+        border-color: var(--accent-primary);\n+        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);\n+    }\n+\n+    textarea {\n+        width: 100%;\n+        height: 70vh;\n+        min-height: 400px;\n+        padding: 0.8rem;\n+        margin: 0.8rem 0;\n+        background: rgba(255, 255, 255, 0.05);\n+        border: 1px solid var(--border-color);\n+        border-radius: 6px;\n+        color: var(--text-primary);\n+        font-family: monospace;\n+        resize: vertical;\n+    }\n+\n+    form button[type=\"submit\"] {\n+        background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));\n+        color: white;\n+        padding: 0.8rem 1.5rem;\n+        border: none;\n+        border-radius: 6px;\n+        cursor: pointer;\n+        font-weight: 500;\n+        transition: all 0.2s ease;\n+    }\n+\n+    form button[type=\"submit\"]:hover {\n+        background: linear-gradient(to right, #5254cc, #7e4fdb);\n+        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n+    }\n+\n+    .actions {\n+        display: flex;\n+        flex-wrap: wrap;\n+        justify-content: flex-start;\n+        gap: 0.3rem;\n+    }\n+\n+    .header-actions {\n+        display: flex;\n+        justify-content: space-between;\n+        align-items: center;\n+        margin-bottom: 1.5rem;\n+        background: rgba(0, 0, 0, 0.2);\n+        padding: 1rem;\n+        border-radius: 8px;\n+        border: 1px solid var(--border-color);\n+    }\n+\n+    .fade-in {\n+        animation: fadeIn 0.3s ease forwards;\n+    }\n+\n+    @keyframes fadeIn {\n+        from { opacity: 0; transform: translateY(10px); }\n+        to { opacity: 1; transform: translateY(0); }\n+    }\n+</style>\n+`;\n+\n+app.get('/', (req, res) => {\n+    res.send(`\n+<html>\n+<head>\n+    <title>Files Portal</title>\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    ${modernStyles}\n+</head>\n+<body>\n+    <div class=\"container fade-in\">\n+        <h1>Welcome to Files Portal</h1>\n+        <div style=\"text-align: center; margin-top: 2rem; display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\n+            <a href=\"/panel\" class=\"btn btn-primary\">Go to File Management</a>\n+            <a href=\"/chat\" class=\"btn btn-primary\" style=\"background: linear-gradient(to right, #9333ea, #3b82f6);\">\n+                <span style=\"display: flex; align-items: center; gap: 8px;\">\n+                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n+                        <path d=\"M8 1a5 5 0 0 0-5 5v1h1a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V6a6 6 0 1 1 12 0v6a2.5 2.5 0 0 1-2.5 2.5H9.366a1 1 0 0 1-.866.5h-1a1 1 0 1 1 0-2h1a1 1 0 0 1 .866.5H11.5A1.5 1.5 0 0 0 13 12h-1a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1h1V6a5 5 0 0 0-5-5z\"/>\n+                    </svg>\n+                    Chat with YutAi\n+                </span>\n+            </a>\n+        </div>\n+    </div>\n+</body>\n+</html>\n+`);\n+});\n+\n+app.get('/panel', (req, res) => {\n+    fs.readdir('pliki', (err, files) => {\n+        if (err) {\n+            if (err.code === 'ENOENT') {\n+                // Directory doesn't exist, create it\n+                fs.mkdirSync('pliki');\n+                files = [];\n+            } else {\n+                return res.send('Error loading files.');\n+            }\n+        }\n+\n+        const fileRows = files.map(file => `\n+<tr class=\"fade-in\">\n+    <td>${file}</td>\n+    <td class=\"actions\">\n+            <a href=\"/files/${encodeURIComponent(file)}\" download class=\"btn btn-secondary\">Download</a>\n+            <a href=\"/panel/edit/${encodeURIComponent(file)}\" class=\"btn btn-secondary\">Edit</a>\n+            <a href=\"/panel/rename/${encodeURIComponent(file)}\" class=\"btn btn-secondary\">Rename</a>\n+            <a href=\"/panel/redirect/${encodeURIComponent(file)}\" class=\"btn btn-secondary\">Open</a>\n+            <a href=\"/panel/delete/${encodeURIComponent(file)}\" class=\"btn btn-danger\">Delete</a>\n+    </td>\n+</tr>\n+`).join('');\n+\n+        res.send(`\n+<html>\n+<head>\n+        <title>File Management</title>\n+        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+        ${modernStyles}\n+</head>\n+<body>\n+        <div class=\"container fade-in\">\n+            <h1>File Management</h1>\n+            \n+            <div class=\"header-actions\">\n+                <div>\n+                    <a href=\"/panel/create\" class=\"btn btn-primary\">Create New File</a>\n+                    <a href=\"/\" class=\"btn btn-secondary\">Powrót do strony głównej</a>\n+                </div>\n+                \n+                <form action=\"/panel/upload\" method=\"POST\" enctype=\"multipart/form-data\" style=\"display: flex; align-items: center; gap: 10px;\">\n+                    <input type=\"file\" name=\"file\" required style=\"margin: 0;\">\n+                    <button type=\"submit\" class=\"btn btn-primary\">Upload</button>\n+        </form>\n+    </div>\n+\n+        <table>\n+            <tr>\n+                <th>File Name</th>\n+                <th>Actions</th>\n+            </tr>\n+            ${fileRows}\n+        </table>\n+    </div>\n+</body>\n+</html>\n+`);\n+    });\n+});\n+\n+app.get('/panel/create', (req, res) => {\n+    res.send(`\n+<html>\n+<head>\n+    <title>Create New File</title>\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    ${modernStyles}\n+</head>\n+<body>\n+    <div class=\"container fade-in\">\n+        <h1>Create New File</h1>\n+        <form action=\"/panel/create\" method=\"POST\">\n+            <input type=\"text\" name=\"filename\" placeholder=\"File name\" required>\n+            <textarea name=\"content\" placeholder=\"File content\"></textarea>\n+            <div style=\"display: flex; justify-content: space-between; margin-top: 1rem;\">\n+                <a href=\"/panel\" class=\"btn btn-secondary\">Back</a>\n+                <button type=\"submit\" class=\"btn btn-primary\">Create</button>\n+            </div>\n+        </form>\n+    </div>\n+</body>\n+</html>\n+`);\n+});\n+\n+// Obsługa tworzenia plików\n+app.post('/panel/create', (req, res) => {\n+    const { filename, content } = req.body;\n+    if (!filename) return res.send('File name is required!');\n+\n+    const filePath = path.join(__dirname, 'pliki', filename);\n+\n+    // Sprawdź czy plik już istnieje\n+    fs.access(filePath, fs.constants.F_OK, (err) => {\n+        if (!err) return res.send('File already exists!');\n+\n+        fs.writeFile(filePath, content || '', (err) => {\n+            if (err) return res.send('Error creating file!');\n+            res.redirect('/panel');\n+        });\n+    });\n+});\n+\n+app.get('/panel/edit/:filename', (req, res) => {\n+    fs.readFile(path.join(__dirname, 'pliki', req.params.filename), 'utf8', (err, data) => {\n+        if (err) return res.send('Error reading file.');\n+        res.send(`\n+<html>\n+<head>\n+    <title>Edit File</title>\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    ${modernStyles}\n+</head>\n+<body>\n+    <div class=\"container fade-in\">\n+        <h1>Edit File: ${req.params.filename}</h1>\n+        <form action=\"/panel/edit/${encodeURIComponent(req.params.filename)}\" method=\"POST\">\n+            <textarea name=\"content\">${data}</textarea>\n+            <div style=\"display: flex; justify-content: space-between; margin-top: 1rem;\">\n+                <a href=\"/panel\" class=\"btn btn-secondary\">Back</a>\n+                <button type=\"submit\" class=\"btn btn-primary\">Save</button>\n+            </div>\n+        </form>\n+    </div>\n+</body>\n+</html>\n+`);\n+    });\n+});\n+\n+app.get('/panel/rename/:filename', (req, res) => {\n+    res.send(`\n+<html>\n+<head>\n+    <title>Rename File</title>\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    ${modernStyles}\n+</head>\n+<body>\n+    <div class=\"container fade-in\">\n+        <h1>Rename File: ${req.params.filename}</h1>\n+        <form action=\"/panel/rename/${encodeURIComponent(req.params.filename)}\" method=\"POST\">\n+            <input type=\"text\" name=\"newName\" placeholder=\"New file name\" required>\n+            <div style=\"display: flex; justify-content: space-between; margin-top: 1rem;\">\n+                <a href=\"/panel\" class=\"btn btn-secondary\">Back</a>\n+                <button type=\"submit\" class=\"btn btn-primary\">Rename</button>\n+            </div>\n+        </form>\n+    </div>\n+</body>\n+</html>\n+`);\n+});\n+\n+// Pozostałe endpointy\n+app.post('/panel/upload', upload.single('file'), (req, res) => res.redirect('/panel'));\n+\n+app.get('/panel/delete/:filename', (req, res) => {\n+    fs.unlink(path.join(__dirname, 'pliki', req.params.filename), (err) => {\n+        res.redirect('/panel');\n+    });\n+});\n+\n+app.post('/panel/edit/:filename', (req, res) => {\n+    fs.writeFile(path.join(__dirname, 'pliki', req.params.filename), req.body.content, 'utf8', (err) => {\n+        res.redirect('/panel');\n+    });\n+});\n+\n+app.post('/panel/rename/:filename', (req, res) => {\n+    fs.rename(\n+        path.join(__dirname, 'pliki', req.params.filename),\n+        path.join(__dirname, 'pliki', req.body.newName),\n+        () => res.redirect('/panel')\n+    );\n+});\n+\n+app.get('/panel/redirect/:filename', (req, res) => {\n+    res.redirect(`/files/${encodeURIComponent(req.params.filename)}`);\n+});\n+\n+// Dodaj endpoint do udostępniania plików z folderu pliki\n+app.use('/files', express.static('pliki'));\n+\n+// Add Gemini chat page\n+app.get('/chat', (req, res) => {\n+    const chatHtml = `<!DOCTYPE html>\n+<html>\n+<head>\n+    <title>YutAi - Inteligentny Asystent</title>\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n+    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n+    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n+    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n+    ${modernStyles}\n+    <style>\n+      body {\n+          font-family: 'Poppins', sans-serif;\n+          background: linear-gradient(125deg, #0f0c29, #302b63, #24243e);\n+          color: #fff;\n+          line-height: 1.6;\n+          min-height: 100vh;\n+          margin: 0;\n+          padding: 0;\n+          display: flex;\n+          align-items: center;\n+          justify-content: center;\n+          animation: gradientBG 15s ease infinite;\n+          background-size: 400% 400%;\n+      }\n+      \n+      @keyframes gradientBG {\n+          0% { background-position: 0% 50%; }\n+          50% { background-position: 100% 50%; }\n+          100% { background-position: 0% 50%; }\n+      }\n+      \n+      .container {\n+          width: 95%;\n+          max-width: 1100px;\n+          margin: 2rem auto;\n+          padding: 0;\n+          background: rgba(15, 23, 42, 0.7);\n+          border-radius: 20px;\n+          box-shadow: 0 15px 50px rgba(0, 0, 0, 0.4);\n+          backdrop-filter: blur(10px);\n+          border: 1px solid rgba(255, 255, 255, 0.1);\n+          overflow: hidden;\n+          display: flex;\n+          flex-direction: column;\n+          height: 90vh;\n+      }\n+      \n+      .header {\n+          padding: 1.5rem 2rem;\n+          display: flex;\n+          justify-content: space-between;\n+          align-items: center;\n+          border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n+          background: rgba(15, 23, 42, 0.5);\n+      }\n+      \n+      .logo {\n+          display: flex;\n+          align-items: center;\n+          gap: 10px;\n+      }\n+      \n+      .logo-icon {\n+          font-size: 1.8rem;\n+          background: linear-gradient(to right, #6366f1, #8b5cf6, #ec4899);\n+          -webkit-background-clip: text;\n+          -webkit-text-fill-color: transparent;\n+      }\n+      \n+      h1 {\n+          margin: 0;\n+          font-size: 1.8rem;\n+          background: linear-gradient(to right, #6366f1, #8b5cf6, #ec4899);\n+          -webkit-background-clip: text;\n+          -webkit-text-fill-color: transparent;\n+          font-weight: 700;\n+      }\n+      \n+      .status {\n+          display: flex;\n+          align-items: center;\n+          gap: 6px;\n+          font-size: 0.9rem;\n+          color: #a5b4fc;\n+          background: rgba(99, 102, 241, 0.1);\n+          padding: 5px 10px;\n+          border-radius: 20px;\n+          border: 1px solid rgba(99, 102, 241, 0.2);\n+      }\n+      \n+      .status-dot {\n+          width: 8px;\n+          height: 8px;\n+          background: #22c55e;\n+          border-radius: 50%;\n+          animation: pulse 2s infinite;\n+      }\n+      \n+      .chat-area {\n+          flex: 1;\n+          overflow-y: auto;\n+          padding: 1.5rem 2rem;\n+          scroll-behavior: smooth;\n+          position: relative;\n+          background-image: url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.03'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n+      }\n+      \n+      .chat-area::-webkit-scrollbar {\n+          width: 6px;\n+      }\n+      \n+      .chat-area::-webkit-scrollbar-track {\n+          background: rgba(255, 255, 255, 0.05);\n+          border-radius: 10px;\n+      }\n+      \n+      .chat-area::-webkit-scrollbar-thumb {\n+          background: rgba(99, 102, 241, 0.3);\n+          border-radius: 10px;\n+      }\n+      \n+      .chat-area::-webkit-scrollbar-thumb:hover {\n+          background: rgba(99, 102, 241, 0.5);\n+      }\n+      \n+      .message {\n+          margin-bottom: 1.5rem;\n+          padding: 1rem 1.2rem;\n+          border-radius: 15px;\n+          max-width: 80%;\n+          position: relative;\n+          animation: fadeIn 0.3s ease forwards;\n+          line-height: 1.5;\n+      }\n+      \n+      @keyframes fadeIn {\n+          from { opacity: 0; transform: translateY(10px); }\n+          to { opacity: 1; transform: translateY(0); }\n+      }\n+      \n+      .user-message {\n+          background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);\n+          margin-left: auto;\n+          border-top-right-radius: 0;\n+          box-shadow: 0 5px 15px rgba(99, 102, 241, 0.3);\n+          color: white;\n+      }\n+      \n+      .ai-message {\n+          background: rgba(255, 255, 255, 0.05);\n+          margin-right: auto;\n+          border-top-left-radius: 0;\n+          border: 1px solid rgba(255, 255, 255, 0.1);\n+          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n+      }\n+      \n+      .message-time {\n+          font-size: 0.7rem;\n+          opacity: 0.7;\n+          margin-top: 5px;\n+          text-align: right;\n+      }\n+      \n+      .footer {\n+          padding: 1.5rem 2rem;\n+          border-top: 1px solid rgba(255, 255, 255, 0.1);\n+          background: rgba(15, 23, 42, 0.5);\n+      }\n+      \n+      .input-area {\n+          display: flex;\n+          gap: 10px;\n+          position: relative;\n+      }\n+      \n+      .input-area input {\n+          flex-grow: 1;\n+          padding: 1rem 1rem 1rem 3rem;\n+          border: 1px solid rgba(255, 255, 255, 0.1);\n+          border-radius: 15px;\n+          background: rgba(15, 23, 42, 0.6);\n+          color: #fff;\n+          font-family: 'Poppins', sans-serif;\n+          font-size: 1rem;\n+          transition: all 0.3s ease;\n+      }\n+      \n+      .input-area input:focus {\n+          outline: none;\n+          border-color: #6366f1;\n+          box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.3);\n+      }\n+      \n+      .input-icon {\n+          position: absolute;\n+          left: 1rem;\n+          top: 50%;\n+          transform: translateY(-50%);\n+          color: #6366f1;\n+          font-size: 1.2rem;\n+      }\n+      \n+      .input-area button {\n+          padding: 0 1.5rem;\n+          border: none;\n+          border-radius: 15px;\n+          background: linear-gradient(to right, #6366f1, #8b5cf6, #ec4899);\n+          color: white;\n+          font-weight: 600;\n+          cursor: pointer;\n+          transition: all 0.3s ease;\n+          display: flex;\n+          align-items: center;\n+          gap: 10px;\n+      }\n+      \n+      .input-area button:hover {\n+          transform: translateY(-2px);\n+          box-shadow: 0 5px 15px rgba(99, 102, 241, 0.4);\n+      }\n+      \n+      .input-area button i {\n+          font-size: 1.2rem;\n+      }\n+      \n+      .tools-bar {\n+          display: flex;\n+          justify-content: space-between;\n+          margin-top: 1rem;\n+      }\n+      \n+      .image-preview {\n+          display: none;\n+          position: relative;\n+          margin-top: 10px;\n+          max-width: 200px;\n+          border-radius: 12px;\n+          overflow: hidden;\n+          border: 1px solid rgba(255, 255, 255, 0.1);\n+          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n+      }\n+      \n+      .image-preview img {\n+          width: 100%;\n+          display: block;\n+      }\n+      \n+      .image-preview-close {\n+          position: absolute;\n+          top: 5px;\n+          right: 5px;\n+          background: rgba(0, 0, 0, 0.6);\n+          border: none;\n+          color: white;\n+          width: 24px;\n+          height: 24px;\n+          border-radius: 50%;\n+          font-size: 16px;\n+          cursor: pointer;\n+          display: flex;\n+          align-items: center;\n+          justify-content: center;\n+      }\n+      \n+      .file-upload {\n+          position: relative;\n+          overflow: hidden;\n+      }\n+      \n+      .file-upload input[type=file] {\n+          position: absolute;\n+          left: 0;\n+          top: 0;\n+          opacity: 0;\n+          width: 100%;\n+          height: 100%;\n+          cursor: pointer;\n+      }\n+      \n+      .file-upload-btn {\n+          display: flex;\n+          align-items: center;\n+          gap: 6px;\n+          background: rgba(99, 102, 241, 0.1);\n+          color: #a5b4fc;\n+          border: 1px solid rgba(99, 102, 241, 0.2);\n+          border-radius: 10px;\n+          padding: 6px 12px;\n+          font-size: 0.9rem;\n+          cursor: pointer;\n+          transition: all 0.3s ease;\n+      }\n+      \n+      .file-upload-btn:hover {\n+          background: rgba(99, 102, 241, 0.2);\n+          color: #c7d2fe;\n+      }\n+      \n+      .user-message-image {\n+          max-width: 200px;\n+          border-radius: 8px;\n+          margin-top: 10px;\n+          display: block;\n+      }\n+      \n+      .code-block {\n+          background: rgba(15, 23, 42, 0.8);\n+          padding: 1rem;\n+          border-radius: 8px;\n+          margin: 1rem 0;\n+          white-space: pre-wrap;\n+          font-family: 'JetBrains Mono', monospace;\n+          font-size: 0.9rem;\n+          line-height: 1.5;\n+          color: #e2e8f0;\n+          border-left: 3px solid #6366f1;\n+      }\n+      \n+      .code-container {\n+          margin: 15px 0;\n+          border-radius: 12px;\n+          overflow: hidden;\n+          border: 1px solid rgba(255, 255, 255, 0.1);\n+          background: rgba(15, 23, 42, 0.6);\n+      }\n+      \n+      .code-header {\n+          display: flex;\n+          justify-content: space-between;\n+          align-items: center;\n+          padding: 10px 15px;\n+          background: rgba(15, 23, 42, 0.8);\n+          border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n+      }\n+      \n+      .code-header span {\n+          color: #a5b4fc;\n+          font-size: 0.85rem;\n+          text-transform: uppercase;\n+          letter-spacing: 1px;\n+      }\n+      \n+      .code-actions {\n+          display: flex;\n+          gap: 8px;\n+      }\n+      \n+      .code-actions button {\n+          padding: 5px 10px;\n+          background: rgba(99, 102, 241, 0.2);\n+          color: #a5b4fc;\n+          border: none;\n+          border-radius: 8px;\n+          font-size: 0.8rem;\n+          cursor: pointer;\n+          transition: all 0.2s ease;\n+          display: flex;\n+          align-items: center;\n+          gap: 5px;\n+      }\n+      \n+      .code-actions button:hover {\n+          background: rgba(99, 102, 241, 0.4);\n+          color: #c7d2fe;\n+      }\n+      \n+      .code-actions button i {\n+          font-size: 0.9rem;\n+      }\n+      \n+      .code-footer {\n+          display: flex;\n+          padding: 8px 15px;\n+          background: rgba(15, 23, 42, 0.8);\n+          border-top: 1px solid rgba(255, 255, 255, 0.1);\n+      }\n+      \n+      .mini-counter {\n+          font-size: 0.75rem;\n+          color: #6366f1;\n+          display: flex;\n+          align-items: center;\n+          gap: 5px;\n+      }\n+      \n+      .typing-indicator {\n+          display: flex;\n+          align-items: center;\n+          gap: 5px;\n+      }\n+      \n+      .typing-indicator span {\n+          display: inline-block;\n+          width: 8px;\n+          height: 8px;\n+          background-color: #a5b4fc;\n+          border-radius: 50%;\n+          animation: bounce 1.5s infinite;\n+      }\n+      \n+      .typing-indicator span:nth-child(2) {\n+          animation-delay: 0.2s;\n+      }\n+      \n+      .typing-indicator span:nth-child(3) {\n+          animation-delay: 0.4s;\n+      }\n+      \n+      @keyframes bounce {\n+          0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }\n+          40% { transform: scale(1.2); opacity: 1; }\n+      }\n+      \n+      /* Style dla formatowania Markdown */\n+      .ai-message strong {\n+          font-weight: 700;\n+          color: #a5b4fc;\n+      }\n+      \n+      .ai-message em {\n+          font-style: italic;\n+          color: #ddd;\n+      }\n+      \n+      .ai-message ul, .ai-message ol {\n+          margin-left: 1.5rem;\n+          margin-bottom: 1rem;\n+      }\n+      \n+      .ai-message li {\n+          margin-bottom: 0.5rem;\n+      }\n+      \n+      .ai-message a {\n+          color: #6366f1;\n+          text-decoration: none;\n+          border-bottom: 1px dotted #6366f1;\n+          transition: all 0.2s ease;\n+      }\n+      \n+      .ai-message a:hover {\n+          color: #818cf8;\n+          border-bottom-color: #818cf8;\n+      }\n+      \n+      .ai-message blockquote {\n+          border-left: 3px solid #6366f1;\n+          padding-left: 1rem;\n+          margin-left: 0;\n+          margin-right: 0;\n+          font-style: italic;\n+          color: #9ca3af;\n+      }\n+      \n+      .ai-message h1, .ai-message h2, .ai-message h3, .ai-message h4 {\n+          margin-top: 1.5rem;\n+          margin-bottom: 0.75rem;\n+          color: #fff;\n+          font-weight: 600;\n+      }\n+      \n+      .ai-message h1 {\n+          font-size: 1.5rem;\n+          border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n+          padding-bottom: 0.5rem;\n+      }\n+      \n+      .ai-message h2 {\n+          font-size: 1.3rem;\n+      }\n+      \n+      .ai-message h3 {\n+          font-size: 1.1rem;\n+      }\n+      \n+      .ai-message h4 {\n+          font-size: 1rem;\n+      }\n+      \n+      .ai-message table {\n+          width: 100%;\n+          border-collapse: collapse;\n+          margin: 1rem 0;\n+          overflow: hidden;\n+          border-radius: 8px;\n+      }\n+      \n+      .ai-message th {\n+          background-color: rgba(99, 102, 241, 0.2);\n+          text-align: left;\n+          padding: 0.5rem;\n+      }\n+      \n+      .ai-message td {\n+          padding: 0.5rem;\n+          border-top: 1px solid rgba(255, 255, 255, 0.1);\n+      }\n+      \n+      .ai-message tr:nth-child(even) {\n+          background-color: rgba(255, 255, 255, 0.02);\n+      }\n+      \n+      @media (max-width: 768px) {\n+          .container {\n+              width: 100%;\n+              height: 100vh;\n+              margin: 0;\n+              border-radius: 0;\n+          }\n+          \n+          .message {\n+              max-width: 90%;\n+          }\n+          \n+          .header, .footer {\n+              padding: 1rem;\n+          }\n+          \n+          .chat-area {\n+              padding: 1rem;\n+          }\n+          \n+          h1 {\n+              font-size: 1.5rem;\n+          }\n+      }\n+    </style>\n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/marked/4.3.0/marked.min.js\"></script>\n+</head>\n+<body>\n+    <div class=\"container\">\n+        <div class=\"header\">\n+            <div class=\"logo\">\n+                <i class=\"fas fa-robot logo-icon\"></i>\n+                <h1>YutAi</h1>\n+            </div>\n+            <div class=\"status\">\n+                <div class=\"status-dot\"></div>\n+                <span>Online</span>\n+            </div>\n+        </div>\n+        \n+        <div class=\"chat-area\" id=\"chat-area\">\n+            <div class=\"message ai-message\">\n+                <div>Cześć! Jestem YutAi, Twój zaawansowany asystent AI. W czym mogę Ci dzisiaj pomóc?</div>\n+                <div class=\"message-time\">Teraz</div>\n+            </div>\n+        </div>\n+        \n+        <div class=\"footer\">\n+            <div class=\"input-area\">\n+                <i class=\"fas fa-message input-icon\"></i>\n+                <input type=\"text\" id=\"user-input\" placeholder=\"Napisz wiadomość...\" autocomplete=\"off\">\n+                <button id=\"send-button\">\n+                    <span>Wyślij</span>\n+                    <i class=\"fas fa-paper-plane\"></i>\n+                </button>\n+            </div>\n+            \n+            <div class=\"image-preview\" id=\"image-preview\">\n+                <img id=\"preview-img\" src=\"\" alt=\"Podgląd zdjęcia\">\n+                <button class=\"image-preview-close\" id=\"remove-image\">\n+                    <i class=\"fas fa-times\"></i>\n+                </button>\n+            </div>\n+            \n+            <div class=\"tools-bar\">\n+                <div class=\"file-upload\">\n+                    <input type=\"file\" id=\"image-upload\" accept=\"image/*\">\n+                    <div class=\"file-upload-btn\">\n+                        <i class=\"fas fa-image\"></i>\n+                        <span>Dodaj zdjęcie</span>\n+                    </div>\n+                </div>\n+            </div>\n+        </div>\n+    </div>\n+    \n+    <script>\n+    (function() {\n+        const chatArea = document.getElementById('chat-area');\n+        const userInput = document.getElementById('user-input');\n+        const sendButton = document.getElementById('send-button');\n+        const imageUpload = document.getElementById('image-upload');\n+        const imagePreview = document.getElementById('image-preview');\n+        const previewImg = document.getElementById('preview-img');\n+        const removeImageBtn = document.getElementById('remove-image');\n+        \n+        let selectedImage = null;\n+        \n+        // Funkcja kopiowania kodu\n+        window.copyCode = function(blockId) {\n+            const codeElement = document.getElementById(blockId);\n+            if (!codeElement) return;\n+            \n+            navigator.clipboard.writeText(codeElement.textContent)\n+                .then(() => {\n+                    const btn = codeElement.closest('.code-container').querySelector('.copy-btn');\n+                    const originalText = btn.textContent;\n+                    btn.textContent = 'Skopiowano!';\n+                    setTimeout(() => {\n+                        btn.textContent = originalText;\n+                    }, 2000);\n+                });\n+        };\n+        \n+        // Formatowanie czasu\n+        function formatTime() {\n+            const now = new Date();\n+            return now.getHours().toString().padStart(2, '0') + ':' + \n+                   now.getMinutes().toString().padStart(2, '0');\n+        }\n+        \n+        // Funkcja do dodawania wiadomości\n+        function addMessage(text, isUser, imageUrl = null) {\n+            const messageDiv = document.createElement('div');\n+            messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n+            \n+            const contentDiv = document.createElement('div');\n+            \n+            if (isUser) {\n+                contentDiv.textContent = text;\n+                \n+                // Dodaj zdjęcie jeśli zostało wybrane\n+                if (imageUrl) {\n+                    const img = document.createElement('img');\n+                    img.src = imageUrl;\n+                    img.className = 'user-message-image';\n+                    img.alt = 'Przesłane zdjęcie';\n+                    messageDiv.appendChild(img);\n+                }\n+            } else {\n+                // Dla wiadomości AI używamy marked.js do formatowania Markdown\n+                // Skonfiguruj marked.js do obsługi pogrubienia i innych stylów Markdown\n+                const renderer = new marked.Renderer();\n+                \n+                // Użyj marked do konwersji Markdown na HTML\n+                marked.setOptions({\n+                    renderer: renderer,\n+                    breaks: true,\n+                    gfm: true\n+                });\n+                \n+                // Przetwórz tekst na HTML z zachowaniem bloków kodu\n+                let processedText = text;\n+                \n+                // Najpierw zabezpiecz bloki kodu, aby marked ich nie przetwarzał\n+                const codeBlocks = [];\n+                processedText = processedText.replace(/<div class=\"code-container\">[\\\\s\\\\S]*?<\\\\/div>/g, function(match) {\n+                    codeBlocks.push(match);\n+                    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n+                });\n+                \n+                // Zastosuj formatowanie Markdown\n+                processedText = marked.parse(processedText);\n+                \n+                // Przywróć bloki kodu\n+                processedText = processedText.replace(/{{CODE_BLOCK_(\\\\d+)}}/g, function(match, index) {\n+                    return codeBlocks[parseInt(index)];\n+                });\n+                \n+                contentDiv.innerHTML = processedText;\n+            }\n+            \n+            const timeDiv = document.createElement('div');\n+            timeDiv.className = 'message-time';\n+            timeDiv.textContent = formatTime();\n+            \n+            messageDiv.appendChild(contentDiv);\n+            messageDiv.appendChild(timeDiv);\n+            \n+            chatArea.appendChild(messageDiv);\n+            chatArea.scrollTop = chatArea.scrollHeight;\n+        }\n+        \n+        // Funkcja do wysyłania wiadomości\n+        function sendMessage() {\n+            const message = userInput.value.trim();\n+            if (!message && !selectedImage) return;\n+            \n+            // Dodaj wiadomość użytkownika\n+            const imageUrl = selectedImage ? URL.createObjectURL(selectedImage) : null;\n+            addMessage(message, true, imageUrl);\n+            \n+            // Wyczyść pole wprowadzania\n+            userInput.value = '';\n+            \n+            // Przygotuj dane do wysłania\n+            const formData = new FormData();\n+            formData.append('message', message);\n+            \n+            // Dodaj zdjęcie jeśli zostało wybrane\n+            if (selectedImage) {\n+                formData.append('image', selectedImage);\n+            }\n+            \n+            // Ukryj podgląd zdjęcia\n+            imagePreview.style.display = 'none';\n+            selectedImage = null;\n+            \n+            // Dodaj wiadomość ładowania\n+            const loadingId = Date.now();\n+            const loadingDiv = document.createElement('div');\n+            loadingDiv.className = 'message ai-message';\n+            loadingDiv.id = 'loading-' + loadingId;\n+            \n+            const loadingContent = document.createElement('div');\n+            loadingContent.innerHTML = '<div class=\"typing-indicator\"><span>.</span><span>.</span><span>.</span></div>';\n+            \n+            const timeDiv = document.createElement('div');\n+            timeDiv.className = 'message-time';\n+            timeDiv.textContent = formatTime();\n+            \n+            loadingDiv.appendChild(loadingContent);\n+            loadingDiv.appendChild(timeDiv);\n+            \n+            chatArea.appendChild(loadingDiv);\n+            chatArea.scrollTop = chatArea.scrollHeight;\n+            \n+            // Wyślij zapytanie do API\n+            fetch('/api/chat', {\n+                method: 'POST',\n+                body: formData\n+            })\n+            .then(function(response) {\n+                return response.json();\n+            })\n+            .then(function(data) {\n+                // Usuń wiadomość ładowania\n+                const loadingMessage = document.getElementById('loading-' + loadingId);\n+                if (loadingMessage) loadingMessage.remove();\n+                \n+                // Dodaj odpowiedź AI\n+                addMessage(data.reply, false);\n+            })\n+            .catch(function(error) {\n+                console.error('Error:', error);\n+                // Usuń wiadomość ładowania\n+                const loadingMessage = document.getElementById('loading-' + loadingId);\n+                if (loadingMessage) loadingMessage.remove();\n+                \n+                // Dodaj komunikat o błędzie\n+                addMessage('Przepraszam, wystąpił błąd. Spróbuj ponownie.', false);\n+            });\n+        }\n+        \n+        // Obsługa wyboru zdjęcia\n+        function handleImageUpload(event) {\n+            const file = event.target.files[0];\n+            if (!file) return;\n+            \n+            // Akceptuj tylko obrazy\n+            if (!file.type.startsWith('image/')) {\n+                alert('Proszę wybrać plik obrazu');\n+                return;\n+            }\n+            \n+            // Pokaż podgląd zdjęcia\n+            const reader = new FileReader();\n+            reader.onload = function(e) {\n+                previewImg.src = e.target.result;\n+                imagePreview.style.display = 'block';\n+                selectedImage = file;\n+            };\n+            reader.readAsDataURL(file);\n+        }\n+        \n+        // Usunięcie wybranego zdjęcia\n+        function removeSelectedImage() {\n+            imagePreview.style.display = 'none';\n+            imageUpload.value = '';\n+            selectedImage = null;\n+        }\n+        \n+        // Obsługa przycisku wysyłania\n+        sendButton.addEventListener('click', sendMessage);\n+        \n+        // Obsługa klawisza Enter\n+        userInput.addEventListener('keypress', function(e) {\n+            if (e.key === 'Enter') {\n+                sendMessage();\n+            }\n+        });\n+        \n+        // Obsługa uploadu zdjęć\n+        imageUpload.addEventListener('change', handleImageUpload);\n+        \n+        // Obsługa usuwania zdjęcia\n+        removeImageBtn.addEventListener('click', removeSelectedImage);\n+        \n+        // Ustaw focus na pole wprowadzania\n+        userInput.focus();\n+    })();\n+    </script>\n+</body>\n+</html>`;\n+\n+    res.send(chatHtml);\n+});\n+\n+// Add API endpoint for Gemini with image support\n+app.post('/api/chat', tempUpload.single('image'), async (req, res) => {\n+    try {\n+        const userMessage = req.body.message || '';\n+\n+        // Podstawowa instrukcja dla modelu\n+        let instruction = \"Odpowiadaj zawsze w języku polskim, bez względu na język zapytania. Twoje odpowiedzi powinny być pomocne, dokładne i przyjazne oraz dopracowane i zrozumiale.\";\n+\n+        const fullMessage = instruction + \" \" + userMessage;\n+\n+        let apiRequestBody = {\n+            contents: [\n+                {\n+                    parts: [\n+                        {\n+                            text: fullMessage\n+                        }\n+                    ]\n+                }\n+            ],\n+            generationConfig: {\n+                temperature: 0.7,\n+                topK: 40,\n+                topP: 0.95,\n+                maxOutputTokens: 8192\n+            }\n+        };\n+\n+        // If image is present, add it to the API request\n+        if (req.file) {\n+            const imagePath = path.join(__dirname, req.file.path);\n+            const imageBuffer = fs.readFileSync(imagePath);\n+            const base64Image = imageBuffer.toString('base64');\n+\n+            // Modify the request to include image\n+            apiRequestBody.contents[0].parts = [\n+                {\n+                    text: fullMessage || \"Opisz to zdjęcie w języku polskim\"\n+                },\n+                {\n+                    inlineData: {\n+                        mimeType: req.file.mimetype,\n+                        data: base64Image\n+                    }\n+                }\n+            ];\n+        }\n+\n+        // Determine the appropriate model based on whether an image is included\n+        const apiModel = req.file ? 'gemini-1.5-pro-latest' : 'gemini-1.5-flash-latest';\n+\n+        const response = await axios.post(\n+            `https://generativelanguage.googleapis.com/v1beta/models/${apiModel}:generateContent?key=${GEMINI_API_KEY}`,\n+            apiRequestBody,\n+            {\n+                headers: {\n+                    'Content-Type': 'application/json'\n+                }\n+            }\n+        );\n+\n+        // Extract the AI's response text\n+        let aiReply = response.data.candidates[0].content.parts[0].text;\n+\n+        // Format code blocks properly\n+        // Replace markdown code blocks with styled HTML code containers\n+        aiReply = aiReply.replace(/```c\\+\\+/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```cpp/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/KOD C\\+\\+:/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```python/g, '<div class=\"code-container\"><div class=\"code-header\"><span>Python</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```javascript/g, '<div class=\"code-container\"><div class=\"code-header\"><span>JavaScript</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```html/g, '<div class=\"code-container\"><div class=\"code-header\"><span>HTML</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```css/g, '<div class=\"code-container\"><div class=\"code-header\"><span>CSS</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```/g, '</code></pre><div class=\"code-footer\"><div class=\"mini-counter\"><i class=\"fas fa-code\"></i> kod</div></div></div>');\n+\n+        // If image was uploaded temporarily, delete it after processing\n+        if (req.file) {\n+            fs.unlink(path.join(__dirname, req.file.path), (err) => {\n+                if (err) console.error('Error deleting temporary image:', err);\n+            });\n+        }\n+\n+        res.json({ reply: aiReply });\n+    } catch (error) {\n+        console.error('Error calling Gemini API:', error);\n+        res.status(500).json({ error: 'Failed to get response from Gemini', reply: 'Przepraszam, wystąpił błąd. Spróbuj ponownie później.' });\n+    }\n+});\n+\n+app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));\n"
                },
                {
                    "date": 1743960394634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1073,1421 +1073,50 @@\n                    now.getMinutes().toString().padStart(2, '0');\n         }\n         \n         // Funkcja do dodawania wiadomości\n-        function addMessage(text, isUser, imageUrl = null) {\n-            const messageDiv = document.createElement('div');\n-            messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n-            \n-            const contentDiv = document.createElement('div');\n-            \n-            if (isUser) {\n-                contentDiv.textContent = text;\n-                \n-                // Dodaj zdjęcie jeśli zostało wybrane\n-                if (imageUrl) {\n-                    const img = document.createElement('img');\n-                    img.src = imageUrl;\n-                    img.className = 'user-message-image';\n-                    img.alt = 'Przesłane zdjęcie';\n-                    messageDiv.appendChild(img);\n-                }\n-            } else {\n-                // Dla wiadomości AI używamy marked.js do formatowania Markdown\n-                // Skonfiguruj marked.js do obsługi pogrubienia i innych stylów Markdown\n-                const renderer = new marked.Renderer();\n-                \n-                // Użyj marked do konwersji Markdown na HTML\n-                marked.setOptions({\n-                    renderer: renderer,\n-                    breaks: true,\n-                    gfm: true\n-                });\n-                \n-                // Przetwórz tekst na HTML z zachowaniem bloków kodu\n-                let processedText = text;\n-                \n-                // Najpierw zabezpiecz bloki kodu, aby marked ich nie przetwarzał\n-                const codeBlocks = [];\n-                processedText = processedText.replace(/<div class=\"code-container\">[\\\\s\\\\S]*?<\\\\/div>/g, function(match) {\n-                    codeBlocks.push(match);\n-                    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n-                });\n-                \n-                // Zastosuj formatowanie Markdown\n-                processedText = marked.parse(processedText);\n-                \n-                // Przywróć bloki kodu\n-                processedText = processedText.replace(/{{CODE_BLOCK_(\\\\d+)}}/g, function(match, index) {\n-                    return codeBlocks[parseInt(index)];\n-                });\n-                \n-                contentDiv.innerHTML = processedText;\n-            }\n-            \n-            const timeDiv = document.createElement('div');\n-            timeDiv.className = 'message-time';\n-            timeDiv.textContent = formatTime();\n-            \n-            messageDiv.appendChild(contentDiv);\n-            messageDiv.appendChild(timeDiv);\n-            \n-            chatArea.appendChild(messageDiv);\n-            chatArea.scrollTop = chatArea.scrollHeight;\n-        }\n-        \n-        // Funkcja do wysyłania wiadomości\n-        function sendMessage() {\n-            const message = userInput.value.trim();\n-            if (!message && !selectedImage) return;\n-            \n-            // Dodaj wiadomość użytkownika\n-            const imageUrl = selectedImage ? URL.createObjectURL(selectedImage) : null;\n-            addMessage(message, true, imageUrl);\n-            \n-            // Wyczyść pole wprowadzania\n-            userInput.value = '';\n-            \n-            // Przygotuj dane do wysłania\n-            const formData = new FormData();\n-            formData.append('message', message);\n-            \n-            // Dodaj zdjęcie jeśli zostało wybrane\n-            if (selectedImage) {\n-                formData.append('image', selectedImage);\n-            }\n-            \n-            // Ukryj podgląd zdjęcia\n-            imagePreview.style.display = 'none';\n-            selectedImage = null;\n-            \n-            // Dodaj wiadomość ładowania\n-            const loadingId = Date.now();\n-            const loadingDiv = document.createElement('div');\n-            loadingDiv.className = 'message ai-message';\n-            loadingDiv.id = 'loading-' + loadingId;\n-            \n-            const loadingContent = document.createElement('div');\n-            loadingContent.innerHTML = '<div class=\"typing-indicator\"><span>.</span><span>.</span><span>.</span></div>';\n-            \n-            const timeDiv = document.createElement('div');\n-            timeDiv.className = 'message-time';\n-            timeDiv.textContent = formatTime();\n-            \n-            loadingDiv.appendChild(loadingContent);\n-            loadingDiv.appendChild(timeDiv);\n-            \n-            chatArea.appendChild(loadingDiv);\n-            chatArea.scrollTop = chatArea.scrollHeight;\n-            \n-            // Wyślij zapytanie do API\n-            fetch('/api/chat', {\n-                method: 'POST',\n-                body: formData\n-            })\n-            .then(function(response) {\n-                return response.json();\n-            })\n-            .then(function(data) {\n-                // Usuń wiadomość ładowania\n-                const loadingMessage = document.getElementById('loading-' + loadingId);\n-                if (loadingMessage) loadingMessage.remove();\n-                \n-                // Dodaj odpowiedź AI\n-                addMessage(data.reply, false);\n-            })\n-            .catch(function(error) {\n-                console.error('Error:', error);\n-                // Usuń wiadomość ładowania\n-                const loadingMessage = document.getElementById('loading-' + loadingId);\n-                if (loadingMessage) loadingMessage.remove();\n-                \n-                // Dodaj komunikat o błędzie\n-                addMessage('Przepraszam, wystąpił błąd. Spróbuj ponownie.', false);\n-            });\n-        }\n-        \n-        // Obsługa wyboru zdjęcia\n-        function handleImageUpload(event) {\n-            const file = event.target.files[0];\n-            if (!file) return;\n-            \n-            // Akceptuj tylko obrazy\n-            if (!file.type.startsWith('image/')) {\n-                alert('Proszę wybrać plik obrazu');\n-                return;\n-            }\n-            \n-            // Pokaż podgląd zdjęcia\n-            const reader = new FileReader();\n-            reader.onload = function(e) {\n-                previewImg.src = e.target.result;\n-                imagePreview.style.display = 'block';\n-                selectedImage = file;\n-            };\n-            reader.readAsDataURL(file);\n-        }\n-        \n-        // Usunięcie wybranego zdjęcia\n-        function removeSelectedImage() {\n-            imagePreview.style.display = 'none';\n-            imageUpload.value = '';\n-            selectedImage = null;\n-        }\n-        \n-        // Obsługa przycisku wysyłania\n-        sendButton.addEventListener('click', sendMessage);\n-        \n-        // Obsługa klawisza Enter\n-        userInput.addEventListener('keypress', function(e) {\n-            if (e.key === 'Enter') {\n-                sendMessage();\n-            }\n-        });\n-        \n-        // Obsługa uploadu zdjęć\n-        imageUpload.addEventListener('change', handleImageUpload);\n-        \n-        // Obsługa usuwania zdjęcia\n-        removeImageBtn.addEventListener('click', removeSelectedImage);\n-        \n-        // Ustaw focus na pole wprowadzania\n-        userInput.focus();\n-    })();\n-    </script>\n-</body>\n-</html>`;\n+// Function to add messages\n+function addMessage(text, isUser, imageUrl = null) {\n+    const messageDiv = document.createElement('div');\n+    messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n \n-    res.send(chatHtml);\n-});\n+    const contentDiv = document.createElement('div');\n \n-// Add API endpoint for Gemini with image support\n-app.post('/api/chat', tempUpload.single('image'), async (req, res) => {\n-    try {\n-        const userMessage = req.body.message || '';\n+    if (isUser) {\n+        contentDiv.textContent = text; // User messages are plain text\n+    } else {\n+        // For AI messages, use marked.js to format Markdown\n+        const renderer = new marked.Renderer();\n \n-        // Podstawowa instrukcja dla modelu\n-        let instruction = \"Odpowiadaj zawsze w języku polskim, bez względu na język zapytania. Twoje odpowiedzi powinny być pomocne, dokładne i przyjazne oraz dopracowane i zrozumiale.\";\n-\n-        const fullMessage = instruction + \" \" + userMessage;\n-\n-        let apiRequestBody = {\n-            contents: [\n-                {\n-                    parts: [\n-                        {\n-                            text: fullMessage\n-                        }\n-                    ]\n-                }\n-            ],\n-            generationConfig: {\n-                temperature: 0.7,\n-                topK: 40,\n-                topP: 0.95,\n-                maxOutputTokens: 8192\n-            }\n-        };\n-\n-        // If image is present, add it to the API request\n-        if (req.file) {\n-            const imagePath = path.join(__dirname, req.file.path);\n-            const imageBuffer = fs.readFileSync(imagePath);\n-            const base64Image = imageBuffer.toString('base64');\n-\n-            // Modify the request to include image\n-            apiRequestBody.contents[0].parts = [\n-                {\n-                    text: fullMessage || \"Opisz to zdjęcie w języku polskim\"\n-                },\n-                {\n-                    inlineData: {\n-                        mimeType: req.file.mimetype,\n-                        data: base64Image\n-                    }\n-                }\n-            ];\n-        }\n-\n-        // Determine the appropriate model based on whether an image is included\n-        const apiModel = req.file ? 'gemini-1.5-pro-latest' : 'gemini-1.5-flash-latest';\n-\n-        const response = await axios.post(\n-            `https://generativelanguage.googleapis.com/v1beta/models/${apiModel}:generateContent?key=${GEMINI_API_KEY}`,\n-            apiRequestBody,\n-            {\n-                headers: {\n-                    'Content-Type': 'application/json'\n-                }\n-            }\n-        );\n-\n-        // Extract the AI's response text\n-        let aiReply = response.data.candidates[0].content.parts[0].text;\n-\n-        // Format code blocks properly\n-        // Replace markdown code blocks with styled HTML code containers\n-        aiReply = aiReply.replace(/```c\\+\\+/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```cpp/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/KOD C\\+\\+:/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```python/g, '<div class=\"code-container\"><div class=\"code-header\"><span>Python</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```javascript/g, '<div class=\"code-container\"><div class=\"code-header\"><span>JavaScript</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```html/g, '<div class=\"code-container\"><div class=\"code-header\"><span>HTML</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```css/g, '<div class=\"code-container\"><div class=\"code-header\"><span>CSS</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```/g, '</code></pre><div class=\"code-footer\"><div class=\"mini-counter\"><i class=\"fas fa-code\"></i> kod</div></div></div>');\n-\n-        // If image was uploaded temporarily, delete it after processing\n-        if (req.file) {\n-            fs.unlink(path.join(__dirname, req.file.path), (err) => {\n-                if (err) console.error('Error deleting temporary image:', err);\n-            });\n-        }\n-\n-        res.json({ reply: aiReply });\n-    } catch (error) {\n-        console.error('Error calling Gemini API:', error);\n-        res.status(500).json({ error: 'Failed to get response from Gemini', reply: 'Przepraszam, wystąpił błąd. Spróbuj ponownie później.' });\n-    }\n-});\n-\n-app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));\n-const express = require('express');\n-const path = require('path');\n-const fs = require('fs');\n-const multer = require('multer');\n-const axios = require('axios'); // Add axios for API requests\n-const marked = require('marked'); // Biblioteka do formatowania markdown\n-\n-const app = express();\n-const PORT = process.env.PORT || 3000;\n-const GEMINI_API_KEY = 'AIzaSyAP1EOpnlAhNRh9MI41v8EHtyRGylNR_bA';\n-\n-// Upewnij się, że istnieje folder temp\n-if (!fs.existsSync('temp')) {\n-    fs.mkdirSync('temp');\n-}\n-\n-// Configure multer to preserve original filename for file panel\n-const storage = multer.diskStorage({\n-    destination: (req, file, cb) => {\n-        // Make sure the \"pliki\" directory exists\n-        if (!fs.existsSync('pliki')) {\n-            fs.mkdirSync('pliki');\n-        }\n-        cb(null, 'pliki/');\n-    },\n-    filename: (req, file, cb) => {\n-        cb(null, file.originalname);\n-    }\n-});\n-const upload = multer({ storage: storage });\n-\n-// Configure multer for temporary image uploads\n-const tempStorage = multer.diskStorage({\n-    destination: (req, file, cb) => {\n-        cb(null, 'temp/');\n-    },\n-    filename: (req, file, cb) => {\n-        cb(null, Date.now() + '-' + file.originalname);\n-    }\n-});\n-const tempUpload = multer({ storage: tempStorage });\n-\n-app.use(express.urlencoded({ extended: true }));\n-app.use(express.json());\n-app.use(express.static('public', { index: false }));\n-\n-// Modern clean styles\n-const modernStyles = `\n-<style>\n-    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n-\n-    * {\n-        box-sizing: border-box;\n-        margin: 0;\n-        padding: 0;\n-    }\n-\n-    :root {\n-        --bg-dark: #121212;\n-        --bg-card: #1e1e2d;\n-        --accent-primary: #6366f1;\n-        --accent-secondary: #8b5cf6;\n-        --text-primary: #f3f4f6;\n-        --text-secondary: #d1d5db;\n-        --text-muted: #9ca3af;\n-        --border-color: #2d2d3d;\n-        --danger: #ef4444;\n-    }\n-\n-    body {\n-        font-family: 'Inter', sans-serif;\n-        background: linear-gradient(135deg, #121212 0%, #1a1a2e 100%);\n-        color: var(--text-primary);\n-        line-height: 1.6;\n-        min-height: 100vh;\n-    }\n-\n-    .container {\n-        width: 90%;\n-        max-width: 1200px;\n-        margin: 2rem auto;\n-        padding: 2rem;\n-        background: var(--bg-card);\n-        border-radius: 12px;\n-        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);\n-        border: 1px solid var(--border-color);\n-    }\n-\n-    h1 {\n-        text-align: center;\n-        margin-bottom: 2rem;\n-        background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));\n-        -webkit-background-clip: text;\n-        -webkit-text-fill-color: transparent;\n-        font-weight: 700;\n-    }\n-\n-    a {\n-        text-decoration: none;\n-    }\n-\n-    .btn {\n-        display: inline-block;\n-        padding: 0.6rem 1.2rem;\n-        margin: 0.3rem;\n-        border: none;\n-        border-radius: 6px;\n-        font-weight: 500;\n-        font-size: 0.9rem;\n-        cursor: pointer;\n-        transition: all 0.2s ease;\n-    }\n-\n-    .btn-primary {\n-        background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));\n-        color: white;\n-    }\n-\n-    .btn-secondary {\n-        background: rgba(255, 255, 255, 0.08);\n-        color: var(--text-primary);\n-        border: 1px solid var(--border-color);\n-    }\n-\n-    .btn-danger {\n-        background: var(--danger);\n-        color: white;\n-    }\n-\n-    .btn:hover {\n-        transform: translateY(-2px);\n-        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n-    }\n-\n-    .btn-primary:hover {\n-        background: linear-gradient(to right, #5254cc, #7e4fdb);\n-    }\n-\n-    .btn-secondary:hover {\n-        background: rgba(255, 255, 255, 0.12);\n-    }\n-\n-    table {\n-        width: 100%;\n-        border-collapse: collapse;\n-        margin: 1.5rem 0;\n-        border-radius: 8px;\n-        overflow: hidden;\n-    }\n-\n-    th, td {\n-        padding: 1rem;\n-        text-align: left;\n-        border-bottom: 1px solid var(--border-color);\n-    }\n-\n-    th {\n-        background-color: rgba(255, 255, 255, 0.05);\n-        font-weight: 600;\n-        color: var(--text-primary);\n-    }\n-\n-    tr:hover {\n-        background-color: rgba(255, 255, 255, 0.03);\n-    }\n-\n-    input[type=\"text\"], \n-    input[type=\"file\"] {\n-        width: 100%;\n-        padding: 0.8rem;\n-        margin: 0.8rem 0;\n-        background: rgba(255, 255, 255, 0.05);\n-        border: 1px solid var(--border-color);\n-        border-radius: 6px;\n-        color: var(--text-primary);\n-        font-family: 'Inter', sans-serif;\n-    }\n-\n-    input[type=\"text\"]:focus,\n-    input[type=\"file\"]:focus,\n-    textarea:focus {\n-        outline: none;\n-        border-color: var(--accent-primary);\n-        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);\n-    }\n-\n-    textarea {\n-        width: 100%;\n-        height: 70vh;\n-        min-height: 400px;\n-        padding: 0.8rem;\n-        margin: 0.8rem 0;\n-        background: rgba(255, 255, 255, 0.05);\n-        border: 1px solid var(--border-color);\n-        border-radius: 6px;\n-        color: var(--text-primary);\n-        font-family: monospace;\n-        resize: vertical;\n-    }\n-\n-    form button[type=\"submit\"] {\n-        background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));\n-        color: white;\n-        padding: 0.8rem 1.5rem;\n-        border: none;\n-        border-radius: 6px;\n-        cursor: pointer;\n-        font-weight: 500;\n-        transition: all 0.2s ease;\n-    }\n-\n-    form button[type=\"submit\"]:hover {\n-        background: linear-gradient(to right, #5254cc, #7e4fdb);\n-        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n-    }\n-\n-    .actions {\n-        display: flex;\n-        flex-wrap: wrap;\n-        justify-content: flex-start;\n-        gap: 0.3rem;\n-    }\n-\n-    .header-actions {\n-        display: flex;\n-        justify-content: space-between;\n-        align-items: center;\n-        margin-bottom: 1.5rem;\n-        background: rgba(0, 0, 0, 0.2);\n-        padding: 1rem;\n-        border-radius: 8px;\n-        border: 1px solid var(--border-color);\n-    }\n-\n-    .fade-in {\n-        animation: fadeIn 0.3s ease forwards;\n-    }\n-\n-    @keyframes fadeIn {\n-        from { opacity: 0; transform: translateY(10px); }\n-        to { opacity: 1; transform: translateY(0); }\n-    }\n-</style>\n-`;\n-\n-app.get('/', (req, res) => {\n-    res.send(`\n-<html>\n-<head>\n-    <title>Files Portal</title>\n-    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-    ${modernStyles}\n-</head>\n-<body>\n-    <div class=\"container fade-in\">\n-        <h1>Welcome to Files Portal</h1>\n-        <div style=\"text-align: center; margin-top: 2rem; display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\n-            <a href=\"/panel\" class=\"btn btn-primary\">Go to File Management</a>\n-            <a href=\"/chat\" class=\"btn btn-primary\" style=\"background: linear-gradient(to right, #9333ea, #3b82f6);\">\n-                <span style=\"display: flex; align-items: center; gap: 8px;\">\n-                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n-                        <path d=\"M8 1a5 5 0 0 0-5 5v1h1a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V6a6 6 0 1 1 12 0v6a2.5 2.5 0 0 1-2.5 2.5H9.366a1 1 0 0 1-.866.5h-1a1 1 0 1 1 0-2h1a1 1 0 0 1 .866.5H11.5A1.5 1.5 0 0 0 13 12h-1a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1h1V6a5 5 0 0 0-5-5z\"/>\n-                    </svg>\n-                    Chat with YutAi\n-                </span>\n-            </a>\n-        </div>\n-    </div>\n-</body>\n-</html>\n-`);\n-});\n-\n-app.get('/panel', (req, res) => {\n-    fs.readdir('pliki', (err, files) => {\n-        if (err) {\n-            if (err.code === 'ENOENT') {\n-                // Directory doesn't exist, create it\n-                fs.mkdirSync('pliki');\n-                files = [];\n-            } else {\n-                return res.send('Error loading files.');\n-            }\n-        }\n-\n-        const fileRows = files.map(file => `\n-<tr class=\"fade-in\">\n-    <td>${file}</td>\n-    <td class=\"actions\">\n-            <a href=\"/files/${encodeURIComponent(file)}\" download class=\"btn btn-secondary\">Download</a>\n-            <a href=\"/panel/edit/${encodeURIComponent(file)}\" class=\"btn btn-secondary\">Edit</a>\n-            <a href=\"/panel/rename/${encodeURIComponent(file)}\" class=\"btn btn-secondary\">Rename</a>\n-            <a href=\"/panel/redirect/${encodeURIComponent(file)}\" class=\"btn btn-secondary\">Open</a>\n-            <a href=\"/panel/delete/${encodeURIComponent(file)}\" class=\"btn btn-danger\">Delete</a>\n-    </td>\n-</tr>\n-`).join('');\n-\n-        res.send(`\n-<html>\n-<head>\n-        <title>File Management</title>\n-        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-        ${modernStyles}\n-</head>\n-<body>\n-        <div class=\"container fade-in\">\n-            <h1>File Management</h1>\n-            \n-            <div class=\"header-actions\">\n-                <div>\n-                    <a href=\"/panel/create\" class=\"btn btn-primary\">Create New File</a>\n-                    <a href=\"/\" class=\"btn btn-secondary\">Powrót do strony głównej</a>\n-                </div>\n-                \n-                <form action=\"/panel/upload\" method=\"POST\" enctype=\"multipart/form-data\" style=\"display: flex; align-items: center; gap: 10px;\">\n-                    <input type=\"file\" name=\"file\" required style=\"margin: 0;\">\n-                    <button type=\"submit\" class=\"btn btn-primary\">Upload</button>\n-        </form>\n-    </div>\n-\n-        <table>\n-            <tr>\n-                <th>File Name</th>\n-                <th>Actions</th>\n-            </tr>\n-            ${fileRows}\n-        </table>\n-    </div>\n-</body>\n-</html>\n-`);\n-    });\n-});\n-\n-app.get('/panel/create', (req, res) => {\n-    res.send(`\n-<html>\n-<head>\n-    <title>Create New File</title>\n-    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-    ${modernStyles}\n-</head>\n-<body>\n-    <div class=\"container fade-in\">\n-        <h1>Create New File</h1>\n-        <form action=\"/panel/create\" method=\"POST\">\n-            <input type=\"text\" name=\"filename\" placeholder=\"File name\" required>\n-            <textarea name=\"content\" placeholder=\"File content\"></textarea>\n-            <div style=\"display: flex; justify-content: space-between; margin-top: 1rem;\">\n-                <a href=\"/panel\" class=\"btn btn-secondary\">Back</a>\n-                <button type=\"submit\" class=\"btn btn-primary\">Create</button>\n-            </div>\n-        </form>\n-    </div>\n-</body>\n-</html>\n-`);\n-});\n-\n-// Obsługa tworzenia plików\n-app.post('/panel/create', (req, res) => {\n-    const { filename, content } = req.body;\n-    if (!filename) return res.send('File name is required!');\n-\n-    const filePath = path.join(__dirname, 'pliki', filename);\n-\n-    // Sprawdź czy plik już istnieje\n-    fs.access(filePath, fs.constants.F_OK, (err) => {\n-        if (!err) return res.send('File already exists!');\n-\n-        fs.writeFile(filePath, content || '', (err) => {\n-            if (err) return res.send('Error creating file!');\n-            res.redirect('/panel');\n+        marked.setOptions({\n+            renderer: renderer,\n+            breaks: true,\n+            gfm: true\n         });\n-    });\n-});\n \n-app.get('/panel/edit/:filename', (req, res) => {\n-    fs.readFile(path.join(__dirname, 'pliki', req.params.filename), 'utf8', (err, data) => {\n-        if (err) return res.send('Error reading file.');\n-        res.send(`\n-<html>\n-<head>\n-    <title>Edit File</title>\n-    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-    ${modernStyles}\n-</head>\n-<body>\n-    <div class=\"container fade-in\">\n-        <h1>Edit File: ${req.params.filename}</h1>\n-        <form action=\"/panel/edit/${encodeURIComponent(req.params.filename)}\" method=\"POST\">\n-            <textarea name=\"content\">${data}</textarea>\n-            <div style=\"display: flex; justify-content: space-between; margin-top: 1rem;\">\n-                <a href=\"/panel\" class=\"btn btn-secondary\">Back</a>\n-                <button type=\"submit\" class=\"btn btn-primary\">Save</button>\n-            </div>\n-        </form>\n-    </div>\n-</body>\n-</html>\n-`);\n-    });\n-});\n+        // Process the text to handle code blocks\n+        let processedText = text;\n \n-app.get('/panel/rename/:filename', (req, res) => {\n-    res.send(`\n-<html>\n-<head>\n-    <title>Rename File</title>\n-    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-    ${modernStyles}\n-</head>\n-<body>\n-    <div class=\"container fade-in\">\n-        <h1>Rename File: ${req.params.filename}</h1>\n-        <form action=\"/panel/rename/${encodeURIComponent(req.params.filename)}\" method=\"POST\">\n-            <input type=\"text\" name=\"newName\" placeholder=\"New file name\" required>\n-            <div style=\"display: flex; justify-content: space-between; margin-top: 1rem;\">\n-                <a href=\"/panel\" class=\"btn btn-secondary\">Back</a>\n-                <button type=\"submit\" class=\"btn btn-primary\">Rename</button>\n-            </div>\n-        </form>\n-    </div>\n-</body>\n-</html>\n-`);\n-});\n-\n-// Pozostałe endpointy\n-app.post('/panel/upload', upload.single('file'), (req, res) => res.redirect('/panel'));\n-\n-app.get('/panel/delete/:filename', (req, res) => {\n-    fs.unlink(path.join(__dirname, 'pliki', req.params.filename), (err) => {\n-        res.redirect('/panel');\n-    });\n-});\n-\n-app.post('/panel/edit/:filename', (req, res) => {\n-    fs.writeFile(path.join(__dirname, 'pliki', req.params.filename), req.body.content, 'utf8', (err) => {\n-        res.redirect('/panel');\n-    });\n-});\n-\n-app.post('/panel/rename/:filename', (req, res) => {\n-    fs.rename(\n-        path.join(__dirname, 'pliki', req.params.filename),\n-        path.join(__dirname, 'pliki', req.body.newName),\n-        () => res.redirect('/panel')\n-    );\n-});\n-\n-app.get('/panel/redirect/:filename', (req, res) => {\n-    res.redirect(`/files/${encodeURIComponent(req.params.filename)}`);\n-});\n-\n-// Dodaj endpoint do udostępniania plików z folderu pliki\n-app.use('/files', express.static('pliki'));\n-\n-// Add Gemini chat page\n-app.get('/chat', (req, res) => {\n-    const chatHtml = `<!DOCTYPE html>\n-<html>\n-<head>\n-    <title>YutAi - Inteligentny Asystent</title>\n-    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n-    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n-    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n-    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n-    ${modernStyles}\n-    <style>\n-      body {\n-          font-family: 'Poppins', sans-serif;\n-          background: linear-gradient(125deg, #0f0c29, #302b63, #24243e);\n-          color: #fff;\n-          line-height: 1.6;\n-          min-height: 100vh;\n-          margin: 0;\n-          padding: 0;\n-          display: flex;\n-          align-items: center;\n-          justify-content: center;\n-          animation: gradientBG 15s ease infinite;\n-          background-size: 400% 400%;\n-      }\n-      \n-      @keyframes gradientBG {\n-          0% { background-position: 0% 50%; }\n-          50% { background-position: 100% 50%; }\n-          100% { background-position: 0% 50%; }\n-      }\n-      \n-      .container {\n-          width: 95%;\n-          max-width: 1100px;\n-          margin: 2rem auto;\n-          padding: 0;\n-          background: rgba(15, 23, 42, 0.7);\n-          border-radius: 20px;\n-          box-shadow: 0 15px 50px rgba(0, 0, 0, 0.4);\n-          backdrop-filter: blur(10px);\n-          border: 1px solid rgba(255, 255, 255, 0.1);\n-          overflow: hidden;\n-          display: flex;\n-          flex-direction: column;\n-          height: 90vh;\n-      }\n-      \n-      .header {\n-          padding: 1.5rem 2rem;\n-          display: flex;\n-          justify-content: space-between;\n-          align-items: center;\n-          border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n-          background: rgba(15, 23, 42, 0.5);\n-      }\n-      \n-      .logo {\n-          display: flex;\n-          align-items: center;\n-          gap: 10px;\n-      }\n-      \n-      .logo-icon {\n-          font-size: 1.8rem;\n-          background: linear-gradient(to right, #6366f1, #8b5cf6, #ec4899);\n-          -webkit-background-clip: text;\n-          -webkit-text-fill-color: transparent;\n-      }\n-      \n-      h1 {\n-          margin: 0;\n-          font-size: 1.8rem;\n-          background: linear-gradient(to right, #6366f1, #8b5cf6, #ec4899);\n-          -webkit-background-clip: text;\n-          -webkit-text-fill-color: transparent;\n-          font-weight: 700;\n-      }\n-      \n-      .status {\n-          display: flex;\n-          align-items: center;\n-          gap: 6px;\n-          font-size: 0.9rem;\n-          color: #a5b4fc;\n-          background: rgba(99, 102, 241, 0.1);\n-          padding: 5px 10px;\n-          border-radius: 20px;\n-          border: 1px solid rgba(99, 102, 241, 0.2);\n-      }\n-      \n-      .status-dot {\n-          width: 8px;\n-          height: 8px;\n-          background: #22c55e;\n-          border-radius: 50%;\n-          animation: pulse 2s infinite;\n-      }\n-      \n-      .chat-area {\n-          flex: 1;\n-          overflow-y: auto;\n-          padding: 1.5rem 2rem;\n-          scroll-behavior: smooth;\n-          position: relative;\n-          background-image: url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.03'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n-      }\n-      \n-      .chat-area::-webkit-scrollbar {\n-          width: 6px;\n-      }\n-      \n-      .chat-area::-webkit-scrollbar-track {\n-          background: rgba(255, 255, 255, 0.05);\n-          border-radius: 10px;\n-      }\n-      \n-      .chat-area::-webkit-scrollbar-thumb {\n-          background: rgba(99, 102, 241, 0.3);\n-          border-radius: 10px;\n-      }\n-      \n-      .chat-area::-webkit-scrollbar-thumb:hover {\n-          background: rgba(99, 102, 241, 0.5);\n-      }\n-      \n-      .message {\n-          margin-bottom: 1.5rem;\n-          padding: 1rem 1.2rem;\n-          border-radius: 15px;\n-          max-width: 80%;\n-          position: relative;\n-          animation: fadeIn 0.3s ease forwards;\n-          line-height: 1.5;\n-      }\n-      \n-      @keyframes fadeIn {\n-          from { opacity: 0; transform: translateY(10px); }\n-          to { opacity: 1; transform: translateY(0); }\n-      }\n-      \n-      .user-message {\n-          background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);\n-          margin-left: auto;\n-          border-top-right-radius: 0;\n-          box-shadow: 0 5px 15px rgba(99, 102, 241, 0.3);\n-          color: white;\n-      }\n-      \n-      .ai-message {\n-          background: rgba(255, 255, 255, 0.05);\n-          margin-right: auto;\n-          border-top-left-radius: 0;\n-          border: 1px solid rgba(255, 255, 255, 0.1);\n-          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n-      }\n-      \n-      .message-time {\n-          font-size: 0.7rem;\n-          opacity: 0.7;\n-          margin-top: 5px;\n-          text-align: right;\n-      }\n-      \n-      .footer {\n-          padding: 1.5rem 2rem;\n-          border-top: 1px solid rgba(255, 255, 255, 0.1);\n-          background: rgba(15, 23, 42, 0.5);\n-      }\n-      \n-      .input-area {\n-          display: flex;\n-          gap: 10px;\n-          position: relative;\n-      }\n-      \n-      .input-area input {\n-          flex-grow: 1;\n-          padding: 1rem 1rem 1rem 3rem;\n-          border: 1px solid rgba(255, 255, 255, 0.1);\n-          border-radius: 15px;\n-          background: rgba(15, 23, 42, 0.6);\n-          color: #fff;\n-          font-family: 'Poppins', sans-serif;\n-          font-size: 1rem;\n-          transition: all 0.3s ease;\n-      }\n-      \n-      .input-area input:focus {\n-          outline: none;\n-          border-color: #6366f1;\n-          box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.3);\n-      }\n-      \n-      .input-icon {\n-          position: absolute;\n-          left: 1rem;\n-          top: 50%;\n-          transform: translateY(-50%);\n-          color: #6366f1;\n-          font-size: 1.2rem;\n-      }\n-      \n-      .input-area button {\n-          padding: 0 1.5rem;\n-          border: none;\n-          border-radius: 15px;\n-          background: linear-gradient(to right, #6366f1, #8b5cf6, #ec4899);\n-          color: white;\n-          font-weight: 600;\n-          cursor: pointer;\n-          transition: all 0.3s ease;\n-          display: flex;\n-          align-items: center;\n-          gap: 10px;\n-      }\n-      \n-      .input-area button:hover {\n-          transform: translateY(-2px);\n-          box-shadow: 0 5px 15px rgba(99, 102, 241, 0.4);\n-      }\n-      \n-      .input-area button i {\n-          font-size: 1.2rem;\n-      }\n-      \n-      .tools-bar {\n-          display: flex;\n-          justify-content: space-between;\n-          margin-top: 1rem;\n-      }\n-      \n-      .image-preview {\n-          display: none;\n-          position: relative;\n-          margin-top: 10px;\n-          max-width: 200px;\n-          border-radius: 12px;\n-          overflow: hidden;\n-          border: 1px solid rgba(255, 255, 255, 0.1);\n-          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n-      }\n-      \n-      .image-preview img {\n-          width: 100%;\n-          display: block;\n-      }\n-      \n-      .image-preview-close {\n-          position: absolute;\n-          top: 5px;\n-          right: 5px;\n-          background: rgba(0, 0, 0, 0.6);\n-          border: none;\n-          color: white;\n-          width: 24px;\n-          height: 24px;\n-          border-radius: 50%;\n-          font-size: 16px;\n-          cursor: pointer;\n-          display: flex;\n-          align-items: center;\n-          justify-content: center;\n-      }\n-      \n-      .file-upload {\n-          position: relative;\n-          overflow: hidden;\n-      }\n-      \n-      .file-upload input[type=file] {\n-          position: absolute;\n-          left: 0;\n-          top: 0;\n-          opacity: 0;\n-          width: 100%;\n-          height: 100%;\n-          cursor: pointer;\n-      }\n-      \n-      .file-upload-btn {\n-          display: flex;\n-          align-items: center;\n-          gap: 6px;\n-          background: rgba(99, 102, 241, 0.1);\n-          color: #a5b4fc;\n-          border: 1px solid rgba(99, 102, 241, 0.2);\n-          border-radius: 10px;\n-          padding: 6px 12px;\n-          font-size: 0.9rem;\n-          cursor: pointer;\n-          transition: all 0.3s ease;\n-      }\n-      \n-      .file-upload-btn:hover {\n-          background: rgba(99, 102, 241, 0.2);\n-          color: #c7d2fe;\n-      }\n-      \n-      .user-message-image {\n-          max-width: 200px;\n-          border-radius: 8px;\n-          margin-top: 10px;\n-          display: block;\n-      }\n-      \n-      .code-block {\n-          background: rgba(15, 23, 42, 0.8);\n-          padding: 1rem;\n-          border-radius: 8px;\n-          margin: 1rem 0;\n-          white-space: pre-wrap;\n-          font-family: 'JetBrains Mono', monospace;\n-          font-size: 0.9rem;\n-          line-height: 1.5;\n-          color: #e2e8f0;\n-          border-left: 3px solid #6366f1;\n-      }\n-      \n-      .code-container {\n-          margin: 15px 0;\n-          border-radius: 12px;\n-          overflow: hidden;\n-          border: 1px solid rgba(255, 255, 255, 0.1);\n-          background: rgba(15, 23, 42, 0.6);\n-      }\n-      \n-      .code-header {\n-          display: flex;\n-          justify-content: space-between;\n-          align-items: center;\n-          padding: 10px 15px;\n-          background: rgba(15, 23, 42, 0.8);\n-          border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n-      }\n-      \n-      .code-header span {\n-          color: #a5b4fc;\n-          font-size: 0.85rem;\n-          text-transform: uppercase;\n-          letter-spacing: 1px;\n-      }\n-      \n-      .code-actions {\n-          display: flex;\n-          gap: 8px;\n-      }\n-      \n-      .code-actions button {\n-          padding: 5px 10px;\n-          background: rgba(99, 102, 241, 0.2);\n-          color: #a5b4fc;\n-          border: none;\n-          border-radius: 8px;\n-          font-size: 0.8rem;\n-          cursor: pointer;\n-          transition: all 0.2s ease;\n-          display: flex;\n-          align-items: center;\n-          gap: 5px;\n-      }\n-      \n-      .code-actions button:hover {\n-          background: rgba(99, 102, 241, 0.4);\n-          color: #c7d2fe;\n-      }\n-      \n-      .code-actions button i {\n-          font-size: 0.9rem;\n-      }\n-      \n-      .code-footer {\n-          display: flex;\n-          padding: 8px 15px;\n-          background: rgba(15, 23, 42, 0.8);\n-          border-top: 1px solid rgba(255, 255, 255, 0.1);\n-      }\n-      \n-      .mini-counter {\n-          font-size: 0.75rem;\n-          color: #6366f1;\n-          display: flex;\n-          align-items: center;\n-          gap: 5px;\n-      }\n-      \n-      .typing-indicator {\n-          display: flex;\n-          align-items: center;\n-          gap: 5px;\n-      }\n-      \n-      .typing-indicator span {\n-          display: inline-block;\n-          width: 8px;\n-          height: 8px;\n-          background-color: #a5b4fc;\n-          border-radius: 50%;\n-          animation: bounce 1.5s infinite;\n-      }\n-      \n-      .typing-indicator span:nth-child(2) {\n-          animation-delay: 0.2s;\n-      }\n-      \n-      .typing-indicator span:nth-child(3) {\n-          animation-delay: 0.4s;\n-      }\n-      \n-      @keyframes bounce {\n-          0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }\n-          40% { transform: scale(1.2); opacity: 1; }\n-      }\n-      \n-      /* Style dla formatowania Markdown */\n-      .ai-message strong {\n-          font-weight: 700;\n-          color: #a5b4fc;\n-      }\n-      \n-      .ai-message em {\n-          font-style: italic;\n-          color: #ddd;\n-      }\n-      \n-      .ai-message ul, .ai-message ol {\n-          margin-left: 1.5rem;\n-          margin-bottom: 1rem;\n-      }\n-      \n-      .ai-message li {\n-          margin-bottom: 0.5rem;\n-      }\n-      \n-      .ai-message a {\n-          color: #6366f1;\n-          text-decoration: none;\n-          border-bottom: 1px dotted #6366f1;\n-          transition: all 0.2s ease;\n-      }\n-      \n-      .ai-message a:hover {\n-          color: #818cf8;\n-          border-bottom-color: #818cf8;\n-      }\n-      \n-      .ai-message blockquote {\n-          border-left: 3px solid #6366f1;\n-          padding-left: 1rem;\n-          margin-left: 0;\n-          margin-right: 0;\n-          font-style: italic;\n-          color: #9ca3af;\n-      }\n-      \n-      .ai-message h1, .ai-message h2, .ai-message h3, .ai-message h4 {\n-          margin-top: 1.5rem;\n-          margin-bottom: 0.75rem;\n-          color: #fff;\n-          font-weight: 600;\n-      }\n-      \n-      .ai-message h1 {\n-          font-size: 1.5rem;\n-          border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n-          padding-bottom: 0.5rem;\n-      }\n-      \n-      .ai-message h2 {\n-          font-size: 1.3rem;\n-      }\n-      \n-      .ai-message h3 {\n-          font-size: 1.1rem;\n-      }\n-      \n-      .ai-message h4 {\n-          font-size: 1rem;\n-      }\n-      \n-      .ai-message table {\n-          width: 100%;\n-          border-collapse: collapse;\n-          margin: 1rem 0;\n-          overflow: hidden;\n-          border-radius: 8px;\n-      }\n-      \n-      .ai-message th {\n-          background-color: rgba(99, 102, 241, 0.2);\n-          text-align: left;\n-          padding: 0.5rem;\n-      }\n-      \n-      .ai-message td {\n-          padding: 0.5rem;\n-          border-top: 1px solid rgba(255, 255, 255, 0.1);\n-      }\n-      \n-      .ai-message tr:nth-child(even) {\n-          background-color: rgba(255, 255, 255, 0.02);\n-      }\n-      \n-      @media (max-width: 768px) {\n-          .container {\n-              width: 100%;\n-              height: 100vh;\n-              margin: 0;\n-              border-radius: 0;\n-          }\n-          \n-          .message {\n-              max-width: 90%;\n-          }\n-          \n-          .header, .footer {\n-              padding: 1rem;\n-          }\n-          \n-          .chat-area {\n-              padding: 1rem;\n-          }\n-          \n-          h1 {\n-              font-size: 1.5rem;\n-          }\n-      }\n-    </style>\n-    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/marked/4.3.0/marked.min.js\"></script>\n-</head>\n-<body>\n-    <div class=\"container\">\n-        <div class=\"header\">\n-            <div class=\"logo\">\n-                <i class=\"fas fa-robot logo-icon\"></i>\n-                <h1>YutAi</h1>\n-            </div>\n-            <div class=\"status\">\n-                <div class=\"status-dot\"></div>\n-                <span>Online</span>\n-            </div>\n-        </div>\n+        // Ensure code blocks are wrapped in triple backticks\n+        processedText = processedText.replace(/```(.*?)```/g, '<div class=\"code-container\"><pre class=\"code-block\"><code>$1</code></pre></div>');\n         \n-        <div class=\"chat-area\" id=\"chat-area\">\n-            <div class=\"message ai-message\">\n-                <div>Cześć! Jestem YutAi, Twój zaawansowany asystent AI. W czym mogę Ci dzisiaj pomóc?</div>\n-                <div class=\"message-time\">Teraz</div>\n-            </div>\n-        </div>\n+        // Apply Markdown formatting\n+        processedText = marked(processedText);\n         \n-        <div class=\"footer\">\n-            <div class=\"input-area\">\n-                <i class=\"fas fa-message input-icon\"></i>\n-                <input type=\"text\" id=\"user-input\" placeholder=\"Napisz wiadomość...\" autocomplete=\"off\">\n-                <button id=\"send-button\">\n-                    <span>Wyślij</span>\n-                    <i class=\"fas fa-paper-plane\"></i>\n-                </button>\n-            </div>\n-            \n-            <div class=\"image-preview\" id=\"image-preview\">\n-                <img id=\"preview-img\" src=\"\" alt=\"Podgląd zdjęcia\">\n-                <button class=\"image-preview-close\" id=\"remove-image\">\n-                    <i class=\"fas fa-times\"></i>\n-                </button>\n-            </div>\n-            \n-            <div class=\"tools-bar\">\n-                <div class=\"file-upload\">\n-                    <input type=\"file\" id=\"image-upload\" accept=\"image/*\">\n-                    <div class=\"file-upload-btn\">\n-                        <i class=\"fas fa-image\"></i>\n-                        <span>Dodaj zdjęcie</span>\n-                    </div>\n-                </div>\n-            </div>\n-        </div>\n-    </div>\n+        contentDiv.innerHTML = processedText; // Set the formatted HTML\n+    }\n     \n-    <script>\n-    (function() {\n-        const chatArea = document.getElementById('chat-area');\n-        const userInput = document.getElementById('user-input');\n-        const sendButton = document.getElementById('send-button');\n-        const imageUpload = document.getElementById('image-upload');\n-        const imagePreview = document.getElementById('image-preview');\n-        const previewImg = document.getElementById('preview-img');\n-        const removeImageBtn = document.getElementById('remove-image');\n+    const timeDiv = document.createElement('div');\n+    timeDiv.className = 'message-time';\n+    timeDiv.textContent = formatTime();\n+    \n+    messageDiv.appendChild(contentDiv);\n+    messageDiv.appendChild(timeDiv);\n+    \n+    chatArea.appendChild(messageDiv);\n+    chatArea.scrollTop = chatArea.scrollHeight;\n+}\n         \n-        let selectedImage = null;\n-        \n-        // Funkcja kopiowania kodu\n-        window.copyCode = function(blockId) {\n-            const codeElement = document.getElementById(blockId);\n-            if (!codeElement) return;\n-            \n-            navigator.clipboard.writeText(codeElement.textContent)\n-                .then(() => {\n-                    const btn = codeElement.closest('.code-container').querySelector('.copy-btn');\n-                    const originalText = btn.textContent;\n-                    btn.textContent = 'Skopiowano!';\n-                    setTimeout(() => {\n-                        btn.textContent = originalText;\n-                    }, 2000);\n-                });\n-        };\n-        \n-        // Formatowanie czasu\n-        function formatTime() {\n-            const now = new Date();\n-            return now.getHours().toString().padStart(2, '0') + ':' + \n-                   now.getMinutes().toString().padStart(2, '0');\n-        }\n-        \n-        // Funkcja do dodawania wiadomości\n-        function addMessage(text, isUser, imageUrl = null) {\n-            const messageDiv = document.createElement('div');\n-            messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n-            \n-            const contentDiv = document.createElement('div');\n-            \n-            if (isUser) {\n-                contentDiv.textContent = text;\n-                \n-                // Dodaj zdjęcie jeśli zostało wybrane\n-                if (imageUrl) {\n-                    const img = document.createElement('img');\n-                    img.src = imageUrl;\n-                    img.className = 'user-message-image';\n-                    img.alt = 'Przesłane zdjęcie';\n-                    messageDiv.appendChild(img);\n-                }\n-            } else {\n-                // Dla wiadomości AI używamy marked.js do formatowania Markdown\n-                // Skonfiguruj marked.js do obsługi pogrubienia i innych stylów Markdown\n-                const renderer = new marked.Renderer();\n-                \n-                // Użyj marked do konwersji Markdown na HTML\n-                marked.setOptions({\n-                    renderer: renderer,\n-                    breaks: true,\n-                    gfm: true\n-                });\n-                \n-                // Przetwórz tekst na HTML z zachowaniem bloków kodu\n-                let processedText = text;\n-                \n-                // Najpierw zabezpiecz bloki kodu, aby marked ich nie przetwarzał\n-                const codeBlocks = [];\n-                processedText = processedText.replace(/<div class=\"code-container\">[\\\\s\\\\S]*?<\\\\/div>/g, function(match) {\n-                    codeBlocks.push(match);\n-                    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n-                });\n-                \n-                // Zastosuj formatowanie Markdown\n-                processedText = marked.parse(processedText);\n-                \n-                // Przywróć bloki kodu\n-                processedText = processedText.replace(/{{CODE_BLOCK_(\\\\d+)}}/g, function(match, index) {\n-                    return codeBlocks[parseInt(index)];\n-                });\n-                \n-                contentDiv.innerHTML = processedText;\n-            }\n-            \n-            const timeDiv = document.createElement('div');\n-            timeDiv.className = 'message-time';\n-            timeDiv.textContent = formatTime();\n-            \n-            messageDiv.appendChild(contentDiv);\n-            messageDiv.appendChild(timeDiv);\n-            \n-            chatArea.appendChild(messageDiv);\n-            chatArea.scrollTop = chatArea.scrollHeight;\n-        }\n-        \n         // Funkcja do wysyłania wiadomości\n         function sendMessage() {\n             const message = userInput.value.trim();\n             if (!message && !selectedImage) return;\n"
                },
                {
                    "date": 1743960430586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1072,51 +1072,50 @@\n             return now.getHours().toString().padStart(2, '0') + ':' + \n                    now.getMinutes().toString().padStart(2, '0');\n         }\n         \n-        // Funkcja do dodawania wiadomości\n-// Function to add messages\n-function addMessage(text, isUser, imageUrl = null) {\n-    const messageDiv = document.createElement('div');\n-    messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n+        // Function to add messages\n+        function addMessage(text, isUser, imageUrl = null) {\n+            const messageDiv = document.createElement('div');\n+            messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n \n-    const contentDiv = document.createElement('div');\n+            const contentDiv = document.createElement('div');\n \n-    if (isUser) {\n-        contentDiv.textContent = text; // User messages are plain text\n-    } else {\n-        // For AI messages, use marked.js to format Markdown\n-        const renderer = new marked.Renderer();\n+            if (isUser) {\n+                contentDiv.textContent = text; // User messages are plain text\n+            } else {\n+                // For AI messages, use marked.js to format Markdown\n+                const renderer = new marked.Renderer();\n \n-        marked.setOptions({\n-            renderer: renderer,\n-            breaks: true,\n-            gfm: true\n-        });\n+                marked.setOptions({\n+                    renderer: renderer,\n+                    breaks: true,\n+                    gfm: true\n+                });\n \n-        // Process the text to handle code blocks\n-        let processedText = text;\n+                // Process the text to handle code blocks\n+                let processedText = text;\n \n-        // Ensure code blocks are wrapped in triple backticks\n-        processedText = processedText.replace(/```(.*?)```/g, '<div class=\"code-container\"><pre class=\"code-block\"><code>$1</code></pre></div>');\n+                // Ensure code blocks are wrapped in triple backticks\n+                processedText = processedText.replace(/```([\\s\\S]*?)```/g, '<div class=\"code-container\"><pre class=\"code-block\"><code>$1</code></pre></div>');\n+                \n+                // Apply Markdown formatting\n+                processedText = marked(processedText);\n+                \n+                contentDiv.innerHTML = processedText; // Set the formatted HTML\n+            }\n+            \n+            const timeDiv = document.createElement('div');\n+            timeDiv.className = 'message-time';\n+            timeDiv.textContent = formatTime();\n+            \n+            messageDiv.appendChild(contentDiv);\n+            messageDiv.appendChild(timeDiv);\n+            \n+            chatArea.appendChild(messageDiv);\n+            chatArea.scrollTop = chatArea.scrollHeight;\n+        }\n         \n-        // Apply Markdown formatting\n-        processedText = marked(processedText);\n-        \n-        contentDiv.innerHTML = processedText; // Set the formatted HTML\n-    }\n-    \n-    const timeDiv = document.createElement('div');\n-    timeDiv.className = 'message-time';\n-    timeDiv.textContent = formatTime();\n-    \n-    messageDiv.appendChild(contentDiv);\n-    messageDiv.appendChild(timeDiv);\n-    \n-    chatArea.appendChild(messageDiv);\n-    chatArea.scrollTop = chatArea.scrollHeight;\n-}\n-        \n         // Funkcja do wysyłania wiadomości\n         function sendMessage() {\n             const message = userInput.value.trim();\n             if (!message && !selectedImage) return;\n"
                },
                {
                    "date": 1743960436194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1072,50 +1072,51 @@\n             return now.getHours().toString().padStart(2, '0') + ':' + \n                    now.getMinutes().toString().padStart(2, '0');\n         }\n         \n-        // Function to add messages\n-        function addMessage(text, isUser, imageUrl = null) {\n-            const messageDiv = document.createElement('div');\n-            messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n+        // Funkcja do dodawania wiadomości\n+// Function to add messages\n+function addMessage(text, isUser, imageUrl = null) {\n+    const messageDiv = document.createElement('div');\n+    messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n \n-            const contentDiv = document.createElement('div');\n+    const contentDiv = document.createElement('div');\n \n-            if (isUser) {\n-                contentDiv.textContent = text; // User messages are plain text\n-            } else {\n-                // For AI messages, use marked.js to format Markdown\n-                const renderer = new marked.Renderer();\n+    if (isUser) {\n+        contentDiv.textContent = text; // User messages are plain text\n+    } else {\n+        // For AI messages, use marked.js to format Markdown\n+        const renderer = new marked.Renderer();\n \n-                marked.setOptions({\n-                    renderer: renderer,\n-                    breaks: true,\n-                    gfm: true\n-                });\n+        marked.setOptions({\n+            renderer: renderer,\n+            breaks: true,\n+            gfm: true\n+        });\n \n-                // Process the text to handle code blocks\n-                let processedText = text;\n+        // Process the text to handle code blocks\n+        let processedText = text;\n \n-                // Ensure code blocks are wrapped in triple backticks\n-                processedText = processedText.replace(/```([\\s\\S]*?)```/g, '<div class=\"code-container\"><pre class=\"code-block\"><code>$1</code></pre></div>');\n-                \n-                // Apply Markdown formatting\n-                processedText = marked(processedText);\n-                \n-                contentDiv.innerHTML = processedText; // Set the formatted HTML\n-            }\n-            \n-            const timeDiv = document.createElement('div');\n-            timeDiv.className = 'message-time';\n-            timeDiv.textContent = formatTime();\n-            \n-            messageDiv.appendChild(contentDiv);\n-            messageDiv.appendChild(timeDiv);\n-            \n-            chatArea.appendChild(messageDiv);\n-            chatArea.scrollTop = chatArea.scrollHeight;\n-        }\n+        // Ensure code blocks are wrapped in triple backticks\n+        processedText = processedText.replace(/```(.*?)```/g, '<div class=\"code-container\"><pre class=\"code-block\"><code>$1</code></pre></div>');\n         \n+        // Apply Markdown formatting\n+        processedText = marked(processedText);\n+        \n+        contentDiv.innerHTML = processedText; // Set the formatted HTML\n+    }\n+    \n+    const timeDiv = document.createElement('div');\n+    timeDiv.className = 'message-time';\n+    timeDiv.textContent = formatTime();\n+    \n+    messageDiv.appendChild(contentDiv);\n+    messageDiv.appendChild(timeDiv);\n+    \n+    chatArea.appendChild(messageDiv);\n+    chatArea.scrollTop = chatArea.scrollHeight;\n+}\n+        \n         // Funkcja do wysyłania wiadomości\n         function sendMessage() {\n             const message = userInput.value.trim();\n             if (!message && !selectedImage) return;\n"
                },
                {
                    "date": 1743960456423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1096,9 +1096,9 @@\n         // Process the text to handle code blocks\n         let processedText = text;\n \n         // Ensure code blocks are wrapped in triple backticks\n-        processedText = processedText.replace(/```(.*?)```/g, '<div class=\"code-container\"><pre class=\"code-block\"><code>$1</code></pre></div>');\n+        processedText = processedText.replace(/```([\\s\\S]*?)```/g, '<div class=\"code-container\"><pre class=\"code-block\"><code>$1</code></pre></div>');\n         \n         // Apply Markdown formatting\n         processedText = marked(processedText);\n         \n"
                },
                {
                    "date": 1743960471502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1096,9 +1096,9 @@\n         // Process the text to handle code blocks\n         let processedText = text;\n \n         // Ensure code blocks are wrapped in triple backticks\n-        processedText = processedText.replace(/```([\\s\\S]*?)```/g, '<div class=\"code-container\"><pre class=\"code-block\"><code>$1</code></pre></div>');\n+        processedText = processedText.replace(/```(.*?)```/g, '<div class=\"code-container\"><pre class=\"code-block\"><code>$1</code></pre></div>');\n         \n         // Apply Markdown formatting\n         processedText = marked(processedText);\n         \n"
                },
                {
                    "date": 1743960513426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1096,9 +1096,12 @@\n         // Process the text to handle code blocks\n         let processedText = text;\n \n         // Ensure code blocks are wrapped in triple backticks\n-        processedText = processedText.replace(/```(.*?)```/g, '<div class=\"code-container\"><pre class=\"code-block\"><code>$1</code></pre></div>');\n+                       processedText = processedText.replace(/<div class=\"code-container\">[\\\\s\\\\S]*?<\\\\/div>/g, function(match) {\n+                    codeBlocks.push(match);\n+                    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n+                });\n         \n         // Apply Markdown formatting\n         processedText = marked(processedText);\n         \n"
                },
                {
                    "date": 1743960533299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1333 @@\n+const express = require('express');\n+const path = require('path');\n+const fs = require('fs');\n+const multer = require('multer');\n+const axios = require('axios'); // Add axios for API requests\n+const marked = require('marked'); // Biblioteka do formatowania markdown\n+\n+const app = express();\n+const PORT = process.env.PORT || 3000;\n+const GEMINI_API_KEY = 'AIzaSyAP1EOpnlAhNRh9MI41v8EHtyRGylNR_bA';\n+\n+// Upewnij się, że istnieje folder temp\n+if (!fs.existsSync('temp')) {\n+    fs.mkdirSync('temp');\n+}\n+\n+// Configure multer to preserve original filename for file panel\n+const storage = multer.diskStorage({\n+    destination: (req, file, cb) => {\n+        // Make sure the \"pliki\" directory exists\n+        if (!fs.existsSync('pliki')) {\n+            fs.mkdirSync('pliki');\n+        }\n+        cb(null, 'pliki/');\n+    },\n+    filename: (req, file, cb) => {\n+        cb(null, file.originalname);\n+    }\n+});\n+const upload = multer({ storage: storage });\n+\n+// Configure multer for temporary image uploads\n+const tempStorage = multer.diskStorage({\n+    destination: (req, file, cb) => {\n+        cb(null, 'temp/');\n+    },\n+    filename: (req, file, cb) => {\n+        cb(null, Date.now() + '-' + file.originalname);\n+    }\n+});\n+const tempUpload = multer({ storage: tempStorage });\n+\n+app.use(express.urlencoded({ extended: true }));\n+app.use(express.json());\n+app.use(express.static('public', { index: false }));\n+\n+// Modern clean styles\n+const modernStyles = `\n+<style>\n+    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n+\n+    * {\n+        box-sizing: border-box;\n+        margin: 0;\n+        padding: 0;\n+    }\n+\n+    :root {\n+        --bg-dark: #121212;\n+        --bg-card: #1e1e2d;\n+        --accent-primary: #6366f1;\n+        --accent-secondary: #8b5cf6;\n+        --text-primary: #f3f4f6;\n+        --text-secondary: #d1d5db;\n+        --text-muted: #9ca3af;\n+        --border-color: #2d2d3d;\n+        --danger: #ef4444;\n+    }\n+\n+    body {\n+        font-family: 'Inter', sans-serif;\n+        background: linear-gradient(135deg, #121212 0%, #1a1a2e 100%);\n+        color: var(--text-primary);\n+        line-height: 1.6;\n+        min-height: 100vh;\n+    }\n+\n+    .container {\n+        width: 90%;\n+        max-width: 1200px;\n+        margin: 2rem auto;\n+        padding: 2rem;\n+        background: var(--bg-card);\n+        border-radius: 12px;\n+        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);\n+        border: 1px solid var(--border-color);\n+    }\n+\n+    h1 {\n+        text-align: center;\n+        margin-bottom: 2rem;\n+        background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));\n+        -webkit-background-clip: text;\n+        -webkit-text-fill-color: transparent;\n+        font-weight: 700;\n+    }\n+\n+    a {\n+        text-decoration: none;\n+    }\n+\n+    .btn {\n+        display: inline-block;\n+        padding: 0.6rem 1.2rem;\n+        margin: 0.3rem;\n+        border: none;\n+        border-radius: 6px;\n+        font-weight: 500;\n+        font-size: 0.9rem;\n+        cursor: pointer;\n+        transition: all 0.2s ease;\n+    }\n+\n+    .btn-primary {\n+        background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));\n+        color: white;\n+    }\n+\n+    .btn-secondary {\n+        background: rgba(255, 255, 255, 0.08);\n+        color: var(--text-primary);\n+        border: 1px solid var(--border-color);\n+    }\n+\n+    .btn-danger {\n+        background: var(--danger);\n+        color: white;\n+    }\n+\n+    .btn:hover {\n+        transform: translateY(-2px);\n+        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n+    }\n+\n+    .btn-primary:hover {\n+        background: linear-gradient(to right, #5254cc, #7e4fdb);\n+    }\n+\n+    .btn-secondary:hover {\n+        background: rgba(255, 255, 255, 0.12);\n+    }\n+\n+    table {\n+        width: 100%;\n+        border-collapse: collapse;\n+        margin: 1.5rem 0;\n+        border-radius: 8px;\n+        overflow: hidden;\n+    }\n+\n+    th, td {\n+        padding: 1rem;\n+        text-align: left;\n+        border-bottom: 1px solid var(--border-color);\n+    }\n+\n+    th {\n+        background-color: rgba(255, 255, 255, 0.05);\n+        font-weight: 600;\n+        color: var(--text-primary);\n+    }\n+\n+    tr:hover {\n+        background-color: rgba(255, 255, 255, 0.03);\n+    }\n+\n+    input[type=\"text\"], \n+    input[type=\"file\"] {\n+        width: 100%;\n+        padding: 0.8rem;\n+        margin: 0.8rem 0;\n+        background: rgba(255, 255, 255, 0.05);\n+        border: 1px solid var(--border-color);\n+        border-radius: 6px;\n+        color: var(--text-primary);\n+        font-family: 'Inter', sans-serif;\n+    }\n+\n+    input[type=\"text\"]:focus,\n+    input[type=\"file\"]:focus,\n+    textarea:focus {\n+        outline: none;\n+        border-color: var(--accent-primary);\n+        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);\n+    }\n+\n+    textarea {\n+        width: 100%;\n+        height: 70vh;\n+        min-height: 400px;\n+        padding: 0.8rem;\n+        margin: 0.8rem 0;\n+        background: rgba(255, 255, 255, 0.05);\n+        border: 1px solid var(--border-color);\n+        border-radius: 6px;\n+        color: var(--text-primary);\n+        font-family: monospace;\n+        resize: vertical;\n+    }\n+\n+    form button[type=\"submit\"] {\n+        background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));\n+        color: white;\n+        padding: 0.8rem 1.5rem;\n+        border: none;\n+        border-radius: 6px;\n+        cursor: pointer;\n+        font-weight: 500;\n+        transition: all 0.2s ease;\n+    }\n+\n+    form button[type=\"submit\"]:hover {\n+        background: linear-gradient(to right, #5254cc, #7e4fdb);\n+        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n+    }\n+\n+    .actions {\n+        display: flex;\n+        flex-wrap: wrap;\n+        justify-content: flex-start;\n+        gap: 0.3rem;\n+    }\n+\n+    .header-actions {\n+        display: flex;\n+        justify-content: space-between;\n+        align-items: center;\n+        margin-bottom: 1.5rem;\n+        background: rgba(0, 0, 0, 0.2);\n+        padding: 1rem;\n+        border-radius: 8px;\n+        border: 1px solid var(--border-color);\n+    }\n+\n+    .fade-in {\n+        animation: fadeIn 0.3s ease forwards;\n+    }\n+\n+    @keyframes fadeIn {\n+        from { opacity: 0; transform: translateY(10px); }\n+        to { opacity: 1; transform: translateY(0); }\n+    }\n+</style>\n+`;\n+\n+app.get('/', (req, res) => {\n+    res.send(`\n+<html>\n+<head>\n+    <title>Files Portal</title>\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    ${modernStyles}\n+</head>\n+<body>\n+    <div class=\"container fade-in\">\n+        <h1>Welcome to Files Portal</h1>\n+        <div style=\"text-align: center; margin-top: 2rem; display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\n+            <a href=\"/panel\" class=\"btn btn-primary\">Go to File Management</a>\n+            <a href=\"/chat\" class=\"btn btn-primary\" style=\"background: linear-gradient(to right, #9333ea, #3b82f6);\">\n+                <span style=\"display: flex; align-items: center; gap: 8px;\">\n+                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n+                        <path d=\"M8 1a5 5 0 0 0-5 5v1h1a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V6a6 6 0 1 1 12 0v6a2.5 2.5 0 0 1-2.5 2.5H9.366a1 1 0 0 1-.866.5h-1a1 1 0 1 1 0-2h1a1 1 0 0 1 .866.5H11.5A1.5 1.5 0 0 0 13 12h-1a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1h1V6a5 5 0 0 0-5-5z\"/>\n+                    </svg>\n+                    Chat with YutAi\n+                </span>\n+            </a>\n+        </div>\n+    </div>\n+</body>\n+</html>\n+`);\n+});\n+\n+app.get('/panel', (req, res) => {\n+    fs.readdir('pliki', (err, files) => {\n+        if (err) {\n+            if (err.code === 'ENOENT') {\n+                // Directory doesn't exist, create it\n+                fs.mkdirSync('pliki');\n+                files = [];\n+            } else {\n+                return res.send('Error loading files.');\n+            }\n+        }\n+\n+        const fileRows = files.map(file => `\n+<tr class=\"fade-in\">\n+    <td>${file}</td>\n+    <td class=\"actions\">\n+            <a href=\"/files/${encodeURIComponent(file)}\" download class=\"btn btn-secondary\">Download</a>\n+            <a href=\"/panel/edit/${encodeURIComponent(file)}\" class=\"btn btn-secondary\">Edit</a>\n+            <a href=\"/panel/rename/${encodeURIComponent(file)}\" class=\"btn btn-secondary\">Rename</a>\n+            <a href=\"/panel/redirect/${encodeURIComponent(file)}\" class=\"btn btn-secondary\">Open</a>\n+            <a href=\"/panel/delete/${encodeURIComponent(file)}\" class=\"btn btn-danger\">Delete</a>\n+    </td>\n+</tr>\n+`).join('');\n+\n+        res.send(`\n+<html>\n+<head>\n+        <title>File Management</title>\n+        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+        ${modernStyles}\n+</head>\n+<body>\n+        <div class=\"container fade-in\">\n+            <h1>File Management</h1>\n+            \n+            <div class=\"header-actions\">\n+                <div>\n+                    <a href=\"/panel/create\" class=\"btn btn-primary\">Create New File</a>\n+                    <a href=\"/\" class=\"btn btn-secondary\">Powrót do strony głównej</a>\n+                </div>\n+                \n+                <form action=\"/panel/upload\" method=\"POST\" enctype=\"multipart/form-data\" style=\"display: flex; align-items: center; gap: 10px;\">\n+                    <input type=\"file\" name=\"file\" required style=\"margin: 0;\">\n+                    <button type=\"submit\" class=\"btn btn-primary\">Upload</button>\n+        </form>\n+    </div>\n+\n+        <table>\n+            <tr>\n+                <th>File Name</th>\n+                <th>Actions</th>\n+            </tr>\n+            ${fileRows}\n+        </table>\n+    </div>\n+</body>\n+</html>\n+`);\n+    });\n+});\n+\n+app.get('/panel/create', (req, res) => {\n+    res.send(`\n+<html>\n+<head>\n+    <title>Create New File</title>\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    ${modernStyles}\n+</head>\n+<body>\n+    <div class=\"container fade-in\">\n+        <h1>Create New File</h1>\n+        <form action=\"/panel/create\" method=\"POST\">\n+            <input type=\"text\" name=\"filename\" placeholder=\"File name\" required>\n+            <textarea name=\"content\" placeholder=\"File content\"></textarea>\n+            <div style=\"display: flex; justify-content: space-between; margin-top: 1rem;\">\n+                <a href=\"/panel\" class=\"btn btn-secondary\">Back</a>\n+                <button type=\"submit\" class=\"btn btn-primary\">Create</button>\n+            </div>\n+        </form>\n+    </div>\n+</body>\n+</html>\n+`);\n+});\n+\n+// Obsługa tworzenia plików\n+app.post('/panel/create', (req, res) => {\n+    const { filename, content } = req.body;\n+    if (!filename) return res.send('File name is required!');\n+\n+    const filePath = path.join(__dirname, 'pliki', filename);\n+\n+    // Sprawdź czy plik już istnieje\n+    fs.access(filePath, fs.constants.F_OK, (err) => {\n+        if (!err) return res.send('File already exists!');\n+\n+        fs.writeFile(filePath, content || '', (err) => {\n+            if (err) return res.send('Error creating file!');\n+            res.redirect('/panel');\n+        });\n+    });\n+});\n+\n+app.get('/panel/edit/:filename', (req, res) => {\n+    fs.readFile(path.join(__dirname, 'pliki', req.params.filename), 'utf8', (err, data) => {\n+        if (err) return res.send('Error reading file.');\n+        res.send(`\n+<html>\n+<head>\n+    <title>Edit File</title>\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    ${modernStyles}\n+</head>\n+<body>\n+    <div class=\"container fade-in\">\n+        <h1>Edit File: ${req.params.filename}</h1>\n+        <form action=\"/panel/edit/${encodeURIComponent(req.params.filename)}\" method=\"POST\">\n+            <textarea name=\"content\">${data}</textarea>\n+            <div style=\"display: flex; justify-content: space-between; margin-top: 1rem;\">\n+                <a href=\"/panel\" class=\"btn btn-secondary\">Back</a>\n+                <button type=\"submit\" class=\"btn btn-primary\">Save</button>\n+            </div>\n+        </form>\n+    </div>\n+</body>\n+</html>\n+`);\n+    });\n+});\n+\n+app.get('/panel/rename/:filename', (req, res) => {\n+    res.send(`\n+<html>\n+<head>\n+    <title>Rename File</title>\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    ${modernStyles}\n+</head>\n+<body>\n+    <div class=\"container fade-in\">\n+        <h1>Rename File: ${req.params.filename}</h1>\n+        <form action=\"/panel/rename/${encodeURIComponent(req.params.filename)}\" method=\"POST\">\n+            <input type=\"text\" name=\"newName\" placeholder=\"New file name\" required>\n+            <div style=\"display: flex; justify-content: space-between; margin-top: 1rem;\">\n+                <a href=\"/panel\" class=\"btn btn-secondary\">Back</a>\n+                <button type=\"submit\" class=\"btn btn-primary\">Rename</button>\n+            </div>\n+        </form>\n+    </div>\n+</body>\n+</html>\n+`);\n+});\n+\n+// Pozostałe endpointy\n+app.post('/panel/upload', upload.single('file'), (req, res) => res.redirect('/panel'));\n+\n+app.get('/panel/delete/:filename', (req, res) => {\n+    fs.unlink(path.join(__dirname, 'pliki', req.params.filename), (err) => {\n+        res.redirect('/panel');\n+    });\n+});\n+\n+app.post('/panel/edit/:filename', (req, res) => {\n+    fs.writeFile(path.join(__dirname, 'pliki', req.params.filename), req.body.content, 'utf8', (err) => {\n+        res.redirect('/panel');\n+    });\n+});\n+\n+app.post('/panel/rename/:filename', (req, res) => {\n+    fs.rename(\n+        path.join(__dirname, 'pliki', req.params.filename),\n+        path.join(__dirname, 'pliki', req.body.newName),\n+        () => res.redirect('/panel')\n+    );\n+});\n+\n+app.get('/panel/redirect/:filename', (req, res) => {\n+    res.redirect(`/files/${encodeURIComponent(req.params.filename)}`);\n+});\n+\n+// Dodaj endpoint do udostępniania plików z folderu pliki\n+app.use('/files', express.static('pliki'));\n+\n+// Add Gemini chat page\n+app.get('/chat', (req, res) => {\n+    const chatHtml = `<!DOCTYPE html>\n+<html>\n+<head>\n+    <title>YutAi - Inteligentny Asystent</title>\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n+    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n+    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n+    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n+    ${modernStyles}\n+    <style>\n+      body {\n+          font-family: 'Poppins', sans-serif;\n+          background: linear-gradient(125deg, #0f0c29, #302b63, #24243e);\n+          color: #fff;\n+          line-height: 1.6;\n+          min-height: 100vh;\n+          margin: 0;\n+          padding: 0;\n+          display: flex;\n+          align-items: center;\n+          justify-content: center;\n+          animation: gradientBG 15s ease infinite;\n+          background-size: 400% 400%;\n+      }\n+      \n+      @keyframes gradientBG {\n+          0% { background-position: 0% 50%; }\n+          50% { background-position: 100% 50%; }\n+          100% { background-position: 0% 50%; }\n+      }\n+      \n+      .container {\n+          width: 95%;\n+          max-width: 1100px;\n+          margin: 2rem auto;\n+          padding: 0;\n+          background: rgba(15, 23, 42, 0.7);\n+          border-radius: 20px;\n+          box-shadow: 0 15px 50px rgba(0, 0, 0, 0.4);\n+          backdrop-filter: blur(10px);\n+          border: 1px solid rgba(255, 255, 255, 0.1);\n+          overflow: hidden;\n+          display: flex;\n+          flex-direction: column;\n+          height: 90vh;\n+      }\n+      \n+      .header {\n+          padding: 1.5rem 2rem;\n+          display: flex;\n+          justify-content: space-between;\n+          align-items: center;\n+          border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n+          background: rgba(15, 23, 42, 0.5);\n+      }\n+      \n+      .logo {\n+          display: flex;\n+          align-items: center;\n+          gap: 10px;\n+      }\n+      \n+      .logo-icon {\n+          font-size: 1.8rem;\n+          background: linear-gradient(to right, #6366f1, #8b5cf6, #ec4899);\n+          -webkit-background-clip: text;\n+          -webkit-text-fill-color: transparent;\n+      }\n+      \n+      h1 {\n+          margin: 0;\n+          font-size: 1.8rem;\n+          background: linear-gradient(to right, #6366f1, #8b5cf6, #ec4899);\n+          -webkit-background-clip: text;\n+          -webkit-text-fill-color: transparent;\n+          font-weight: 700;\n+      }\n+      \n+      .status {\n+          display: flex;\n+          align-items: center;\n+          gap: 6px;\n+          font-size: 0.9rem;\n+          color: #a5b4fc;\n+          background: rgba(99, 102, 241, 0.1);\n+          padding: 5px 10px;\n+          border-radius: 20px;\n+          border: 1px solid rgba(99, 102, 241, 0.2);\n+      }\n+      \n+      .status-dot {\n+          width: 8px;\n+          height: 8px;\n+          background: #22c55e;\n+          border-radius: 50%;\n+          animation: pulse 2s infinite;\n+      }\n+      \n+      .chat-area {\n+          flex: 1;\n+          overflow-y: auto;\n+          padding: 1.5rem 2rem;\n+          scroll-behavior: smooth;\n+          position: relative;\n+          background-image: url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.03'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n+      }\n+      \n+      .chat-area::-webkit-scrollbar {\n+          width: 6px;\n+      }\n+      \n+      .chat-area::-webkit-scrollbar-track {\n+          background: rgba(255, 255, 255, 0.05);\n+          border-radius: 10px;\n+      }\n+      \n+      .chat-area::-webkit-scrollbar-thumb {\n+          background: rgba(99, 102, 241, 0.3);\n+          border-radius: 10px;\n+      }\n+      \n+      .chat-area::-webkit-scrollbar-thumb:hover {\n+          background: rgba(99, 102, 241, 0.5);\n+      }\n+      \n+      .message {\n+          margin-bottom: 1.5rem;\n+          padding: 1rem 1.2rem;\n+          border-radius: 15px;\n+          max-width: 80%;\n+          position: relative;\n+          animation: fadeIn 0.3s ease forwards;\n+          line-height: 1.5;\n+      }\n+      \n+      @keyframes fadeIn {\n+          from { opacity: 0; transform: translateY(10px); }\n+          to { opacity: 1; transform: translateY(0); }\n+      }\n+      \n+      .user-message {\n+          background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);\n+          margin-left: auto;\n+          border-top-right-radius: 0;\n+          box-shadow: 0 5px 15px rgba(99, 102, 241, 0.3);\n+          color: white;\n+      }\n+      \n+      .ai-message {\n+          background: rgba(255, 255, 255, 0.05);\n+          margin-right: auto;\n+          border-top-left-radius: 0;\n+          border: 1px solid rgba(255, 255, 255, 0.1);\n+          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n+      }\n+      \n+      .message-time {\n+          font-size: 0.7rem;\n+          opacity: 0.7;\n+          margin-top: 5px;\n+          text-align: right;\n+      }\n+      \n+      .footer {\n+          padding: 1.5rem 2rem;\n+          border-top: 1px solid rgba(255, 255, 255, 0.1);\n+          background: rgba(15, 23, 42, 0.5);\n+      }\n+      \n+      .input-area {\n+          display: flex;\n+          gap: 10px;\n+          position: relative;\n+      }\n+      \n+      .input-area input {\n+          flex-grow: 1;\n+          padding: 1rem 1rem 1rem 3rem;\n+          border: 1px solid rgba(255, 255, 255, 0.1);\n+          border-radius: 15px;\n+          background: rgba(15, 23, 42, 0.6);\n+          color: #fff;\n+          font-family: 'Poppins', sans-serif;\n+          font-size: 1rem;\n+          transition: all 0.3s ease;\n+      }\n+      \n+      .input-area input:focus {\n+          outline: none;\n+          border-color: #6366f1;\n+          box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.3);\n+      }\n+      \n+      .input-icon {\n+          position: absolute;\n+          left: 1rem;\n+          top: 50%;\n+          transform: translateY(-50%);\n+          color: #6366f1;\n+          font-size: 1.2rem;\n+      }\n+      \n+      .input-area button {\n+          padding: 0 1.5rem;\n+          border: none;\n+          border-radius: 15px;\n+          background: linear-gradient(to right, #6366f1, #8b5cf6, #ec4899);\n+          color: white;\n+          font-weight: 600;\n+          cursor: pointer;\n+          transition: all 0.3s ease;\n+          display: flex;\n+          align-items: center;\n+          gap: 10px;\n+      }\n+      \n+      .input-area button:hover {\n+          transform: translateY(-2px);\n+          box-shadow: 0 5px 15px rgba(99, 102, 241, 0.4);\n+      }\n+      \n+      .input-area button i {\n+          font-size: 1.2rem;\n+      }\n+      \n+      .tools-bar {\n+          display: flex;\n+          justify-content: space-between;\n+          margin-top: 1rem;\n+      }\n+      \n+      .image-preview {\n+          display: none;\n+          position: relative;\n+          margin-top: 10px;\n+          max-width: 200px;\n+          border-radius: 12px;\n+          overflow: hidden;\n+          border: 1px solid rgba(255, 255, 255, 0.1);\n+          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n+      }\n+      \n+      .image-preview img {\n+          width: 100%;\n+          display: block;\n+      }\n+      \n+      .image-preview-close {\n+          position: absolute;\n+          top: 5px;\n+          right: 5px;\n+          background: rgba(0, 0, 0, 0.6);\n+          border: none;\n+          color: white;\n+          width: 24px;\n+          height: 24px;\n+          border-radius: 50%;\n+          font-size: 16px;\n+          cursor: pointer;\n+          display: flex;\n+          align-items: center;\n+          justify-content: center;\n+      }\n+      \n+      .file-upload {\n+          position: relative;\n+          overflow: hidden;\n+      }\n+      \n+      .file-upload input[type=file] {\n+          position: absolute;\n+          left: 0;\n+          top: 0;\n+          opacity: 0;\n+          width: 100%;\n+          height: 100%;\n+          cursor: pointer;\n+      }\n+      \n+      .file-upload-btn {\n+          display: flex;\n+          align-items: center;\n+          gap: 6px;\n+          background: rgba(99, 102, 241, 0.1);\n+          color: #a5b4fc;\n+          border: 1px solid rgba(99, 102, 241, 0.2);\n+          border-radius: 10px;\n+          padding: 6px 12px;\n+          font-size: 0.9rem;\n+          cursor: pointer;\n+          transition: all 0.3s ease;\n+      }\n+      \n+      .file-upload-btn:hover {\n+          background: rgba(99, 102, 241, 0.2);\n+          color: #c7d2fe;\n+      }\n+      \n+      .user-message-image {\n+          max-width: 200px;\n+          border-radius: 8px;\n+          margin-top: 10px;\n+          display: block;\n+      }\n+      \n+      .code-block {\n+          background: rgba(15, 23, 42, 0.8);\n+          padding: 1rem;\n+          border-radius: 8px;\n+          margin: 1rem 0;\n+          white-space: pre-wrap;\n+          font-family: 'JetBrains Mono', monospace;\n+          font-size: 0.9rem;\n+          line-height: 1.5;\n+          color: #e2e8f0;\n+          border-left: 3px solid #6366f1;\n+      }\n+      \n+      .code-container {\n+          margin: 15px 0;\n+          border-radius: 12px;\n+          overflow: hidden;\n+          border: 1px solid rgba(255, 255, 255, 0.1);\n+          background: rgba(15, 23, 42, 0.6);\n+      }\n+      \n+      .code-header {\n+          display: flex;\n+          justify-content: space-between;\n+          align-items: center;\n+          padding: 10px 15px;\n+          background: rgba(15, 23, 42, 0.8);\n+          border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n+      }\n+      \n+      .code-header span {\n+          color: #a5b4fc;\n+          font-size: 0.85rem;\n+          text-transform: uppercase;\n+          letter-spacing: 1px;\n+      }\n+      \n+      .code-actions {\n+          display: flex;\n+          gap: 8px;\n+      }\n+      \n+      .code-actions button {\n+          padding: 5px 10px;\n+          background: rgba(99, 102, 241, 0.2);\n+          color: #a5b4fc;\n+          border: none;\n+          border-radius: 8px;\n+          font-size: 0.8rem;\n+          cursor: pointer;\n+          transition: all 0.2s ease;\n+          display: flex;\n+          align-items: center;\n+          gap: 5px;\n+      }\n+      \n+      .code-actions button:hover {\n+          background: rgba(99, 102, 241, 0.4);\n+          color: #c7d2fe;\n+      }\n+      \n+      .code-actions button i {\n+          font-size: 0.9rem;\n+      }\n+      \n+      .code-footer {\n+          display: flex;\n+          padding: 8px 15px;\n+          background: rgba(15, 23, 42, 0.8);\n+          border-top: 1px solid rgba(255, 255, 255, 0.1);\n+      }\n+      \n+      .mini-counter {\n+          font-size: 0.75rem;\n+          color: #6366f1;\n+          display: flex;\n+          align-items: center;\n+          gap: 5px;\n+      }\n+      \n+      .typing-indicator {\n+          display: flex;\n+          align-items: center;\n+          gap: 5px;\n+      }\n+      \n+      .typing-indicator span {\n+          display: inline-block;\n+          width: 8px;\n+          height: 8px;\n+          background-color: #a5b4fc;\n+          border-radius: 50%;\n+          animation: bounce 1.5s infinite;\n+      }\n+      \n+      .typing-indicator span:nth-child(2) {\n+          animation-delay: 0.2s;\n+      }\n+      \n+      .typing-indicator span:nth-child(3) {\n+          animation-delay: 0.4s;\n+      }\n+      \n+      @keyframes bounce {\n+          0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }\n+          40% { transform: scale(1.2); opacity: 1; }\n+      }\n+      \n+      /* Style dla formatowania Markdown */\n+      .ai-message strong {\n+          font-weight: 700;\n+          color: #a5b4fc;\n+      }\n+      \n+      .ai-message em {\n+          font-style: italic;\n+          color: #ddd;\n+      }\n+      \n+      .ai-message ul, .ai-message ol {\n+          margin-left: 1.5rem;\n+          margin-bottom: 1rem;\n+      }\n+      \n+      .ai-message li {\n+          margin-bottom: 0.5rem;\n+      }\n+      \n+      .ai-message a {\n+          color: #6366f1;\n+          text-decoration: none;\n+          border-bottom: 1px dotted #6366f1;\n+          transition: all 0.2s ease;\n+      }\n+      \n+      .ai-message a:hover {\n+          color: #818cf8;\n+          border-bottom-color: #818cf8;\n+      }\n+      \n+      .ai-message blockquote {\n+          border-left: 3px solid #6366f1;\n+          padding-left: 1rem;\n+          margin-left: 0;\n+          margin-right: 0;\n+          font-style: italic;\n+          color: #9ca3af;\n+      }\n+      \n+      .ai-message h1, .ai-message h2, .ai-message h3, .ai-message h4 {\n+          margin-top: 1.5rem;\n+          margin-bottom: 0.75rem;\n+          color: #fff;\n+          font-weight: 600;\n+      }\n+      \n+      .ai-message h1 {\n+          font-size: 1.5rem;\n+          border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n+          padding-bottom: 0.5rem;\n+      }\n+      \n+      .ai-message h2 {\n+          font-size: 1.3rem;\n+      }\n+      \n+      .ai-message h3 {\n+          font-size: 1.1rem;\n+      }\n+      \n+      .ai-message h4 {\n+          font-size: 1rem;\n+      }\n+      \n+      .ai-message table {\n+          width: 100%;\n+          border-collapse: collapse;\n+          margin: 1rem 0;\n+          overflow: hidden;\n+          border-radius: 8px;\n+      }\n+      \n+      .ai-message th {\n+          background-color: rgba(99, 102, 241, 0.2);\n+          text-align: left;\n+          padding: 0.5rem;\n+      }\n+      \n+      .ai-message td {\n+          padding: 0.5rem;\n+          border-top: 1px solid rgba(255, 255, 255, 0.1);\n+      }\n+      \n+      .ai-message tr:nth-child(even) {\n+          background-color: rgba(255, 255, 255, 0.02);\n+      }\n+      \n+      @media (max-width: 768px) {\n+          .container {\n+              width: 100%;\n+              height: 100vh;\n+              margin: 0;\n+              border-radius: 0;\n+          }\n+          \n+          .message {\n+              max-width: 90%;\n+          }\n+          \n+          .header, .footer {\n+              padding: 1rem;\n+          }\n+          \n+          .chat-area {\n+              padding: 1rem;\n+          }\n+          \n+          h1 {\n+              font-size: 1.5rem;\n+          }\n+      }\n+    </style>\n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/marked/4.3.0/marked.min.js\"></script>\n+</head>\n+<body>\n+    <div class=\"container\">\n+        <div class=\"header\">\n+            <div class=\"logo\">\n+                <i class=\"fas fa-robot logo-icon\"></i>\n+                <h1>YutAi</h1>\n+            </div>\n+            <div class=\"status\">\n+                <div class=\"status-dot\"></div>\n+                <span>Online</span>\n+            </div>\n+        </div>\n+        \n+        <div class=\"chat-area\" id=\"chat-area\">\n+            <div class=\"message ai-message\">\n+                <div>Cześć! Jestem YutAi, Twój zaawansowany asystent AI. W czym mogę Ci dzisiaj pomóc?</div>\n+                <div class=\"message-time\">Teraz</div>\n+            </div>\n+        </div>\n+        \n+        <div class=\"footer\">\n+            <div class=\"input-area\">\n+                <i class=\"fas fa-message input-icon\"></i>\n+                <input type=\"text\" id=\"user-input\" placeholder=\"Napisz wiadomość...\" autocomplete=\"off\">\n+                <button id=\"send-button\">\n+                    <span>Wyślij</span>\n+                    <i class=\"fas fa-paper-plane\"></i>\n+                </button>\n+            </div>\n+            \n+            <div class=\"image-preview\" id=\"image-preview\">\n+                <img id=\"preview-img\" src=\"\" alt=\"Podgląd zdjęcia\">\n+                <button class=\"image-preview-close\" id=\"remove-image\">\n+                    <i class=\"fas fa-times\"></i>\n+                </button>\n+            </div>\n+            \n+            <div class=\"tools-bar\">\n+                <div class=\"file-upload\">\n+                    <input type=\"file\" id=\"image-upload\" accept=\"image/*\">\n+                    <div class=\"file-upload-btn\">\n+                        <i class=\"fas fa-image\"></i>\n+                        <span>Dodaj zdjęcie</span>\n+                    </div>\n+                </div>\n+            </div>\n+        </div>\n+    </div>\n+    \n+    <script>\n+    (function() {\n+        const chatArea = document.getElementById('chat-area');\n+        const userInput = document.getElementById('user-input');\n+        const sendButton = document.getElementById('send-button');\n+        const imageUpload = document.getElementById('image-upload');\n+        const imagePreview = document.getElementById('image-preview');\n+        const previewImg = document.getElementById('preview-img');\n+        const removeImageBtn = document.getElementById('remove-image');\n+        \n+        let selectedImage = null;\n+        \n+        // Funkcja kopiowania kodu\n+        window.copyCode = function(blockId) {\n+            const codeElement = document.getElementById(blockId);\n+            if (!codeElement) return;\n+            \n+            navigator.clipboard.writeText(codeElement.textContent)\n+                .then(() => {\n+                    const btn = codeElement.closest('.code-container').querySelector('.copy-btn');\n+                    const originalText = btn.textContent;\n+                    btn.textContent = 'Skopiowano!';\n+                    setTimeout(() => {\n+                        btn.textContent = originalText;\n+                    }, 2000);\n+                });\n+        };\n+        \n+        // Formatowanie czasu\n+        function formatTime() {\n+            const now = new Date();\n+            return now.getHours().toString().padStart(2, '0') + ':' + \n+                   now.getMinutes().toString().padStart(2, '0');\n+        }\n+        \n+        // Funkcja do dodawania wiadomości\n+// Function to add messages\n+function addMessage(text, isUser, imageUrl = null) {\n+    const messageDiv = document.createElement('div');\n+    messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n+\n+    const contentDiv = document.createElement('div');\n+\n+    if (isUser) {\n+        contentDiv.textContent = text; // User messages are plain text\n+    } else {\n+        // For AI messages, use marked.js to format Markdown\n+        const renderer = new marked.Renderer();\n+\n+        marked.setOptions({\n+            renderer: renderer,\n+            breaks: true,\n+            gfm: true\n+        });\n+\n+        // Process the text to handle code blocks\n+        let processedText = text;\n+\n+        // Ensure code blocks are wrapped in triple backticks\n+        processedText = processedText.replace(/```(.*?)```/g, '<div class=\"code-container\"><pre class=\"code-block\"><code>$1</code></pre></div>');\n+        \n+        // Apply Markdown formatting\n+        processedText = marked(processedText);\n+        \n+        contentDiv.innerHTML = processedText; // Set the formatted HTML\n+    }\n+    \n+    const timeDiv = document.createElement('div');\n+    timeDiv.className = 'message-time';\n+    timeDiv.textContent = formatTime();\n+    \n+    messageDiv.appendChild(contentDiv);\n+    messageDiv.appendChild(timeDiv);\n+    \n+    chatArea.appendChild(messageDiv);\n+    chatArea.scrollTop = chatArea.scrollHeight;\n+}\n+        \n+        // Funkcja do wysyłania wiadomości\n+        function sendMessage() {\n+            const message = userInput.value.trim();\n+            if (!message && !selectedImage) return;\n+            \n+            // Dodaj wiadomość użytkownika\n+            const imageUrl = selectedImage ? URL.createObjectURL(selectedImage) : null;\n+            addMessage(message, true, imageUrl);\n+            \n+            // Wyczyść pole wprowadzania\n+            userInput.value = '';\n+            \n+            // Przygotuj dane do wysłania\n+            const formData = new FormData();\n+            formData.append('message', message);\n+            \n+            // Dodaj zdjęcie jeśli zostało wybrane\n+            if (selectedImage) {\n+                formData.append('image', selectedImage);\n+            }\n+            \n+            // Ukryj podgląd zdjęcia\n+            imagePreview.style.display = 'none';\n+            selectedImage = null;\n+            \n+            // Dodaj wiadomość ładowania\n+            const loadingId = Date.now();\n+            const loadingDiv = document.createElement('div');\n+            loadingDiv.className = 'message ai-message';\n+            loadingDiv.id = 'loading-' + loadingId;\n+            \n+            const loadingContent = document.createElement('div');\n+            loadingContent.innerHTML = '<div class=\"typing-indicator\"><span>.</span><span>.</span><span>.</span></div>';\n+            \n+            const timeDiv = document.createElement('div');\n+            timeDiv.className = 'message-time';\n+            timeDiv.textContent = formatTime();\n+            \n+            loadingDiv.appendChild(loadingContent);\n+            loadingDiv.appendChild(timeDiv);\n+            \n+            chatArea.appendChild(loadingDiv);\n+            chatArea.scrollTop = chatArea.scrollHeight;\n+            \n+            // Wyślij zapytanie do API\n+            fetch('/api/chat', {\n+                method: 'POST',\n+                body: formData\n+            })\n+            .then(function(response) {\n+                return response.json();\n+            })\n+            .then(function(data) {\n+                // Usuń wiadomość ładowania\n+                const loadingMessage = document.getElementById('loading-' + loadingId);\n+                if (loadingMessage) loadingMessage.remove();\n+                \n+                // Dodaj odpowiedź AI\n+                addMessage(data.reply, false);\n+            })\n+            .catch(function(error) {\n+                console.error('Error:', error);\n+                // Usuń wiadomość ładowania\n+                const loadingMessage = document.getElementById('loading-' + loadingId);\n+                if (loadingMessage) loadingMessage.remove();\n+                \n+                // Dodaj komunikat o błędzie\n+                addMessage('Przepraszam, wystąpił błąd. Spróbuj ponownie.', false);\n+            });\n+        }\n+        \n+        // Obsługa wyboru zdjęcia\n+        function handleImageUpload(event) {\n+            const file = event.target.files[0];\n+            if (!file) return;\n+            \n+            // Akceptuj tylko obrazy\n+            if (!file.type.startsWith('image/')) {\n+                alert('Proszę wybrać plik obrazu');\n+                return;\n+            }\n+            \n+            // Pokaż podgląd zdjęcia\n+            const reader = new FileReader();\n+            reader.onload = function(e) {\n+                previewImg.src = e.target.result;\n+                imagePreview.style.display = 'block';\n+                selectedImage = file;\n+            };\n+            reader.readAsDataURL(file);\n+        }\n+        \n+        // Usunięcie wybranego zdjęcia\n+        function removeSelectedImage() {\n+            imagePreview.style.display = 'none';\n+            imageUpload.value = '';\n+            selectedImage = null;\n+        }\n+        \n+        // Obsługa przycisku wysyłania\n+        sendButton.addEventListener('click', sendMessage);\n+        \n+        // Obsługa klawisza Enter\n+        userInput.addEventListener('keypress', function(e) {\n+            if (e.key === 'Enter') {\n+                sendMessage();\n+            }\n+        });\n+        \n+        // Obsługa uploadu zdjęć\n+        imageUpload.addEventListener('change', handleImageUpload);\n+        \n+        // Obsługa usuwania zdjęcia\n+        removeImageBtn.addEventListener('click', removeSelectedImage);\n+        \n+        // Ustaw focus na pole wprowadzania\n+        userInput.focus();\n+    })();\n+    </script>\n+</body>\n+</html>`;\n+\n+    res.send(chatHtml);\n+});\n+\n+// Add API endpoint for Gemini with image support\n+app.post('/api/chat', tempUpload.single('image'), async (req, res) => {\n+    try {\n+        const userMessage = req.body.message || '';\n+\n+        // Podstawowa instrukcja dla modelu\n+        let instruction = \"Odpowiadaj zawsze w języku polskim, bez względu na język zapytania. Twoje odpowiedzi powinny być pomocne, dokładne i przyjazne oraz dopracowane i zrozumiale.\";\n+\n+        const fullMessage = instruction + \" \" + userMessage;\n+\n+        let apiRequestBody = {\n+            contents: [\n+                {\n+                    parts: [\n+                        {\n+                            text: fullMessage\n+                        }\n+                    ]\n+                }\n+            ],\n+            generationConfig: {\n+                temperature: 0.7,\n+                topK: 40,\n+                topP: 0.95,\n+                maxOutputTokens: 8192\n+            }\n+        };\n+\n+        // If image is present, add it to the API request\n+        if (req.file) {\n+            const imagePath = path.join(__dirname, req.file.path);\n+            const imageBuffer = fs.readFileSync(imagePath);\n+            const base64Image = imageBuffer.toString('base64');\n+\n+            // Modify the request to include image\n+            apiRequestBody.contents[0].parts = [\n+                {\n+                    text: fullMessage || \"Opisz to zdjęcie w języku polskim\"\n+                },\n+                {\n+                    inlineData: {\n+                        mimeType: req.file.mimetype,\n+                        data: base64Image\n+                    }\n+                }\n+            ];\n+        }\n+\n+        // Determine the appropriate model based on whether an image is included\n+        const apiModel = req.file ? 'gemini-1.5-pro-latest' : 'gemini-1.5-flash-latest';\n+\n+        const response = await axios.post(\n+            `https://generativelanguage.googleapis.com/v1beta/models/${apiModel}:generateContent?key=${GEMINI_API_KEY}`,\n+            apiRequestBody,\n+            {\n+                headers: {\n+                    'Content-Type': 'application/json'\n+                }\n+            }\n+        );\n+\n+        // Extract the AI's response text\n+        let aiReply = response.data.candidates[0].content.parts[0].text;\n+\n+        // Format code blocks properly\n+        // Replace markdown code blocks with styled HTML code containers\n+        aiReply = aiReply.replace(/```c\\+\\+/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```cpp/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/KOD C\\+\\+:/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```python/g, '<div class=\"code-container\"><div class=\"code-header\"><span>Python</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```javascript/g, '<div class=\"code-container\"><div class=\"code-header\"><span>JavaScript</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```html/g, '<div class=\"code-container\"><div class=\"code-header\"><span>HTML</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```css/g, '<div class=\"code-container\"><div class=\"code-header\"><span>CSS</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```/g, '</code></pre><div class=\"code-footer\"><div class=\"mini-counter\"><i class=\"fas fa-code\"></i> kod</div></div></div>');\n+\n+        // If image was uploaded temporarily, delete it after processing\n+        if (req.file) {\n+            fs.unlink(path.join(__dirname, req.file.path), (err) => {\n+                if (err) console.error('Error deleting temporary image:', err);\n+            });\n+        }\n+\n+        res.json({ reply: aiReply });\n+    } catch (error) {\n+        console.error('Error calling Gemini API:', error);\n+        res.status(500).json({ error: 'Failed to get response from Gemini', reply: 'Przepraszam, wystąpił błąd. Spróbuj ponownie później.' });\n+    }\n+});\n+\n+app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));\n"
                },
                {
                    "date": 1743960539182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1073,1386 +1073,69 @@\n                    now.getMinutes().toString().padStart(2, '0');\n         }\n         \n         // Funkcja do dodawania wiadomości\n-// Function to add messages\n-function addMessage(text, isUser, imageUrl = null) {\n-    const messageDiv = document.createElement('div');\n-    messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n-\n-    const contentDiv = document.createElement('div');\n-\n-    if (isUser) {\n-        contentDiv.textContent = text; // User messages are plain text\n-    } else {\n-        // For AI messages, use marked.js to format Markdown\n-        const renderer = new marked.Renderer();\n-\n-        marked.setOptions({\n-            renderer: renderer,\n-            breaks: true,\n-            gfm: true\n-        });\n-\n-        // Process the text to handle code blocks\n-        let processedText = text;\n-\n-        // Ensure code blocks are wrapped in triple backticks\n-        processedText = processedText.replace(/```(.*?)```/g, '<div class=\"code-container\"><pre class=\"code-block\"><code>$1</code></pre></div>');\n-        \n-        // Apply Markdown formatting\n-        processedText = marked(processedText);\n-        \n-        contentDiv.innerHTML = processedText; // Set the formatted HTML\n-    }\n-    \n-    const timeDiv = document.createElement('div');\n-    timeDiv.className = 'message-time';\n-    timeDiv.textContent = formatTime();\n-    \n-    messageDiv.appendChild(contentDiv);\n-    messageDiv.appendChild(timeDiv);\n-    \n-    chatArea.appendChild(messageDiv);\n-    chatArea.scrollTop = chatArea.scrollHeight;\n-}\n-        \n-        // Funkcja do wysyłania wiadomości\n-        function sendMessage() {\n-            const message = userInput.value.trim();\n-            if (!message && !selectedImage) return;\n+        function addMessage(text, isUser, imageUrl = null) {\n+            const messageDiv = document.createElement('div');\n+            messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n             \n-            // Dodaj wiadomość użytkownika\n-            const imageUrl = selectedImage ? URL.createObjectURL(selectedImage) : null;\n-            addMessage(message, true, imageUrl);\n+            const contentDiv = document.createElement('div');\n             \n-            // Wyczyść pole wprowadzania\n-            userInput.value = '';\n-            \n-            // Przygotuj dane do wysłania\n-            const formData = new FormData();\n-            formData.append('message', message);\n-            \n-            // Dodaj zdjęcie jeśli zostało wybrane\n-            if (selectedImage) {\n-                formData.append('image', selectedImage);\n+            if (isUser) {\n+                contentDiv.textContent = text;\n+                \n+                // Dodaj zdjęcie jeśli zostało wybrane\n+                if (imageUrl) {\n+                    const img = document.createElement('img');\n+                    img.src = imageUrl;\n+                    img.className = 'user-message-image';\n+                    img.alt = 'Przesłane zdjęcie';\n+                    messageDiv.appendChild(img);\n+                }\n+            } else {\n+                // Dla wiadomości AI używamy marked.js do formatowania Markdown\n+                // Skonfiguruj marked.js do obsługi pogrubienia i innych stylów Markdown\n+                const renderer = new marked.Renderer();\n+                \n+                // Użyj marked do konwersji Markdown na HTML\n+                marked.setOptions({\n+                    renderer: renderer,\n+                    breaks: true,\n+                    gfm: true\n+                });\n+                \n+                // Przetwórz tekst na HTML z zachowaniem bloków kodu\n+                let processedText = text;\n+                \n+                // Najpierw zabezpiecz bloki kodu, aby marked ich nie przetwarzał\n+                const codeBlocks = [];\n+                processedText = processedText.replace(/<div class=\"code-container\">[\\\\s\\\\S]*?<\\\\/div>/g, function(match) {\n+                    codeBlocks.push(match);\n+                    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n+                });\n+                \n+                // Zastosuj formatowanie Markdown\n+                processedText = marked.parse(processedText);\n+                \n+                // Przywróć bloki kodu\n+                processedText = processedText.replace(/{{CODE_BLOCK_(\\\\d+)}}/g, function(match, index) {\n+                    return codeBlocks[parseInt(index)];\n+                });\n+                \n+                contentDiv.innerHTML = processedText;\n             }\n             \n-            // Ukryj podgląd zdjęcia\n-            imagePreview.style.display = 'none';\n-            selectedImage = null;\n-            \n-            // Dodaj wiadomość ładowania\n-            const loadingId = Date.now();\n-            const loadingDiv = document.createElement('div');\n-            loadingDiv.className = 'message ai-message';\n-            loadingDiv.id = 'loading-' + loadingId;\n-            \n-            const loadingContent = document.createElement('div');\n-            loadingContent.innerHTML = '<div class=\"typing-indicator\"><span>.</span><span>.</span><span>.</span></div>';\n-            \n             const timeDiv = document.createElement('div');\n             timeDiv.className = 'message-time';\n             timeDiv.textContent = formatTime();\n             \n-            loadingDiv.appendChild(loadingContent);\n-            loadingDiv.appendChild(timeDiv);\n+            messageDiv.appendChild(contentDiv);\n+            messageDiv.appendChild(timeDiv);\n             \n-            chatArea.appendChild(loadingDiv);\n+            chatArea.appendChild(messageDiv);\n             chatArea.scrollTop = chatArea.scrollHeight;\n-            \n-            // Wyślij zapytanie do API\n-            fetch('/api/chat', {\n-                method: 'POST',\n-                body: formData\n-            })\n-            .then(function(response) {\n-                return response.json();\n-            })\n-            .then(function(data) {\n-                // Usuń wiadomość ładowania\n-                const loadingMessage = document.getElementById('loading-' + loadingId);\n-                if (loadingMessage) loadingMessage.remove();\n-                \n-                // Dodaj odpowiedź AI\n-                addMessage(data.reply, false);\n-            })\n-            .catch(function(error) {\n-                console.error('Error:', error);\n-                // Usuń wiadomość ładowania\n-                const loadingMessage = document.getElementById('loading-' + loadingId);\n-                if (loadingMessage) loadingMessage.remove();\n-                \n-                // Dodaj komunikat o błędzie\n-                addMessage('Przepraszam, wystąpił błąd. Spróbuj ponownie.', false);\n-            });\n         }\n         \n-        // Obsługa wyboru zdjęcia\n-        function handleImageUpload(event) {\n-            const file = event.target.files[0];\n-            if (!file) return;\n-            \n-            // Akceptuj tylko obrazy\n-            if (!file.type.startsWith('image/')) {\n-                alert('Proszę wybrać plik obrazu');\n-                return;\n-            }\n-            \n-            // Pokaż podgląd zdjęcia\n-            const reader = new FileReader();\n-            reader.onload = function(e) {\n-                previewImg.src = e.target.result;\n-                imagePreview.style.display = 'block';\n-                selectedImage = file;\n-            };\n-            reader.readAsDataURL(file);\n-        }\n-        \n-        // Usunięcie wybranego zdjęcia\n-        function removeSelectedImage() {\n-            imagePreview.style.display = 'none';\n-            imageUpload.value = '';\n-            selectedImage = null;\n-        }\n-        \n-        // Obsługa przycisku wysyłania\n-        sendButton.addEventListener('click', sendMessage);\n-        \n-        // Obsługa klawisza Enter\n-        userInput.addEventListener('keypress', function(e) {\n-            if (e.key === 'Enter') {\n-                sendMessage();\n-            }\n-        });\n-        \n-        // Obsługa uploadu zdjęć\n-        imageUpload.addEventListener('change', handleImageUpload);\n-        \n-        // Obsługa usuwania zdjęcia\n-        removeImageBtn.addEventListener('click', removeSelectedImage);\n-        \n-        // Ustaw focus na pole wprowadzania\n-        userInput.focus();\n-    })();\n-    </script>\n-</body>\n-</html>`;\n-\n-    res.send(chatHtml);\n-});\n-\n-// Add API endpoint for Gemini with image support\n-app.post('/api/chat', tempUpload.single('image'), async (req, res) => {\n-    try {\n-        const userMessage = req.body.message || '';\n-\n-        // Podstawowa instrukcja dla modelu\n-        let instruction = \"Odpowiadaj zawsze w języku polskim, bez względu na język zapytania. Twoje odpowiedzi powinny być pomocne, dokładne i przyjazne oraz dopracowane i zrozumiale.\";\n-\n-        const fullMessage = instruction + \" \" + userMessage;\n-\n-        let apiRequestBody = {\n-            contents: [\n-                {\n-                    parts: [\n-                        {\n-                            text: fullMessage\n-                        }\n-                    ]\n-                }\n-            ],\n-            generationConfig: {\n-                temperature: 0.7,\n-                topK: 40,\n-                topP: 0.95,\n-                maxOutputTokens: 8192\n-            }\n-        };\n-\n-        // If image is present, add it to the API request\n-        if (req.file) {\n-            const imagePath = path.join(__dirname, req.file.path);\n-            const imageBuffer = fs.readFileSync(imagePath);\n-            const base64Image = imageBuffer.toString('base64');\n-\n-            // Modify the request to include image\n-            apiRequestBody.contents[0].parts = [\n-                {\n-                    text: fullMessage || \"Opisz to zdjęcie w języku polskim\"\n-                },\n-                {\n-                    inlineData: {\n-                        mimeType: req.file.mimetype,\n-                        data: base64Image\n-                    }\n-                }\n-            ];\n-        }\n-\n-        // Determine the appropriate model based on whether an image is included\n-        const apiModel = req.file ? 'gemini-1.5-pro-latest' : 'gemini-1.5-flash-latest';\n-\n-        const response = await axios.post(\n-            `https://generativelanguage.googleapis.com/v1beta/models/${apiModel}:generateContent?key=${GEMINI_API_KEY}`,\n-            apiRequestBody,\n-            {\n-                headers: {\n-                    'Content-Type': 'application/json'\n-                }\n-            }\n-        );\n-\n-        // Extract the AI's response text\n-        let aiReply = response.data.candidates[0].content.parts[0].text;\n-\n-        // Format code blocks properly\n-        // Replace markdown code blocks with styled HTML code containers\n-        aiReply = aiReply.replace(/```c\\+\\+/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```cpp/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/KOD C\\+\\+:/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```python/g, '<div class=\"code-container\"><div class=\"code-header\"><span>Python</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```javascript/g, '<div class=\"code-container\"><div class=\"code-header\"><span>JavaScript</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```html/g, '<div class=\"code-container\"><div class=\"code-header\"><span>HTML</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```css/g, '<div class=\"code-container\"><div class=\"code-header\"><span>CSS</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```/g, '</code></pre><div class=\"code-footer\"><div class=\"mini-counter\"><i class=\"fas fa-code\"></i> kod</div></div></div>');\n-\n-        // If image was uploaded temporarily, delete it after processing\n-        if (req.file) {\n-            fs.unlink(path.join(__dirname, req.file.path), (err) => {\n-                if (err) console.error('Error deleting temporary image:', err);\n-            });\n-        }\n-\n-        res.json({ reply: aiReply });\n-    } catch (error) {\n-        console.error('Error calling Gemini API:', error);\n-        res.status(500).json({ error: 'Failed to get response from Gemini', reply: 'Przepraszam, wystąpił błąd. Spróbuj ponownie później.' });\n-    }\n-});\n-\n-app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));\n-const express = require('express');\n-const path = require('path');\n-const fs = require('fs');\n-const multer = require('multer');\n-const axios = require('axios'); // Add axios for API requests\n-const marked = require('marked'); // Biblioteka do formatowania markdown\n-\n-const app = express();\n-const PORT = process.env.PORT || 3000;\n-const GEMINI_API_KEY = 'AIzaSyAP1EOpnlAhNRh9MI41v8EHtyRGylNR_bA';\n-\n-// Upewnij się, że istnieje folder temp\n-if (!fs.existsSync('temp')) {\n-    fs.mkdirSync('temp');\n-}\n-\n-// Configure multer to preserve original filename for file panel\n-const storage = multer.diskStorage({\n-    destination: (req, file, cb) => {\n-        // Make sure the \"pliki\" directory exists\n-        if (!fs.existsSync('pliki')) {\n-            fs.mkdirSync('pliki');\n-        }\n-        cb(null, 'pliki/');\n-    },\n-    filename: (req, file, cb) => {\n-        cb(null, file.originalname);\n-    }\n-});\n-const upload = multer({ storage: storage });\n-\n-// Configure multer for temporary image uploads\n-const tempStorage = multer.diskStorage({\n-    destination: (req, file, cb) => {\n-        cb(null, 'temp/');\n-    },\n-    filename: (req, file, cb) => {\n-        cb(null, Date.now() + '-' + file.originalname);\n-    }\n-});\n-const tempUpload = multer({ storage: tempStorage });\n-\n-app.use(express.urlencoded({ extended: true }));\n-app.use(express.json());\n-app.use(express.static('public', { index: false }));\n-\n-// Modern clean styles\n-const modernStyles = `\n-<style>\n-    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n-\n-    * {\n-        box-sizing: border-box;\n-        margin: 0;\n-        padding: 0;\n-    }\n-\n-    :root {\n-        --bg-dark: #121212;\n-        --bg-card: #1e1e2d;\n-        --accent-primary: #6366f1;\n-        --accent-secondary: #8b5cf6;\n-        --text-primary: #f3f4f6;\n-        --text-secondary: #d1d5db;\n-        --text-muted: #9ca3af;\n-        --border-color: #2d2d3d;\n-        --danger: #ef4444;\n-    }\n-\n-    body {\n-        font-family: 'Inter', sans-serif;\n-        background: linear-gradient(135deg, #121212 0%, #1a1a2e 100%);\n-        color: var(--text-primary);\n-        line-height: 1.6;\n-        min-height: 100vh;\n-    }\n-\n-    .container {\n-        width: 90%;\n-        max-width: 1200px;\n-        margin: 2rem auto;\n-        padding: 2rem;\n-        background: var(--bg-card);\n-        border-radius: 12px;\n-        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);\n-        border: 1px solid var(--border-color);\n-    }\n-\n-    h1 {\n-        text-align: center;\n-        margin-bottom: 2rem;\n-        background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));\n-        -webkit-background-clip: text;\n-        -webkit-text-fill-color: transparent;\n-        font-weight: 700;\n-    }\n-\n-    a {\n-        text-decoration: none;\n-    }\n-\n-    .btn {\n-        display: inline-block;\n-        padding: 0.6rem 1.2rem;\n-        margin: 0.3rem;\n-        border: none;\n-        border-radius: 6px;\n-        font-weight: 500;\n-        font-size: 0.9rem;\n-        cursor: pointer;\n-        transition: all 0.2s ease;\n-    }\n-\n-    .btn-primary {\n-        background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));\n-        color: white;\n-    }\n-\n-    .btn-secondary {\n-        background: rgba(255, 255, 255, 0.08);\n-        color: var(--text-primary);\n-        border: 1px solid var(--border-color);\n-    }\n-\n-    .btn-danger {\n-        background: var(--danger);\n-        color: white;\n-    }\n-\n-    .btn:hover {\n-        transform: translateY(-2px);\n-        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n-    }\n-\n-    .btn-primary:hover {\n-        background: linear-gradient(to right, #5254cc, #7e4fdb);\n-    }\n-\n-    .btn-secondary:hover {\n-        background: rgba(255, 255, 255, 0.12);\n-    }\n-\n-    table {\n-        width: 100%;\n-        border-collapse: collapse;\n-        margin: 1.5rem 0;\n-        border-radius: 8px;\n-        overflow: hidden;\n-    }\n-\n-    th, td {\n-        padding: 1rem;\n-        text-align: left;\n-        border-bottom: 1px solid var(--border-color);\n-    }\n-\n-    th {\n-        background-color: rgba(255, 255, 255, 0.05);\n-        font-weight: 600;\n-        color: var(--text-primary);\n-    }\n-\n-    tr:hover {\n-        background-color: rgba(255, 255, 255, 0.03);\n-    }\n-\n-    input[type=\"text\"], \n-    input[type=\"file\"] {\n-        width: 100%;\n-        padding: 0.8rem;\n-        margin: 0.8rem 0;\n-        background: rgba(255, 255, 255, 0.05);\n-        border: 1px solid var(--border-color);\n-        border-radius: 6px;\n-        color: var(--text-primary);\n-        font-family: 'Inter', sans-serif;\n-    }\n-\n-    input[type=\"text\"]:focus,\n-    input[type=\"file\"]:focus,\n-    textarea:focus {\n-        outline: none;\n-        border-color: var(--accent-primary);\n-        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);\n-    }\n-\n-    textarea {\n-        width: 100%;\n-        height: 70vh;\n-        min-height: 400px;\n-        padding: 0.8rem;\n-        margin: 0.8rem 0;\n-        background: rgba(255, 255, 255, 0.05);\n-        border: 1px solid var(--border-color);\n-        border-radius: 6px;\n-        color: var(--text-primary);\n-        font-family: monospace;\n-        resize: vertical;\n-    }\n-\n-    form button[type=\"submit\"] {\n-        background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));\n-        color: white;\n-        padding: 0.8rem 1.5rem;\n-        border: none;\n-        border-radius: 6px;\n-        cursor: pointer;\n-        font-weight: 500;\n-        transition: all 0.2s ease;\n-    }\n-\n-    form button[type=\"submit\"]:hover {\n-        background: linear-gradient(to right, #5254cc, #7e4fdb);\n-        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n-    }\n-\n-    .actions {\n-        display: flex;\n-        flex-wrap: wrap;\n-        justify-content: flex-start;\n-        gap: 0.3rem;\n-    }\n-\n-    .header-actions {\n-        display: flex;\n-        justify-content: space-between;\n-        align-items: center;\n-        margin-bottom: 1.5rem;\n-        background: rgba(0, 0, 0, 0.2);\n-        padding: 1rem;\n-        border-radius: 8px;\n-        border: 1px solid var(--border-color);\n-    }\n-\n-    .fade-in {\n-        animation: fadeIn 0.3s ease forwards;\n-    }\n-\n-    @keyframes fadeIn {\n-        from { opacity: 0; transform: translateY(10px); }\n-        to { opacity: 1; transform: translateY(0); }\n-    }\n-</style>\n-`;\n-\n-app.get('/', (req, res) => {\n-    res.send(`\n-<html>\n-<head>\n-    <title>Files Portal</title>\n-    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-    ${modernStyles}\n-</head>\n-<body>\n-    <div class=\"container fade-in\">\n-        <h1>Welcome to Files Portal</h1>\n-        <div style=\"text-align: center; margin-top: 2rem; display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\n-            <a href=\"/panel\" class=\"btn btn-primary\">Go to File Management</a>\n-            <a href=\"/chat\" class=\"btn btn-primary\" style=\"background: linear-gradient(to right, #9333ea, #3b82f6);\">\n-                <span style=\"display: flex; align-items: center; gap: 8px;\">\n-                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n-                        <path d=\"M8 1a5 5 0 0 0-5 5v1h1a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V6a6 6 0 1 1 12 0v6a2.5 2.5 0 0 1-2.5 2.5H9.366a1 1 0 0 1-.866.5h-1a1 1 0 1 1 0-2h1a1 1 0 0 1 .866.5H11.5A1.5 1.5 0 0 0 13 12h-1a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1h1V6a5 5 0 0 0-5-5z\"/>\n-                    </svg>\n-                    Chat with YutAi\n-                </span>\n-            </a>\n-        </div>\n-    </div>\n-</body>\n-</html>\n-`);\n-});\n-\n-app.get('/panel', (req, res) => {\n-    fs.readdir('pliki', (err, files) => {\n-        if (err) {\n-            if (err.code === 'ENOENT') {\n-                // Directory doesn't exist, create it\n-                fs.mkdirSync('pliki');\n-                files = [];\n-            } else {\n-                return res.send('Error loading files.');\n-            }\n-        }\n-\n-        const fileRows = files.map(file => `\n-<tr class=\"fade-in\">\n-    <td>${file}</td>\n-    <td class=\"actions\">\n-            <a href=\"/files/${encodeURIComponent(file)}\" download class=\"btn btn-secondary\">Download</a>\n-            <a href=\"/panel/edit/${encodeURIComponent(file)}\" class=\"btn btn-secondary\">Edit</a>\n-            <a href=\"/panel/rename/${encodeURIComponent(file)}\" class=\"btn btn-secondary\">Rename</a>\n-            <a href=\"/panel/redirect/${encodeURIComponent(file)}\" class=\"btn btn-secondary\">Open</a>\n-            <a href=\"/panel/delete/${encodeURIComponent(file)}\" class=\"btn btn-danger\">Delete</a>\n-    </td>\n-</tr>\n-`).join('');\n-\n-        res.send(`\n-<html>\n-<head>\n-        <title>File Management</title>\n-        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-        ${modernStyles}\n-</head>\n-<body>\n-        <div class=\"container fade-in\">\n-            <h1>File Management</h1>\n-            \n-            <div class=\"header-actions\">\n-                <div>\n-                    <a href=\"/panel/create\" class=\"btn btn-primary\">Create New File</a>\n-                    <a href=\"/\" class=\"btn btn-secondary\">Powrót do strony głównej</a>\n-                </div>\n-                \n-                <form action=\"/panel/upload\" method=\"POST\" enctype=\"multipart/form-data\" style=\"display: flex; align-items: center; gap: 10px;\">\n-                    <input type=\"file\" name=\"file\" required style=\"margin: 0;\">\n-                    <button type=\"submit\" class=\"btn btn-primary\">Upload</button>\n-        </form>\n-    </div>\n-\n-        <table>\n-            <tr>\n-                <th>File Name</th>\n-                <th>Actions</th>\n-            </tr>\n-            ${fileRows}\n-        </table>\n-    </div>\n-</body>\n-</html>\n-`);\n-    });\n-});\n-\n-app.get('/panel/create', (req, res) => {\n-    res.send(`\n-<html>\n-<head>\n-    <title>Create New File</title>\n-    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-    ${modernStyles}\n-</head>\n-<body>\n-    <div class=\"container fade-in\">\n-        <h1>Create New File</h1>\n-        <form action=\"/panel/create\" method=\"POST\">\n-            <input type=\"text\" name=\"filename\" placeholder=\"File name\" required>\n-            <textarea name=\"content\" placeholder=\"File content\"></textarea>\n-            <div style=\"display: flex; justify-content: space-between; margin-top: 1rem;\">\n-                <a href=\"/panel\" class=\"btn btn-secondary\">Back</a>\n-                <button type=\"submit\" class=\"btn btn-primary\">Create</button>\n-            </div>\n-        </form>\n-    </div>\n-</body>\n-</html>\n-`);\n-});\n-\n-// Obsługa tworzenia plików\n-app.post('/panel/create', (req, res) => {\n-    const { filename, content } = req.body;\n-    if (!filename) return res.send('File name is required!');\n-\n-    const filePath = path.join(__dirname, 'pliki', filename);\n-\n-    // Sprawdź czy plik już istnieje\n-    fs.access(filePath, fs.constants.F_OK, (err) => {\n-        if (!err) return res.send('File already exists!');\n-\n-        fs.writeFile(filePath, content || '', (err) => {\n-            if (err) return res.send('Error creating file!');\n-            res.redirect('/panel');\n-        });\n-    });\n-});\n-\n-app.get('/panel/edit/:filename', (req, res) => {\n-    fs.readFile(path.join(__dirname, 'pliki', req.params.filename), 'utf8', (err, data) => {\n-        if (err) return res.send('Error reading file.');\n-        res.send(`\n-<html>\n-<head>\n-    <title>Edit File</title>\n-    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-    ${modernStyles}\n-</head>\n-<body>\n-    <div class=\"container fade-in\">\n-        <h1>Edit File: ${req.params.filename}</h1>\n-        <form action=\"/panel/edit/${encodeURIComponent(req.params.filename)}\" method=\"POST\">\n-            <textarea name=\"content\">${data}</textarea>\n-            <div style=\"display: flex; justify-content: space-between; margin-top: 1rem;\">\n-                <a href=\"/panel\" class=\"btn btn-secondary\">Back</a>\n-                <button type=\"submit\" class=\"btn btn-primary\">Save</button>\n-            </div>\n-        </form>\n-    </div>\n-</body>\n-</html>\n-`);\n-    });\n-});\n-\n-app.get('/panel/rename/:filename', (req, res) => {\n-    res.send(`\n-<html>\n-<head>\n-    <title>Rename File</title>\n-    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-    ${modernStyles}\n-</head>\n-<body>\n-    <div class=\"container fade-in\">\n-        <h1>Rename File: ${req.params.filename}</h1>\n-        <form action=\"/panel/rename/${encodeURIComponent(req.params.filename)}\" method=\"POST\">\n-            <input type=\"text\" name=\"newName\" placeholder=\"New file name\" required>\n-            <div style=\"display: flex; justify-content: space-between; margin-top: 1rem;\">\n-                <a href=\"/panel\" class=\"btn btn-secondary\">Back</a>\n-                <button type=\"submit\" class=\"btn btn-primary\">Rename</button>\n-            </div>\n-        </form>\n-    </div>\n-</body>\n-</html>\n-`);\n-});\n-\n-// Pozostałe endpointy\n-app.post('/panel/upload', upload.single('file'), (req, res) => res.redirect('/panel'));\n-\n-app.get('/panel/delete/:filename', (req, res) => {\n-    fs.unlink(path.join(__dirname, 'pliki', req.params.filename), (err) => {\n-        res.redirect('/panel');\n-    });\n-});\n-\n-app.post('/panel/edit/:filename', (req, res) => {\n-    fs.writeFile(path.join(__dirname, 'pliki', req.params.filename), req.body.content, 'utf8', (err) => {\n-        res.redirect('/panel');\n-    });\n-});\n-\n-app.post('/panel/rename/:filename', (req, res) => {\n-    fs.rename(\n-        path.join(__dirname, 'pliki', req.params.filename),\n-        path.join(__dirname, 'pliki', req.body.newName),\n-        () => res.redirect('/panel')\n-    );\n-});\n-\n-app.get('/panel/redirect/:filename', (req, res) => {\n-    res.redirect(`/files/${encodeURIComponent(req.params.filename)}`);\n-});\n-\n-// Dodaj endpoint do udostępniania plików z folderu pliki\n-app.use('/files', express.static('pliki'));\n-\n-// Add Gemini chat page\n-app.get('/chat', (req, res) => {\n-    const chatHtml = `<!DOCTYPE html>\n-<html>\n-<head>\n-    <title>YutAi - Inteligentny Asystent</title>\n-    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n-    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n-    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n-    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n-    ${modernStyles}\n-    <style>\n-      body {\n-          font-family: 'Poppins', sans-serif;\n-          background: linear-gradient(125deg, #0f0c29, #302b63, #24243e);\n-          color: #fff;\n-          line-height: 1.6;\n-          min-height: 100vh;\n-          margin: 0;\n-          padding: 0;\n-          display: flex;\n-          align-items: center;\n-          justify-content: center;\n-          animation: gradientBG 15s ease infinite;\n-          background-size: 400% 400%;\n-      }\n-      \n-      @keyframes gradientBG {\n-          0% { background-position: 0% 50%; }\n-          50% { background-position: 100% 50%; }\n-          100% { background-position: 0% 50%; }\n-      }\n-      \n-      .container {\n-          width: 95%;\n-          max-width: 1100px;\n-          margin: 2rem auto;\n-          padding: 0;\n-          background: rgba(15, 23, 42, 0.7);\n-          border-radius: 20px;\n-          box-shadow: 0 15px 50px rgba(0, 0, 0, 0.4);\n-          backdrop-filter: blur(10px);\n-          border: 1px solid rgba(255, 255, 255, 0.1);\n-          overflow: hidden;\n-          display: flex;\n-          flex-direction: column;\n-          height: 90vh;\n-      }\n-      \n-      .header {\n-          padding: 1.5rem 2rem;\n-          display: flex;\n-          justify-content: space-between;\n-          align-items: center;\n-          border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n-          background: rgba(15, 23, 42, 0.5);\n-      }\n-      \n-      .logo {\n-          display: flex;\n-          align-items: center;\n-          gap: 10px;\n-      }\n-      \n-      .logo-icon {\n-          font-size: 1.8rem;\n-          background: linear-gradient(to right, #6366f1, #8b5cf6, #ec4899);\n-          -webkit-background-clip: text;\n-          -webkit-text-fill-color: transparent;\n-      }\n-      \n-      h1 {\n-          margin: 0;\n-          font-size: 1.8rem;\n-          background: linear-gradient(to right, #6366f1, #8b5cf6, #ec4899);\n-          -webkit-background-clip: text;\n-          -webkit-text-fill-color: transparent;\n-          font-weight: 700;\n-      }\n-      \n-      .status {\n-          display: flex;\n-          align-items: center;\n-          gap: 6px;\n-          font-size: 0.9rem;\n-          color: #a5b4fc;\n-          background: rgba(99, 102, 241, 0.1);\n-          padding: 5px 10px;\n-          border-radius: 20px;\n-          border: 1px solid rgba(99, 102, 241, 0.2);\n-      }\n-      \n-      .status-dot {\n-          width: 8px;\n-          height: 8px;\n-          background: #22c55e;\n-          border-radius: 50%;\n-          animation: pulse 2s infinite;\n-      }\n-      \n-      .chat-area {\n-          flex: 1;\n-          overflow-y: auto;\n-          padding: 1.5rem 2rem;\n-          scroll-behavior: smooth;\n-          position: relative;\n-          background-image: url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.03'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n-      }\n-      \n-      .chat-area::-webkit-scrollbar {\n-          width: 6px;\n-      }\n-      \n-      .chat-area::-webkit-scrollbar-track {\n-          background: rgba(255, 255, 255, 0.05);\n-          border-radius: 10px;\n-      }\n-      \n-      .chat-area::-webkit-scrollbar-thumb {\n-          background: rgba(99, 102, 241, 0.3);\n-          border-radius: 10px;\n-      }\n-      \n-      .chat-area::-webkit-scrollbar-thumb:hover {\n-          background: rgba(99, 102, 241, 0.5);\n-      }\n-      \n-      .message {\n-          margin-bottom: 1.5rem;\n-          padding: 1rem 1.2rem;\n-          border-radius: 15px;\n-          max-width: 80%;\n-          position: relative;\n-          animation: fadeIn 0.3s ease forwards;\n-          line-height: 1.5;\n-      }\n-      \n-      @keyframes fadeIn {\n-          from { opacity: 0; transform: translateY(10px); }\n-          to { opacity: 1; transform: translateY(0); }\n-      }\n-      \n-      .user-message {\n-          background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);\n-          margin-left: auto;\n-          border-top-right-radius: 0;\n-          box-shadow: 0 5px 15px rgba(99, 102, 241, 0.3);\n-          color: white;\n-      }\n-      \n-      .ai-message {\n-          background: rgba(255, 255, 255, 0.05);\n-          margin-right: auto;\n-          border-top-left-radius: 0;\n-          border: 1px solid rgba(255, 255, 255, 0.1);\n-          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n-      }\n-      \n-      .message-time {\n-          font-size: 0.7rem;\n-          opacity: 0.7;\n-          margin-top: 5px;\n-          text-align: right;\n-      }\n-      \n-      .footer {\n-          padding: 1.5rem 2rem;\n-          border-top: 1px solid rgba(255, 255, 255, 0.1);\n-          background: rgba(15, 23, 42, 0.5);\n-      }\n-      \n-      .input-area {\n-          display: flex;\n-          gap: 10px;\n-          position: relative;\n-      }\n-      \n-      .input-area input {\n-          flex-grow: 1;\n-          padding: 1rem 1rem 1rem 3rem;\n-          border: 1px solid rgba(255, 255, 255, 0.1);\n-          border-radius: 15px;\n-          background: rgba(15, 23, 42, 0.6);\n-          color: #fff;\n-          font-family: 'Poppins', sans-serif;\n-          font-size: 1rem;\n-          transition: all 0.3s ease;\n-      }\n-      \n-      .input-area input:focus {\n-          outline: none;\n-          border-color: #6366f1;\n-          box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.3);\n-      }\n-      \n-      .input-icon {\n-          position: absolute;\n-          left: 1rem;\n-          top: 50%;\n-          transform: translateY(-50%);\n-          color: #6366f1;\n-          font-size: 1.2rem;\n-      }\n-      \n-      .input-area button {\n-          padding: 0 1.5rem;\n-          border: none;\n-          border-radius: 15px;\n-          background: linear-gradient(to right, #6366f1, #8b5cf6, #ec4899);\n-          color: white;\n-          font-weight: 600;\n-          cursor: pointer;\n-          transition: all 0.3s ease;\n-          display: flex;\n-          align-items: center;\n-          gap: 10px;\n-      }\n-      \n-      .input-area button:hover {\n-          transform: translateY(-2px);\n-          box-shadow: 0 5px 15px rgba(99, 102, 241, 0.4);\n-      }\n-      \n-      .input-area button i {\n-          font-size: 1.2rem;\n-      }\n-      \n-      .tools-bar {\n-          display: flex;\n-          justify-content: space-between;\n-          margin-top: 1rem;\n-      }\n-      \n-      .image-preview {\n-          display: none;\n-          position: relative;\n-          margin-top: 10px;\n-          max-width: 200px;\n-          border-radius: 12px;\n-          overflow: hidden;\n-          border: 1px solid rgba(255, 255, 255, 0.1);\n-          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n-      }\n-      \n-      .image-preview img {\n-          width: 100%;\n-          display: block;\n-      }\n-      \n-      .image-preview-close {\n-          position: absolute;\n-          top: 5px;\n-          right: 5px;\n-          background: rgba(0, 0, 0, 0.6);\n-          border: none;\n-          color: white;\n-          width: 24px;\n-          height: 24px;\n-          border-radius: 50%;\n-          font-size: 16px;\n-          cursor: pointer;\n-          display: flex;\n-          align-items: center;\n-          justify-content: center;\n-      }\n-      \n-      .file-upload {\n-          position: relative;\n-          overflow: hidden;\n-      }\n-      \n-      .file-upload input[type=file] {\n-          position: absolute;\n-          left: 0;\n-          top: 0;\n-          opacity: 0;\n-          width: 100%;\n-          height: 100%;\n-          cursor: pointer;\n-      }\n-      \n-      .file-upload-btn {\n-          display: flex;\n-          align-items: center;\n-          gap: 6px;\n-          background: rgba(99, 102, 241, 0.1);\n-          color: #a5b4fc;\n-          border: 1px solid rgba(99, 102, 241, 0.2);\n-          border-radius: 10px;\n-          padding: 6px 12px;\n-          font-size: 0.9rem;\n-          cursor: pointer;\n-          transition: all 0.3s ease;\n-      }\n-      \n-      .file-upload-btn:hover {\n-          background: rgba(99, 102, 241, 0.2);\n-          color: #c7d2fe;\n-      }\n-      \n-      .user-message-image {\n-          max-width: 200px;\n-          border-radius: 8px;\n-          margin-top: 10px;\n-          display: block;\n-      }\n-      \n-      .code-block {\n-          background: rgba(15, 23, 42, 0.8);\n-          padding: 1rem;\n-          border-radius: 8px;\n-          margin: 1rem 0;\n-          white-space: pre-wrap;\n-          font-family: 'JetBrains Mono', monospace;\n-          font-size: 0.9rem;\n-          line-height: 1.5;\n-          color: #e2e8f0;\n-          border-left: 3px solid #6366f1;\n-      }\n-      \n-      .code-container {\n-          margin: 15px 0;\n-          border-radius: 12px;\n-          overflow: hidden;\n-          border: 1px solid rgba(255, 255, 255, 0.1);\n-          background: rgba(15, 23, 42, 0.6);\n-      }\n-      \n-      .code-header {\n-          display: flex;\n-          justify-content: space-between;\n-          align-items: center;\n-          padding: 10px 15px;\n-          background: rgba(15, 23, 42, 0.8);\n-          border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n-      }\n-      \n-      .code-header span {\n-          color: #a5b4fc;\n-          font-size: 0.85rem;\n-          text-transform: uppercase;\n-          letter-spacing: 1px;\n-      }\n-      \n-      .code-actions {\n-          display: flex;\n-          gap: 8px;\n-      }\n-      \n-      .code-actions button {\n-          padding: 5px 10px;\n-          background: rgba(99, 102, 241, 0.2);\n-          color: #a5b4fc;\n-          border: none;\n-          border-radius: 8px;\n-          font-size: 0.8rem;\n-          cursor: pointer;\n-          transition: all 0.2s ease;\n-          display: flex;\n-          align-items: center;\n-          gap: 5px;\n-      }\n-      \n-      .code-actions button:hover {\n-          background: rgba(99, 102, 241, 0.4);\n-          color: #c7d2fe;\n-      }\n-      \n-      .code-actions button i {\n-          font-size: 0.9rem;\n-      }\n-      \n-      .code-footer {\n-          display: flex;\n-          padding: 8px 15px;\n-          background: rgba(15, 23, 42, 0.8);\n-          border-top: 1px solid rgba(255, 255, 255, 0.1);\n-      }\n-      \n-      .mini-counter {\n-          font-size: 0.75rem;\n-          color: #6366f1;\n-          display: flex;\n-          align-items: center;\n-          gap: 5px;\n-      }\n-      \n-      .typing-indicator {\n-          display: flex;\n-          align-items: center;\n-          gap: 5px;\n-      }\n-      \n-      .typing-indicator span {\n-          display: inline-block;\n-          width: 8px;\n-          height: 8px;\n-          background-color: #a5b4fc;\n-          border-radius: 50%;\n-          animation: bounce 1.5s infinite;\n-      }\n-      \n-      .typing-indicator span:nth-child(2) {\n-          animation-delay: 0.2s;\n-      }\n-      \n-      .typing-indicator span:nth-child(3) {\n-          animation-delay: 0.4s;\n-      }\n-      \n-      @keyframes bounce {\n-          0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }\n-          40% { transform: scale(1.2); opacity: 1; }\n-      }\n-      \n-      /* Style dla formatowania Markdown */\n-      .ai-message strong {\n-          font-weight: 700;\n-          color: #a5b4fc;\n-      }\n-      \n-      .ai-message em {\n-          font-style: italic;\n-          color: #ddd;\n-      }\n-      \n-      .ai-message ul, .ai-message ol {\n-          margin-left: 1.5rem;\n-          margin-bottom: 1rem;\n-      }\n-      \n-      .ai-message li {\n-          margin-bottom: 0.5rem;\n-      }\n-      \n-      .ai-message a {\n-          color: #6366f1;\n-          text-decoration: none;\n-          border-bottom: 1px dotted #6366f1;\n-          transition: all 0.2s ease;\n-      }\n-      \n-      .ai-message a:hover {\n-          color: #818cf8;\n-          border-bottom-color: #818cf8;\n-      }\n-      \n-      .ai-message blockquote {\n-          border-left: 3px solid #6366f1;\n-          padding-left: 1rem;\n-          margin-left: 0;\n-          margin-right: 0;\n-          font-style: italic;\n-          color: #9ca3af;\n-      }\n-      \n-      .ai-message h1, .ai-message h2, .ai-message h3, .ai-message h4 {\n-          margin-top: 1.5rem;\n-          margin-bottom: 0.75rem;\n-          color: #fff;\n-          font-weight: 600;\n-      }\n-      \n-      .ai-message h1 {\n-          font-size: 1.5rem;\n-          border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n-          padding-bottom: 0.5rem;\n-      }\n-      \n-      .ai-message h2 {\n-          font-size: 1.3rem;\n-      }\n-      \n-      .ai-message h3 {\n-          font-size: 1.1rem;\n-      }\n-      \n-      .ai-message h4 {\n-          font-size: 1rem;\n-      }\n-      \n-      .ai-message table {\n-          width: 100%;\n-          border-collapse: collapse;\n-          margin: 1rem 0;\n-          overflow: hidden;\n-          border-radius: 8px;\n-      }\n-      \n-      .ai-message th {\n-          background-color: rgba(99, 102, 241, 0.2);\n-          text-align: left;\n-          padding: 0.5rem;\n-      }\n-      \n-      .ai-message td {\n-          padding: 0.5rem;\n-          border-top: 1px solid rgba(255, 255, 255, 0.1);\n-      }\n-      \n-      .ai-message tr:nth-child(even) {\n-          background-color: rgba(255, 255, 255, 0.02);\n-      }\n-      \n-      @media (max-width: 768px) {\n-          .container {\n-              width: 100%;\n-              height: 100vh;\n-              margin: 0;\n-              border-radius: 0;\n-          }\n-          \n-          .message {\n-              max-width: 90%;\n-          }\n-          \n-          .header, .footer {\n-              padding: 1rem;\n-          }\n-          \n-          .chat-area {\n-              padding: 1rem;\n-          }\n-          \n-          h1 {\n-              font-size: 1.5rem;\n-          }\n-      }\n-    </style>\n-    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/marked/4.3.0/marked.min.js\"></script>\n-</head>\n-<body>\n-    <div class=\"container\">\n-        <div class=\"header\">\n-            <div class=\"logo\">\n-                <i class=\"fas fa-robot logo-icon\"></i>\n-                <h1>YutAi</h1>\n-            </div>\n-            <div class=\"status\">\n-                <div class=\"status-dot\"></div>\n-                <span>Online</span>\n-            </div>\n-        </div>\n-        \n-        <div class=\"chat-area\" id=\"chat-area\">\n-            <div class=\"message ai-message\">\n-                <div>Cześć! Jestem YutAi, Twój zaawansowany asystent AI. W czym mogę Ci dzisiaj pomóc?</div>\n-                <div class=\"message-time\">Teraz</div>\n-            </div>\n-        </div>\n-        \n-        <div class=\"footer\">\n-            <div class=\"input-area\">\n-                <i class=\"fas fa-message input-icon\"></i>\n-                <input type=\"text\" id=\"user-input\" placeholder=\"Napisz wiadomość...\" autocomplete=\"off\">\n-                <button id=\"send-button\">\n-                    <span>Wyślij</span>\n-                    <i class=\"fas fa-paper-plane\"></i>\n-                </button>\n-            </div>\n-            \n-            <div class=\"image-preview\" id=\"image-preview\">\n-                <img id=\"preview-img\" src=\"\" alt=\"Podgląd zdjęcia\">\n-                <button class=\"image-preview-close\" id=\"remove-image\">\n-                    <i class=\"fas fa-times\"></i>\n-                </button>\n-            </div>\n-            \n-            <div class=\"tools-bar\">\n-                <div class=\"file-upload\">\n-                    <input type=\"file\" id=\"image-upload\" accept=\"image/*\">\n-                    <div class=\"file-upload-btn\">\n-                        <i class=\"fas fa-image\"></i>\n-                        <span>Dodaj zdjęcie</span>\n-                    </div>\n-                </div>\n-            </div>\n-        </div>\n-    </div>\n-    \n-    <script>\n-    (function() {\n-        const chatArea = document.getElementById('chat-area');\n-        const userInput = document.getElementById('user-input');\n-        const sendButton = document.getElementById('send-button');\n-        const imageUpload = document.getElementById('image-upload');\n-        const imagePreview = document.getElementById('image-preview');\n-        const previewImg = document.getElementById('preview-img');\n-        const removeImageBtn = document.getElementById('remove-image');\n-        \n-        let selectedImage = null;\n-        \n-        // Funkcja kopiowania kodu\n-        window.copyCode = function(blockId) {\n-            const codeElement = document.getElementById(blockId);\n-            if (!codeElement) return;\n-            \n-            navigator.clipboard.writeText(codeElement.textContent)\n-                .then(() => {\n-                    const btn = codeElement.closest('.code-container').querySelector('.copy-btn');\n-                    const originalText = btn.textContent;\n-                    btn.textContent = 'Skopiowano!';\n-                    setTimeout(() => {\n-                        btn.textContent = originalText;\n-                    }, 2000);\n-                });\n-        };\n-        \n-        // Formatowanie czasu\n-        function formatTime() {\n-            const now = new Date();\n-            return now.getHours().toString().padStart(2, '0') + ':' + \n-                   now.getMinutes().toString().padStart(2, '0');\n-        }\n-        \n-        // Funkcja do dodawania wiadomości\n-// Function to add messages\n-function addMessage(text, isUser, imageUrl = null) {\n-    const messageDiv = document.createElement('div');\n-    messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n-\n-    const contentDiv = document.createElement('div');\n-\n-    if (isUser) {\n-        contentDiv.textContent = text; // User messages are plain text\n-    } else {\n-        // For AI messages, use marked.js to format Markdown\n-        const renderer = new marked.Renderer();\n-\n-        marked.setOptions({\n-            renderer: renderer,\n-            breaks: true,\n-            gfm: true\n-        });\n-\n-        // Process the text to handle code blocks\n-        let processedText = text;\n-\n-        // Ensure code blocks are wrapped in triple backticks\n-                       processedText = processedText.replace(/<div class=\"code-container\">[\\\\s\\\\S]*?<\\\\/div>/g, function(match) {\n-                    codeBlocks.push(match);\n-                    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n-                });\n-        \n-        // Apply Markdown formatting\n-        processedText = marked(processedText);\n-        \n-        contentDiv.innerHTML = processedText; // Set the formatted HTML\n-    }\n-    \n-    const timeDiv = document.createElement('div');\n-    timeDiv.className = 'message-time';\n-    timeDiv.textContent = formatTime();\n-    \n-    messageDiv.appendChild(contentDiv);\n-    messageDiv.appendChild(timeDiv);\n-    \n-    chatArea.appendChild(messageDiv);\n-    chatArea.scrollTop = chatArea.scrollHeight;\n-}\n-        \n         // Funkcja do wysyłania wiadomości\n         function sendMessage() {\n             const message = userInput.value.trim();\n             if (!message && !selectedImage) return;\n"
                },
                {
                    "date": 1743960612529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1107,12 +1107,18 @@\n                 let processedText = text;\n                 \n                 // Najpierw zabezpiecz bloki kodu, aby marked ich nie przetwarzał\n                 const codeBlocks = [];\n-                processedText = processedText.replace(/<div class=\"code-container\">[\\\\s\\\\S]*?<\\\\/div>/g, function(match) {\n-                    codeBlocks.push(match);\n-                    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n-                });\n+processedText = processedText.replace(/<div class=\"code-container\">[\\s\\S]*?<\\/div>/g, function(match) {\n+    // Wyszukujemy zawartość wewnątrz tagu <code>\n+    const innerMatch = match.match(/<code[^>]*>([\\s\\S]*?)<\\/code>/);\n+    let innerText = innerMatch ? innerMatch[1] : match;\n+    // Zachowujemy oryginalny blok kodu w tablicy\n+    codeBlocks.push(match);\n+    // Zwracamy placeholder z widocznym tekstem (cały tekst otoczony znakami < >)\n+    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}} <\" + innerText + \">\";\n+});\n+\n                 \n                 // Zastosuj formatowanie Markdown\n                 processedText = marked.parse(processedText);\n                 \n"
                },
                {
                    "date": 1743960633387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1107,18 +1107,12 @@\n                 let processedText = text;\n                 \n                 // Najpierw zabezpiecz bloki kodu, aby marked ich nie przetwarzał\n                 const codeBlocks = [];\n-processedText = processedText.replace(/<div class=\"code-container\">[\\s\\S]*?<\\/div>/g, function(match) {\n-    // Wyszukujemy zawartość wewnątrz tagu <code>\n-    const innerMatch = match.match(/<code[^>]*>([\\s\\S]*?)<\\/code>/);\n-    let innerText = innerMatch ? innerMatch[1] : match;\n-    // Zachowujemy oryginalny blok kodu w tablicy\n-    codeBlocks.push(match);\n-    // Zwracamy placeholder z widocznym tekstem (cały tekst otoczony znakami < >)\n-    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}} <\" + innerText + \">\";\n-});\n-\n+                processedText = processedText.replace(/<div class=\"code-container\">[\\\\s\\\\S]*?<\\\\/div>/g, function(match) {\n+                    codeBlocks.push(match);\n+                    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n+                });\n                 \n                 // Zastosuj formatowanie Markdown\n                 processedText = marked.parse(processedText);\n                 \n"
                },
                {
                    "date": 1743960699527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1106,13 +1106,22 @@\n                 // Przetwórz tekst na HTML z zachowaniem bloków kodu\n                 let processedText = text;\n                 \n                 // Najpierw zabezpiecz bloki kodu, aby marked ich nie przetwarzał\n-                const codeBlocks = [];\n-                processedText = processedText.replace(/<div class=\"code-container\">[\\\\s\\\\S]*?<\\\\/div>/g, function(match) {\n-                    codeBlocks.push(match);\n-                    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n-                });\n+// Upewnij się, że masz zadeklarowaną tablicę na bloki kodu\n+let codeBlocks = [];\n+\n+processedText = processedText.replace(/<div class=\"code-container\">[\\s\\S]*?<\\/div>/g, function(match) {\n+    // Szukamy zawartości wewnątrz tagu <code>\n+    const innerMatch = match.match(/<code[^>]*>([\\s\\S]*?)<\\/code>/);\n+    let innerText = innerMatch ? innerMatch[1] : \"\";\n+    // Zapisujemy oryginalny blok kodu w tablicy\n+    codeBlocks.push(match);\n+    // Zwracamy placeholder wraz z widocznym tekstem (kod wewnątrz < >, ale < oraz > jako encje HTML)\n+    return `{{ CODE_BLOCK_${ codeBlocks.length - 1\n+}}} & lt;${ innerText }& gt;`;\n+});\n+\n                 \n                 // Zastosuj formatowanie Markdown\n                 processedText = marked.parse(processedText);\n                 \n"
                },
                {
                    "date": 1743960815507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1073,78 +1073,75 @@\n                    now.getMinutes().toString().padStart(2, '0');\n         }\n         \n         // Funkcja do dodawania wiadomości\n-        function addMessage(text, isUser, imageUrl = null) {\n-            const messageDiv = document.createElement('div');\n-            messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n-            \n-            const contentDiv = document.createElement('div');\n-            \n-            if (isUser) {\n-                contentDiv.textContent = text;\n-                \n-                // Dodaj zdjęcie jeśli zostało wybrane\n-                if (imageUrl) {\n-                    const img = document.createElement('img');\n-                    img.src = imageUrl;\n-                    img.className = 'user-message-image';\n-                    img.alt = 'Przesłane zdjęcie';\n-                    messageDiv.appendChild(img);\n-                }\n-            } else {\n-                // Dla wiadomości AI używamy marked.js do formatowania Markdown\n-                // Skonfiguruj marked.js do obsługi pogrubienia i innych stylów Markdown\n-                const renderer = new marked.Renderer();\n-                \n-                // Użyj marked do konwersji Markdown na HTML\n-                marked.setOptions({\n-                    renderer: renderer,\n-                    breaks: true,\n-                    gfm: true\n-                });\n-                \n-                // Przetwórz tekst na HTML z zachowaniem bloków kodu\n-                let processedText = text;\n-                \n-                // Najpierw zabezpiecz bloki kodu, aby marked ich nie przetwarzał\n-// Upewnij się, że masz zadeklarowaną tablicę na bloki kodu\n-let codeBlocks = [];\n+function addMessage(text, isUser, imageUrl = null) {\n+    const messageDiv = document.createElement('div');\n+    messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n \n-processedText = processedText.replace(/<div class=\"code-container\">[\\s\\S]*?<\\/div>/g, function(match) {\n-    // Szukamy zawartości wewnątrz tagu <code>\n-    const innerMatch = match.match(/<code[^>]*>([\\s\\S]*?)<\\/code>/);\n-    let innerText = innerMatch ? innerMatch[1] : \"\";\n-    // Zapisujemy oryginalny blok kodu w tablicy\n-    codeBlocks.push(match);\n-    // Zwracamy placeholder wraz z widocznym tekstem (kod wewnątrz < >, ale < oraz > jako encje HTML)\n-    return `{{ CODE_BLOCK_${ codeBlocks.length - 1\n-}}} & lt;${ innerText }& gt;`;\n-});\n+    const contentDiv = document.createElement('div');\n \n-                \n-                // Zastosuj formatowanie Markdown\n-                processedText = marked.parse(processedText);\n-                \n-                // Przywróć bloki kodu\n-                processedText = processedText.replace(/{{CODE_BLOCK_(\\\\d+)}}/g, function(match, index) {\n-                    return codeBlocks[parseInt(index)];\n-                });\n-                \n-                contentDiv.innerHTML = processedText;\n-            }\n-            \n-            const timeDiv = document.createElement('div');\n-            timeDiv.className = 'message-time';\n-            timeDiv.textContent = formatTime();\n-            \n-            messageDiv.appendChild(contentDiv);\n-            messageDiv.appendChild(timeDiv);\n-            \n-            chatArea.appendChild(messageDiv);\n-            chatArea.scrollTop = chatArea.scrollHeight;\n+    if (isUser) {\n+        contentDiv.textContent = text;\n+\n+        // Dodaj zdjęcie jeśli zostało wybrane\n+        if (imageUrl) {\n+            const img = document.createElement('img');\n+            img.src = imageUrl;\n+            img.className = 'user-message-image';\n+            img.alt = 'Przesłane zdjęcie';\n+            messageDiv.appendChild(img);\n         }\n+    } else {\n+        // Konfiguracja marked.js do konwersji Markdown na HTML\n+        const renderer = new marked.Renderer();\n+        marked.setOptions({\n+            renderer: renderer,\n+            breaks: true,\n+            gfm: true\n+        });\n+\n+        // Przetwarzamy tekst otrzymany od AI\n+        let processedText = text;\n+\n+        // Najpierw zabezpieczamy bloki kodu, aby marked.js ich nie parsował\n+        const codeBlocks = [];\n+        processedText = processedText.replace(/<div class=\"code-container\">[\\s\\S]*?<\\/div>/g, function(match) {\n+            codeBlocks.push(match);\n+            return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n+        });\n+\n+        // Dla każdego bloku kodu wyszukujemy zawartość tagu <code> i zamieniamy znaki < oraz > na encje HTML\n+        for (let i = 0; i < codeBlocks.length; i++) {\n+            codeBlocks[i] = codeBlocks[i].replace(/<code([^>]*)>([\\s\\S]*?)<\\/code>/, function(match, p1, p2) {\n+                const escapedContent = p2.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n+                return `< code${ p1 }> ${ escapedContent }</code >`;\n+            });\n+        }\n         \n+        // Konwertujemy pozostały tekst (bez bloków kodu) z Markdown na HTML\n+        processedText = marked.parse(processedText);\n+        \n+        // Przywracamy bloki kodu w miejsce placeholderów\n+        processedText = processedText.replace(/{{CODE_BLOCK_(\\d+)}}/g, function(match, index) {\n+            return codeBlocks[parseInt(index)];\n+        });\n+        \n+        contentDiv.innerHTML = processedText;\n+    }\n+    \n+    const timeDiv = document.createElement('div');\n+    timeDiv.className = 'message-time';\n+    timeDiv.textContent = formatTime();\n+    \n+    messageDiv.appendChild(contentDiv);\n+    messageDiv.appendChild(timeDiv);\n+    \n+    chatArea.appendChild(messageDiv);\n+    chatArea.scrollTop = chatArea.scrollHeight;\n+}\n+\n+        \n         // Funkcja do wysyłania wiadomości\n         function sendMessage() {\n             const message = userInput.value.trim();\n             if (!message && !selectedImage) return;\n"
                },
                {
                    "date": 1743960842565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1073,75 +1073,69 @@\n                    now.getMinutes().toString().padStart(2, '0');\n         }\n         \n         // Funkcja do dodawania wiadomości\n-function addMessage(text, isUser, imageUrl = null) {\n-    const messageDiv = document.createElement('div');\n-    messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n-\n-    const contentDiv = document.createElement('div');\n-\n-    if (isUser) {\n-        contentDiv.textContent = text;\n-\n-        // Dodaj zdjęcie jeśli zostało wybrane\n-        if (imageUrl) {\n-            const img = document.createElement('img');\n-            img.src = imageUrl;\n-            img.className = 'user-message-image';\n-            img.alt = 'Przesłane zdjęcie';\n-            messageDiv.appendChild(img);\n+        function addMessage(text, isUser, imageUrl = null) {\n+            const messageDiv = document.createElement('div');\n+            messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n+            \n+            const contentDiv = document.createElement('div');\n+            \n+            if (isUser) {\n+                contentDiv.textContent = text;\n+                \n+                // Dodaj zdjęcie jeśli zostało wybrane\n+                if (imageUrl) {\n+                    const img = document.createElement('img');\n+                    img.src = imageUrl;\n+                    img.className = 'user-message-image';\n+                    img.alt = 'Przesłane zdjęcie';\n+                    messageDiv.appendChild(img);\n+                }\n+            } else {\n+                // Dla wiadomości AI używamy marked.js do formatowania Markdown\n+                // Skonfiguruj marked.js do obsługi pogrubienia i innych stylów Markdown\n+                const renderer = new marked.Renderer();\n+                \n+                // Użyj marked do konwersji Markdown na HTML\n+                marked.setOptions({\n+                    renderer: renderer,\n+                    breaks: true,\n+                    gfm: true\n+                });\n+                \n+                // Przetwórz tekst na HTML z zachowaniem bloków kodu\n+                let processedText = text;\n+                \n+                // Najpierw zabezpiecz bloki kodu, aby marked ich nie przetwarzał\n+                const codeBlocks = [];\n+                processedText = processedText.replace(/<div class=\"code-container\">[\\\\s\\\\S]*?<\\\\/div>/g, function(match) {\n+                    codeBlocks.push(match);\n+                    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n+                });\n+                \n+                // Zastosuj formatowanie Markdown\n+                processedText = marked.parse(processedText);\n+                \n+                // Przywróć bloki kodu\n+                processedText = processedText.replace(/{{CODE_BLOCK_(\\\\d+)}}/g, function(match, index) {\n+                    return codeBlocks[parseInt(index)];\n+                });\n+                \n+                contentDiv.innerHTML = processedText;\n+            }\n+            \n+            const timeDiv = document.createElement('div');\n+            timeDiv.className = 'message-time';\n+            timeDiv.textContent = formatTime();\n+            \n+            messageDiv.appendChild(contentDiv);\n+            messageDiv.appendChild(timeDiv);\n+            \n+            chatArea.appendChild(messageDiv);\n+            chatArea.scrollTop = chatArea.scrollHeight;\n         }\n-    } else {\n-        // Konfiguracja marked.js do konwersji Markdown na HTML\n-        const renderer = new marked.Renderer();\n-        marked.setOptions({\n-            renderer: renderer,\n-            breaks: true,\n-            gfm: true\n-        });\n-\n-        // Przetwarzamy tekst otrzymany od AI\n-        let processedText = text;\n-\n-        // Najpierw zabezpieczamy bloki kodu, aby marked.js ich nie parsował\n-        const codeBlocks = [];\n-        processedText = processedText.replace(/<div class=\"code-container\">[\\s\\S]*?<\\/div>/g, function(match) {\n-            codeBlocks.push(match);\n-            return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n-        });\n-\n-        // Dla każdego bloku kodu wyszukujemy zawartość tagu <code> i zamieniamy znaki < oraz > na encje HTML\n-        for (let i = 0; i < codeBlocks.length; i++) {\n-            codeBlocks[i] = codeBlocks[i].replace(/<code([^>]*)>([\\s\\S]*?)<\\/code>/, function(match, p1, p2) {\n-                const escapedContent = p2.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n-                return `< code${ p1 }> ${ escapedContent }</code >`;\n-            });\n-        }\n         \n-        // Konwertujemy pozostały tekst (bez bloków kodu) z Markdown na HTML\n-        processedText = marked.parse(processedText);\n-        \n-        // Przywracamy bloki kodu w miejsce placeholderów\n-        processedText = processedText.replace(/{{CODE_BLOCK_(\\d+)}}/g, function(match, index) {\n-            return codeBlocks[parseInt(index)];\n-        });\n-        \n-        contentDiv.innerHTML = processedText;\n-    }\n-    \n-    const timeDiv = document.createElement('div');\n-    timeDiv.className = 'message-time';\n-    timeDiv.textContent = formatTime();\n-    \n-    messageDiv.appendChild(contentDiv);\n-    messageDiv.appendChild(timeDiv);\n-    \n-    chatArea.appendChild(messageDiv);\n-    chatArea.scrollTop = chatArea.scrollHeight;\n-}\n-\n-        \n         // Funkcja do wysyłania wiadomości\n         function sendMessage() {\n             const message = userInput.value.trim();\n             if (!message && !selectedImage) return;\n"
                },
                {
                    "date": 1743960863057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1073,69 +1073,75 @@\n                    now.getMinutes().toString().padStart(2, '0');\n         }\n         \n         // Funkcja do dodawania wiadomości\n-        function addMessage(text, isUser, imageUrl = null) {\n-            const messageDiv = document.createElement('div');\n-            messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n-            \n-            const contentDiv = document.createElement('div');\n-            \n-            if (isUser) {\n-                contentDiv.textContent = text;\n-                \n-                // Dodaj zdjęcie jeśli zostało wybrane\n-                if (imageUrl) {\n-                    const img = document.createElement('img');\n-                    img.src = imageUrl;\n-                    img.className = 'user-message-image';\n-                    img.alt = 'Przesłane zdjęcie';\n-                    messageDiv.appendChild(img);\n-                }\n-            } else {\n-                // Dla wiadomości AI używamy marked.js do formatowania Markdown\n-                // Skonfiguruj marked.js do obsługi pogrubienia i innych stylów Markdown\n-                const renderer = new marked.Renderer();\n-                \n-                // Użyj marked do konwersji Markdown na HTML\n-                marked.setOptions({\n-                    renderer: renderer,\n-                    breaks: true,\n-                    gfm: true\n-                });\n-                \n-                // Przetwórz tekst na HTML z zachowaniem bloków kodu\n-                let processedText = text;\n-                \n-                // Najpierw zabezpiecz bloki kodu, aby marked ich nie przetwarzał\n-                const codeBlocks = [];\n-                processedText = processedText.replace(/<div class=\"code-container\">[\\\\s\\\\S]*?<\\\\/div>/g, function(match) {\n-                    codeBlocks.push(match);\n-                    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n-                });\n-                \n-                // Zastosuj formatowanie Markdown\n-                processedText = marked.parse(processedText);\n-                \n-                // Przywróć bloki kodu\n-                processedText = processedText.replace(/{{CODE_BLOCK_(\\\\d+)}}/g, function(match, index) {\n-                    return codeBlocks[parseInt(index)];\n-                });\n-                \n-                contentDiv.innerHTML = processedText;\n-            }\n-            \n-            const timeDiv = document.createElement('div');\n-            timeDiv.className = 'message-time';\n-            timeDiv.textContent = formatTime();\n-            \n-            messageDiv.appendChild(contentDiv);\n-            messageDiv.appendChild(timeDiv);\n-            \n-            chatArea.appendChild(messageDiv);\n-            chatArea.scrollTop = chatArea.scrollHeight;\n+function addMessage(text, isUser, imageUrl = null) {\n+    const messageDiv = document.createElement('div');\n+    messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n+    \n+    const contentDiv = document.createElement('div');\n+    \n+    if (isUser) {\n+        contentDiv.textContent = text;\n+        \n+        // Dodaj zdjęcie jeśli zostało wybrane\n+        if (imageUrl) {\n+            const img = document.createElement('img');\n+            img.src = imageUrl;\n+            img.className = 'user-message-image';\n+            img.alt = 'Przesłane zdjęcie';\n+            messageDiv.appendChild(img);\n         }\n+    } else {\n+        // Konfiguracja marked.js do konwersji Markdown na HTML\n+        const renderer = new marked.Renderer();\n+        marked.setOptions({\n+            renderer: renderer,\n+            breaks: true,\n+            gfm: true\n+        });\n         \n+        // Przetwarzamy tekst otrzymany od AI\n+        let processedText = text;\n+        \n+        // Najpierw zabezpieczamy bloki kodu, aby marked.js ich nie parsował\n+        const codeBlocks = [];\n+        processedText = processedText.replace(/<div class=\"code-container\">[\\s\\S]*?<\\/div>/g, function(match) {\n+            codeBlocks.push(match);\n+            return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n+        });\n+        \n+        // Dla każdego bloku kodu wyszukujemy zawartość tagu <code> i zamieniamy znaki < oraz > na encje HTML\n+        for (let i = 0; i < codeBlocks.length; i++) {\n+            codeBlocks[i] = codeBlocks[i].replace(/<code([^>]*)>([\\s\\S]*?)<\\/code>/, function(match, p1, p2) {\n+                const escapedContent = p2.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n+                return `<code${p1}>${escapedContent}</code>`;\n+            });\n+        }\n+        \n+        // Konwertujemy pozostały tekst (bez bloków kodu) z Markdown na HTML\n+        processedText = marked.parse(processedText);\n+        \n+        // Przywracamy bloki kodu w miejsce placeholderów\n+        processedText = processedText.replace(/{{CODE_BLOCK_(\\d+)}}/g, function(match, index) {\n+            return codeBlocks[parseInt(index)];\n+        });\n+        \n+        contentDiv.innerHTML = processedText;\n+    }\n+    \n+    const timeDiv = document.createElement('div');\n+    timeDiv.className = 'message-time';\n+    timeDiv.textContent = formatTime();\n+    \n+    messageDiv.appendChild(contentDiv);\n+    messageDiv.appendChild(timeDiv);\n+    \n+    chatArea.appendChild(messageDiv);\n+    chatArea.scrollTop = chatArea.scrollHeight;\n+}\n+\n+        \n         // Funkcja do wysyłania wiadomości\n         function sendMessage() {\n             const message = userInput.value.trim();\n             if (!message && !selectedImage) return;\n"
                },
                {
                    "date": 1743960870848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1113,9 +1113,10 @@\n         // Dla każdego bloku kodu wyszukujemy zawartość tagu <code> i zamieniamy znaki < oraz > na encje HTML\n         for (let i = 0; i < codeBlocks.length; i++) {\n             codeBlocks[i] = codeBlocks[i].replace(/<code([^>]*)>([\\s\\S]*?)<\\/code>/, function(match, p1, p2) {\n                 const escapedContent = p2.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n-                return `<code${p1}>${escapedContent}</code>`;\n+                return `< code${ p1 }> ${ escapedContent }</code >`;\n+\n             });\n         }\n         \n         // Konwertujemy pozostały tekst (bez bloków kodu) z Markdown na HTML\n"
                },
                {
                    "date": 1743960886532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1104,21 +1104,20 @@\n         let processedText = text;\n         \n         // Najpierw zabezpieczamy bloki kodu, aby marked.js ich nie parsował\n         const codeBlocks = [];\n-        processedText = processedText.replace(/<div class=\"code-container\">[\\s\\S]*?<\\/div>/g, function(match) {\n-            codeBlocks.push(match);\n-            return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n-        });\n-        \n-        // Dla każdego bloku kodu wyszukujemy zawartość tagu <code> i zamieniamy znaki < oraz > na encje HTML\n-        for (let i = 0; i < codeBlocks.length; i++) {\n-            codeBlocks[i] = codeBlocks[i].replace(/<code([^>]*)>([\\s\\S]*?)<\\/code>/, function(match, p1, p2) {\n-                const escapedContent = p2.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n-                return `< code${ p1 }> ${ escapedContent }</code >`;\n+processedText = processedText.replace(/<div class=\"code-container\">[\\s\\S]*?<\\/div>/g, function(match) {\n+    codeBlocks.push(match);\n+    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n+});\n \n-            });\n-        }\n+for (let i = 0; i < codeBlocks.length; i++) {\n+    codeBlocks[i] = codeBlocks[i].replace(/<code([^>]*)>([\\s\\S]*?)<\\/code>/, function(match, p1, p2) {\n+        const escapedContent = p2.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n+        return `< code${ p1 }> ${ escapedContent }</code >`;\n+    });\n+}\n+\n         \n         // Konwertujemy pozostały tekst (bez bloków kodu) z Markdown na HTML\n         processedText = marked.parse(processedText);\n         \n"
                },
                {
                    "date": 1743960891578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1073,75 +1073,69 @@\n                    now.getMinutes().toString().padStart(2, '0');\n         }\n         \n         // Funkcja do dodawania wiadomości\n-function addMessage(text, isUser, imageUrl = null) {\n-    const messageDiv = document.createElement('div');\n-    messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n-    \n-    const contentDiv = document.createElement('div');\n-    \n-    if (isUser) {\n-        contentDiv.textContent = text;\n-        \n-        // Dodaj zdjęcie jeśli zostało wybrane\n-        if (imageUrl) {\n-            const img = document.createElement('img');\n-            img.src = imageUrl;\n-            img.className = 'user-message-image';\n-            img.alt = 'Przesłane zdjęcie';\n-            messageDiv.appendChild(img);\n+        function addMessage(text, isUser, imageUrl = null) {\n+            const messageDiv = document.createElement('div');\n+            messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n+            \n+            const contentDiv = document.createElement('div');\n+            \n+            if (isUser) {\n+                contentDiv.textContent = text;\n+                \n+                // Dodaj zdjęcie jeśli zostało wybrane\n+                if (imageUrl) {\n+                    const img = document.createElement('img');\n+                    img.src = imageUrl;\n+                    img.className = 'user-message-image';\n+                    img.alt = 'Przesłane zdjęcie';\n+                    messageDiv.appendChild(img);\n+                }\n+            } else {\n+                // Dla wiadomości AI używamy marked.js do formatowania Markdown\n+                // Skonfiguruj marked.js do obsługi pogrubienia i innych stylów Markdown\n+                const renderer = new marked.Renderer();\n+                \n+                // Użyj marked do konwersji Markdown na HTML\n+                marked.setOptions({\n+                    renderer: renderer,\n+                    breaks: true,\n+                    gfm: true\n+                });\n+                \n+                // Przetwórz tekst na HTML z zachowaniem bloków kodu\n+                let processedText = text;\n+                \n+                // Najpierw zabezpiecz bloki kodu, aby marked ich nie przetwarzał\n+                const codeBlocks = [];\n+                processedText = processedText.replace(/<div class=\"code-container\">[\\\\s\\\\S]*?<\\\\/div>/g, function(match) {\n+                    codeBlocks.push(match);\n+                    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n+                });\n+                \n+                // Zastosuj formatowanie Markdown\n+                processedText = marked.parse(processedText);\n+                \n+                // Przywróć bloki kodu\n+                processedText = processedText.replace(/{{CODE_BLOCK_(\\\\d+)}}/g, function(match, index) {\n+                    return codeBlocks[parseInt(index)];\n+                });\n+                \n+                contentDiv.innerHTML = processedText;\n+            }\n+            \n+            const timeDiv = document.createElement('div');\n+            timeDiv.className = 'message-time';\n+            timeDiv.textContent = formatTime();\n+            \n+            messageDiv.appendChild(contentDiv);\n+            messageDiv.appendChild(timeDiv);\n+            \n+            chatArea.appendChild(messageDiv);\n+            chatArea.scrollTop = chatArea.scrollHeight;\n         }\n-    } else {\n-        // Konfiguracja marked.js do konwersji Markdown na HTML\n-        const renderer = new marked.Renderer();\n-        marked.setOptions({\n-            renderer: renderer,\n-            breaks: true,\n-            gfm: true\n-        });\n         \n-        // Przetwarzamy tekst otrzymany od AI\n-        let processedText = text;\n-        \n-        // Najpierw zabezpieczamy bloki kodu, aby marked.js ich nie parsował\n-        const codeBlocks = [];\n-processedText = processedText.replace(/<div class=\"code-container\">[\\s\\S]*?<\\/div>/g, function(match) {\n-    codeBlocks.push(match);\n-    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n-});\n-\n-for (let i = 0; i < codeBlocks.length; i++) {\n-    codeBlocks[i] = codeBlocks[i].replace(/<code([^>]*)>([\\s\\S]*?)<\\/code>/, function(match, p1, p2) {\n-        const escapedContent = p2.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n-        return `< code${ p1 }> ${ escapedContent }</code >`;\n-    });\n-}\n-\n-        \n-        // Konwertujemy pozostały tekst (bez bloków kodu) z Markdown na HTML\n-        processedText = marked.parse(processedText);\n-        \n-        // Przywracamy bloki kodu w miejsce placeholderów\n-        processedText = processedText.replace(/{{CODE_BLOCK_(\\d+)}}/g, function(match, index) {\n-            return codeBlocks[parseInt(index)];\n-        });\n-        \n-        contentDiv.innerHTML = processedText;\n-    }\n-    \n-    const timeDiv = document.createElement('div');\n-    timeDiv.className = 'message-time';\n-    timeDiv.textContent = formatTime();\n-    \n-    messageDiv.appendChild(contentDiv);\n-    messageDiv.appendChild(timeDiv);\n-    \n-    chatArea.appendChild(messageDiv);\n-    chatArea.scrollTop = chatArea.scrollHeight;\n-}\n-\n-        \n         // Funkcja do wysyłania wiadomości\n         function sendMessage() {\n             const message = userInput.value.trim();\n             if (!message && !selectedImage) return;\n"
                },
                {
                    "date": 1743960938774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1325,15 +1325,15 @@\n         let aiReply = response.data.candidates[0].content.parts[0].text;\n \n         // Format code blocks properly\n         // Replace markdown code blocks with styled HTML code containers\n-        aiReply = aiReply.replace(/```c\\+\\+/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```cpp/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/KOD C\\+\\+:/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```python/g, '<div class=\"code-container\"><div class=\"code-header\"><span>Python</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```javascript/g, '<div class=\"code-container\"><div class=\"code-header\"><span>JavaScript</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```html/g, '<div class=\"code-container\"><div class=\"code-header\"><span>HTML</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n-        aiReply = aiReply.replace(/```css/g, '<div class=\"code-container\"><div class=\"code-header\"><span>CSS</span><div class=\"code-actions\"><button class=\"copy-btn\" onclick=\"copyCode(\\'code-block-1\\')\"><i class=\"fas fa-copy\"></i> Kopiuj</button></div></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```c\\+\\+/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```cpp/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/KOD C\\+\\+:/g, '<div class=\"code-container\"><div class=\"code-header\"><span>C++</span></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```python/g, '<div class=\"code-container\"><div class=\"code-header\"><span>Python</span></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```javascript/g, '<div class=\"code-container\"><div class=\"code-header\"><span>JavaScript</span></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```html/g, '<div class=\"code-container\"><div class=\"code-header\"><span>HTML</span></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n+        aiReply = aiReply.replace(/```css/g, '<div class=\"code-container\"><div class=\"code-header\"><span>CSS</span></div><pre class=\"code-block\"><code id=\"code-block-1\">');\n         aiReply = aiReply.replace(/```/g, '</code></pre><div class=\"code-footer\"><div class=\"mini-counter\"><i class=\"fas fa-code\"></i> kod</div></div></div>');\n \n         // If image was uploaded temporarily, delete it after processing\n         if (req.file) {\n"
                }
            ],
            "date": 1743959396761,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst path = require('path');\nconst fs = require('fs');\nconst multer = require('multer');\nconst axios = require('axios'); // Add axios for API requests\nconst marked = require('marked'); // Biblioteka do formatowania markdown\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\nconst GEMINI_API_KEY = 'AIzaSyAP1EOpnlAhNRh9MI41v8EHtyRGylNR_bA';\n\n// Upewnij się, że istnieje folder temp\nif (!fs.existsSync('temp')) {\n  fs.mkdirSync('temp');\n}\n\n// Configure multer to preserve original filename for file panel\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    // Make sure the \"pliki\" directory exists\n    if (!fs.existsSync('pliki')) {\n      fs.mkdirSync('pliki');\n    }\n    cb(null, 'pliki/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, file.originalname);\n  }\n});\nconst upload = multer({ storage: storage });\n\n// Configure multer for temporary image uploads\nconst tempStorage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'temp/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\nconst tempUpload = multer({ storage: tempStorage });\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\napp.use(express.static('public', { index: false }));\n\n// Modern clean styles\nconst modernStyles = `\n<style>\n    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n    * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n    }\n\n    :root {\n        --bg-dark: #121212;\n        --bg-card: #1e1e2d;\n        --accent-primary: #6366f1;\n        --accent-secondary: #8b5cf6;\n        --text-primary: #f3f4f6;\n        --text-secondary: #d1d5db;\n        --text-muted: #9ca3af;\n        --border-color: #2d2d3d;\n        --danger: #ef4444;\n    }\n\n    body {\n        font-family: 'Inter', sans-serif;\n        background: linear-gradient(135deg, #121212 0%, #1a1a2e 100%);\n        color: var(--text-primary);\n        line-height: 1.6;\n        min-height: 100vh;\n    }\n\n    .container {\n        width: 90%;\n        max-width: 1200px;\n        margin: 2rem auto;\n        padding: 2rem;\n        background: var(--bg-card);\n        border-radius: 12px;\n        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);\n        border: 1px solid var(--border-color);\n    }\n\n    h1 {\n        text-align: center;\n        margin-bottom: 2rem;\n        background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        font-weight: 700;\n    }\n\n    a {\n        text-decoration: none;\n    }\n\n    .btn {\n        display: inline-block;\n        padding: 0.6rem 1.2rem;\n        margin: 0.3rem;\n        border: none;\n        border-radius: 6px;\n        font-weight: 500;\n        font-size: 0.9rem;\n        cursor: pointer;\n        transition: all 0.2s ease;\n    }\n\n    .btn-primary {\n        background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));\n        color: white;\n    }\n\n    .btn-secondary {\n        background: rgba(255, 255, 255, 0.08);\n        color: var(--text-primary);\n        border: 1px solid var(--border-color);\n    }\n\n    .btn-danger {\n        background: var(--danger);\n        color: white;\n    }\n\n    .btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n    }\n\n    .btn-primary:hover {\n        background: linear-gradient(to right, #5254cc, #7e4fdb);\n    }\n\n    .btn-secondary:hover {\n        background: rgba(255, 255, 255, 0.12);\n    }\n\n    table {\n        width: 100%;\n        border-collapse: collapse;\n        margin: 1.5rem 0;\n        border-radius: 8px;\n        overflow: hidden;\n    }\n\n    th, td {\n        padding: 1rem;\n        text-align: left;\n        border-bottom: 1px solid var(--border-color);\n    }\n\n    th {\n        background-color: rgba(255, 255, 255, 0.05);\n        font-weight: 600;\n        color: var(--text-primary);\n    }\n\n    tr:hover {\n        background-color: rgba(255, 255, 255, 0.03);\n    }\n\n    input[type=\"text\"], \n    input[type=\"file\"] {\n        width: 100%;\n        padding: 0.8rem;\n        margin: 0.8rem 0;\n        background: rgba(255, 255, 255, 0.05);\n        border: 1px solid var(--border-color);\n        border-radius: 6px;\n        color: var(--text-primary);\n        font-family: 'Inter', sans-serif;\n    }\n\n    input[type=\"text\"]:focus,\n    input[type=\"file\"]:focus,\n    textarea:focus {\n        outline: none;\n        border-color: var(--accent-primary);\n        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);\n    }\n\n    textarea {\n        width: 100%;\n        height: 70vh;\n        min-height: 400px;\n        padding: 0.8rem;\n        margin: 0.8rem 0;\n        background: rgba(255, 255, 255, 0.05);\n        border: 1px solid var(--border-color);\n        border-radius: 6px;\n        color: var(--text-primary);\n        font-family: monospace;\n        resize: vertical;\n    }\n\n    form button[type=\"submit\"] {\n        background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));\n        color: white;\n        padding: 0.8rem 1.5rem;\n        border: none;\n        border-radius: 6px;\n        cursor: pointer;\n        font-weight: 500;\n        transition: all 0.2s ease;\n    }\n\n    form button[type=\"submit\"]:hover {\n        background: linear-gradient(to right, #5254cc, #7e4fdb);\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n    }\n\n    .actions {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n        gap: 0.3rem;\n    }\n\n    .header-actions {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 1.5rem;\n        background: rgba(0, 0, 0, 0.2);\n        padding: 1rem;\n        border-radius: 8px;\n        border: 1px solid var(--border-color);\n    }\n\n    .fade-in {\n        animation: fadeIn 0.3s ease forwards;\n    }\n\n    @keyframes fadeIn {\n        from { opacity: 0; transform: translateY(10px); }\n        to { opacity: 1; transform: translateY(0); }\n    }\n</style>\n`;\n\napp.get('/', (req, res) => {\nres.send(`\n<html>\n<head>\n    <title>Files Portal</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    ${modernStyles}\n</head>\n<body>\n    <div class=\"container fade-in\">\n        <h1>Welcome to Files Portal</h1>\n        <div style=\"text-align: center; margin-top: 2rem; display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\n            <a href=\"/panel\" class=\"btn btn-primary\">Go to File Management</a>\n            <a href=\"/chat\" class=\"btn btn-primary\" style=\"background: linear-gradient(to right, #9333ea, #3b82f6);\">\n                <span style=\"display: flex; align-items: center; gap: 8px;\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n                        <path d=\"M8 1a5 5 0 0 0-5 5v1h1a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V6a6 6 0 1 1 12 0v6a2.5 2.5 0 0 1-2.5 2.5H9.366a1 1 0 0 1-.866.5h-1a1 1 0 1 1 0-2h1a1 1 0 0 1 .866.5H11.5A1.5 1.5 0 0 0 13 12h-1a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1h1V6a5 5 0 0 0-5-5z\"/>\n                    </svg>\n                    Chat with YutAi\n                </span>\n            </a>\n        </div>\n    </div>\n</body>\n</html>\n`);\n});\n\napp.get('/panel', (req, res) => {\n  fs.readdir('pliki', (err, files) => {\n    if (err) {\n      if (err.code === 'ENOENT') {\n        // Directory doesn't exist, create it\n        fs.mkdirSync('pliki');\n        files = [];\n      } else {\n        return res.send('Error loading files.');\n      }\n    }\n\nconst fileRows = files.map(file => `\n<tr class=\"fade-in\">\n    <td>${file}</td>\n    <td class=\"actions\">\n            <a href=\"/files/${encodeURIComponent(file)}\" download class=\"btn btn-secondary\">Download</a>\n            <a href=\"/panel/edit/${encodeURIComponent(file)}\" class=\"btn btn-secondary\">Edit</a>\n            <a href=\"/panel/rename/${encodeURIComponent(file)}\" class=\"btn btn-secondary\">Rename</a>\n            <a href=\"/panel/redirect/${encodeURIComponent(file)}\" class=\"btn btn-secondary\">Open</a>\n            <a href=\"/panel/delete/${encodeURIComponent(file)}\" class=\"btn btn-danger\">Delete</a>\n    </td>\n</tr>\n`).join('');\n\nres.send(`\n<html>\n<head>\n        <title>File Management</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        ${modernStyles}\n</head>\n<body>\n        <div class=\"container fade-in\">\n            <h1>File Management</h1>\n            \n            <div class=\"header-actions\">\n                <div>\n                    <a href=\"/panel/create\" class=\"btn btn-primary\">Create New File</a>\n                    <a href=\"/\" class=\"btn btn-secondary\">Powrót do strony głównej</a>\n                </div>\n                \n                <form action=\"/panel/upload\" method=\"POST\" enctype=\"multipart/form-data\" style=\"display: flex; align-items: center; gap: 10px;\">\n                    <input type=\"file\" name=\"file\" required style=\"margin: 0;\">\n                    <button type=\"submit\" class=\"btn btn-primary\">Upload</button>\n        </form>\n    </div>\n\n        <table>\n            <tr>\n                <th>File Name</th>\n                <th>Actions</th>\n            </tr>\n            ${fileRows}\n        </table>\n    </div>\n</body>\n</html>\n`);\n});\n});\n\napp.get('/panel/create', (req, res) => {\nres.send(`\n<html>\n<head>\n    <title>Create New File</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    ${modernStyles}\n</head>\n<body>\n    <div class=\"container fade-in\">\n        <h1>Create New File</h1>\n        <form action=\"/panel/create\" method=\"POST\">\n            <input type=\"text\" name=\"filename\" placeholder=\"File name\" required>\n            <textarea name=\"content\" placeholder=\"File content\"></textarea>\n            <div style=\"display: flex; justify-content: space-between; margin-top: 1rem;\">\n                <a href=\"/panel\" class=\"btn btn-secondary\">Back</a>\n                <button type=\"submit\" class=\"btn btn-primary\">Create</button>\n            </div>\n        </form>\n    </div>\n</body>\n</html>\n`);\n});\n\n// Obsługa tworzenia plików\napp.post('/panel/create', (req, res) => {\nconst { filename, content } = req.body;\nif (!filename) return res.send('File name is required!');\n\nconst filePath = path.join(__dirname, 'pliki', filename);\n\n// Sprawdź czy plik już istnieje\nfs.access(filePath, fs.constants.F_OK, (err) => {\nif (!err) return res.send('File already exists!');\n\nfs.writeFile(filePath, content || '', (err) => {\nif (err) return res.send('Error creating file!');\nres.redirect('/panel');\n});\n});\n});\n\napp.get('/panel/edit/:filename', (req, res) => {\nfs.readFile(path.join(__dirname, 'pliki', req.params.filename), 'utf8', (err, data) => {\nif (err) return res.send('Error reading file.');\nres.send(`\n<html>\n<head>\n    <title>Edit File</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    ${modernStyles}\n</head>\n<body>\n    <div class=\"container fade-in\">\n        <h1>Edit File: ${req.params.filename}</h1>\n        <form action=\"/panel/edit/${encodeURIComponent(req.params.filename)}\" method=\"POST\">\n            <textarea name=\"content\">${data}</textarea>\n            <div style=\"display: flex; justify-content: space-between; margin-top: 1rem;\">\n                <a href=\"/panel\" class=\"btn btn-secondary\">Back</a>\n                <button type=\"submit\" class=\"btn btn-primary\">Save</button>\n            </div>\n        </form>\n    </div>\n</body>\n</html>\n`);\n});\n});\n\napp.get('/panel/rename/:filename', (req, res) => {\nres.send(`\n<html>\n<head>\n    <title>Rename File</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    ${modernStyles}\n</head>\n<body>\n    <div class=\"container fade-in\">\n        <h1>Rename File: ${req.params.filename}</h1>\n        <form action=\"/panel/rename/${encodeURIComponent(req.params.filename)}\" method=\"POST\">\n            <input type=\"text\" name=\"newName\" placeholder=\"New file name\" required>\n            <div style=\"display: flex; justify-content: space-between; margin-top: 1rem;\">\n                <a href=\"/panel\" class=\"btn btn-secondary\">Back</a>\n                <button type=\"submit\" class=\"btn btn-primary\">Rename</button>\n            </div>\n        </form>\n    </div>\n</body>\n</html>\n`);\n});\n\n// Pozostałe endpointy\napp.post('/panel/upload', upload.single('file'), (req, res) => res.redirect('/panel'));\n\napp.get('/panel/delete/:filename', (req, res) => {\nfs.unlink(path.join(__dirname, 'pliki', req.params.filename), (err) => {\nres.redirect('/panel');\n});\n});\n\napp.post('/panel/edit/:filename', (req, res) => {\nfs.writeFile(path.join(__dirname, 'pliki', req.params.filename), req.body.content, 'utf8', (err) => {\nres.redirect('/panel');\n});\n});\n\napp.post('/panel/rename/:filename', (req, res) => {\nfs.rename(\npath.join(__dirname, 'pliki', req.params.filename),\npath.join(__dirname, 'pliki', req.body.newName),\n() => res.redirect('/panel')\n);\n});\n\napp.get('/panel/redirect/:filename', (req, res) => {\nres.redirect(`/files/${encodeURIComponent(req.params.filename)}`);\n});\n\n// Dodaj endpoint do udostępniania plików z folderu pliki\napp.use('/files', express.static('pliki'));\n\n// Add Gemini chat page\napp.get('/chat', (req, res) => {\n  const chatHtml = `<!DOCTYPE html>\n<html>\n<head>\n    <title>YutAi - Inteligentny Asystent</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n    ${modernStyles}\n    <style>\n      body {\n          font-family: 'Poppins', sans-serif;\n          background: linear-gradient(125deg, #0f0c29, #302b63, #24243e);\n          color: #fff;\n          line-height: 1.6;\n          min-height: 100vh;\n          margin: 0;\n          padding: 0;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          animation: gradientBG 15s ease infinite;\n          background-size: 400% 400%;\n      }\n      \n      @keyframes gradientBG {\n          0% { background-position: 0% 50%; }\n          50% { background-position: 100% 50%; }\n          100% { background-position: 0% 50%; }\n      }\n      \n      .container {\n          width: 95%;\n          max-width: 1100px;\n          margin: 2rem auto;\n          padding: 0;\n          background: rgba(15, 23, 42, 0.7);\n          border-radius: 20px;\n          box-shadow: 0 15px 50px rgba(0, 0, 0, 0.4);\n          backdrop-filter: blur(10px);\n          border: 1px solid rgba(255, 255, 255, 0.1);\n          overflow: hidden;\n          display: flex;\n          flex-direction: column;\n          height: 90vh;\n      }\n      \n      .header {\n          padding: 1.5rem 2rem;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n          background: rgba(15, 23, 42, 0.5);\n      }\n      \n      .logo {\n          display: flex;\n          align-items: center;\n          gap: 10px;\n      }\n      \n      .logo-icon {\n          font-size: 1.8rem;\n          background: linear-gradient(to right, #6366f1, #8b5cf6, #ec4899);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n      }\n      \n      h1 {\n          margin: 0;\n          font-size: 1.8rem;\n          background: linear-gradient(to right, #6366f1, #8b5cf6, #ec4899);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          font-weight: 700;\n      }\n      \n      .status {\n          display: flex;\n          align-items: center;\n          gap: 6px;\n          font-size: 0.9rem;\n          color: #a5b4fc;\n          background: rgba(99, 102, 241, 0.1);\n          padding: 5px 10px;\n          border-radius: 20px;\n          border: 1px solid rgba(99, 102, 241, 0.2);\n      }\n      \n      .status-dot {\n          width: 8px;\n          height: 8px;\n          background: #22c55e;\n          border-radius: 50%;\n          animation: pulse 2s infinite;\n      }\n      \n      .chat-area {\n          flex: 1;\n          overflow-y: auto;\n          padding: 1.5rem 2rem;\n          scroll-behavior: smooth;\n          position: relative;\n          background-image: url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.03'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n      }\n      \n      .chat-area::-webkit-scrollbar {\n          width: 6px;\n      }\n      \n      .chat-area::-webkit-scrollbar-track {\n          background: rgba(255, 255, 255, 0.05);\n          border-radius: 10px;\n      }\n      \n      .chat-area::-webkit-scrollbar-thumb {\n          background: rgba(99, 102, 241, 0.3);\n          border-radius: 10px;\n      }\n      \n      .chat-area::-webkit-scrollbar-thumb:hover {\n          background: rgba(99, 102, 241, 0.5);\n      }\n      \n      .message {\n          margin-bottom: 1.5rem;\n          padding: 1rem 1.2rem;\n          border-radius: 15px;\n          max-width: 80%;\n          position: relative;\n          animation: fadeIn 0.3s ease forwards;\n          line-height: 1.5;\n      }\n      \n      @keyframes fadeIn {\n          from { opacity: 0; transform: translateY(10px); }\n          to { opacity: 1; transform: translateY(0); }\n      }\n      \n      .user-message {\n          background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);\n          margin-left: auto;\n          border-top-right-radius: 0;\n          box-shadow: 0 5px 15px rgba(99, 102, 241, 0.3);\n          color: white;\n      }\n      \n      .ai-message {\n          background: rgba(255, 255, 255, 0.05);\n          margin-right: auto;\n          border-top-left-radius: 0;\n          border: 1px solid rgba(255, 255, 255, 0.1);\n          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n      }\n      \n      .message-time {\n          font-size: 0.7rem;\n          opacity: 0.7;\n          margin-top: 5px;\n          text-align: right;\n      }\n      \n      .footer {\n          padding: 1rem 2rem;\n          border-top: 1px solid rgba(255, 255, 255, 0.1);\n          background: rgba(15, 23, 42, 0.5);\n      }\n      \n      .input-area {\n          display: flex;\n          gap: 10px;\n          position: relative;\n      }\n      \n      .input-area textarea {\n          flex-grow: 1;\n          padding: 0.6rem 1rem 0.6rem 3rem;\n          border: 1px solid rgba(255, 255, 255, 0.1);\n          border-radius: 15px;\n          background: rgba(15, 23, 42, 0.6);\n          color: #fff;\n          font-family: 'Poppins', sans-serif;\n          font-size: 1rem;\n          transition: all 0.3s ease;\n          height: 42px;\n          min-height: 42px;\n          max-height: 42px;\n          resize: none;\n          overflow-y: auto;\n          line-height: 1.5;\n          white-space: pre-wrap;\n      }\n      \n      .input-area textarea:focus {\n          outline: none;\n          border-color: #6366f1;\n          box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.3);\n      }\n      \n      .input-icon {\n          position: absolute;\n          left: 1rem;\n          top: 50%;\n          transform: translateY(-50%);\n          color: #6366f1;\n          font-size: 1.2rem;\n      }\n      \n      .input-area button {\n          padding: 0 1.5rem;\n          border: none;\n          border-radius: 15px;\n          background: linear-gradient(to right, #6366f1, #8b5cf6, #ec4899);\n          color: white;\n          font-weight: 600;\n          cursor: pointer;\n          transition: all 0.3s ease;\n          display: flex;\n          align-items: center;\n          gap: 10px;\n      }\n      \n      .input-area button:hover {\n          transform: translateY(-2px);\n          box-shadow: 0 5px 15px rgba(99, 102, 241, 0.4);\n      }\n      \n      .input-area button i {\n          font-size: 1.2rem;\n      }\n      \n      .tools-bar {\n          display: flex;\n          justify-content: space-between;\n          margin-top: 1rem;\n      }\n      \n      .image-preview {\n          display: none;\n          position: relative;\n          margin-top: 10px;\n          max-width: 200px;\n          border-radius: 12px;\n          overflow: hidden;\n          border: 1px solid rgba(255, 255, 255, 0.1);\n          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n      }\n      \n      .image-preview img {\n          width: 100%;\n          display: block;\n      }\n      \n      .image-preview-close {\n          position: absolute;\n          top: 5px;\n          right: 5px;\n          background: rgba(0, 0, 0, 0.6);\n          border: none;\n          color: white;\n          width: 24px;\n          height: 24px;\n          border-radius: 50%;\n          font-size: 16px;\n          cursor: pointer;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n      }\n      \n      .file-upload {\n          position: relative;\n          overflow: hidden;\n      }\n      \n      .file-upload input[type=file] {\n          position: absolute;\n          left: 0;\n          top: 0;\n          opacity: 0;\n          width: 100%;\n          height: 100%;\n          cursor: pointer;\n      }\n      \n      .file-upload-btn {\n          display: flex;\n          align-items: center;\n          gap: 6px;\n          background: rgba(99, 102, 241, 0.1);\n          color: #a5b4fc;\n          border: 1px solid rgba(99, 102, 241, 0.2);\n          border-radius: 10px;\n          padding: 6px 12px;\n          font-size: 0.9rem;\n          cursor: pointer;\n          transition: all 0.3s ease;\n      }\n      \n      .file-upload-btn:hover {\n          background: rgba(99, 102, 241, 0.2);\n          color: #c7d2fe;\n      }\n      \n      .user-message-image {\n          max-width: 200px;\n          border-radius: 8px;\n          margin-top: 10px;\n          display: block;\n      }\n      \n      .code-block {\n          background: rgba(15, 23, 42, 0.8);\n          padding: 1rem;\n          border-radius: 8px;\n          margin: 1rem 0;\n          white-space: pre-wrap;\n          font-family: 'JetBrains Mono', monospace;\n          font-size: 0.9rem;\n          line-height: 1.5;\n          color: #e2e8f0;\n          border-left: 3px solid #6366f1;\n      }\n      \n      .code-container {\n          margin: 15px 0;\n          border-radius: 12px;\n          overflow: hidden;\n          border: 1px solid rgba(255, 255, 255, 0.1);\n          background: rgba(15, 23, 42, 0.6);\n      }\n      \n      .code-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 10px 15px;\n          background: rgba(15, 23, 42, 0.8);\n          border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n      }\n      \n      .code-header span {\n          color: #a5b4fc;\n          font-size: 0.85rem;\n          text-transform: uppercase;\n          letter-spacing: 1px;\n      }\n      \n      .code-actions {\n          display: flex;\n          gap: 8px;\n      }\n      \n      .code-actions button {\n          padding: 5px 10px;\n          background: rgba(99, 102, 241, 0.2);\n          color: #a5b4fc;\n          border: none;\n          border-radius: 8px;\n          font-size: 0.8rem;\n          cursor: pointer;\n          transition: all 0.2s ease;\n          display: flex;\n          align-items: center;\n          gap: 5px;\n      }\n      \n      .code-actions button:hover {\n          background: rgba(99, 102, 241, 0.4);\n          color: #c7d2fe;\n      }\n      \n      .code-actions button i {\n          font-size: 0.9rem;\n      }\n      \n      .code-footer {\n          display: flex;\n          padding: 8px 15px;\n          background: rgba(15, 23, 42, 0.8);\n          border-top: 1px solid rgba(255, 255, 255, 0.1);\n      }\n      \n      .mini-counter {\n          font-size: 0.75rem;\n          color: #6366f1;\n          display: flex;\n          align-items: center;\n          gap: 5px;\n      }\n      \n      .typing-indicator {\n          display: flex;\n          align-items: center;\n          gap: 5px;\n      }\n      \n      .typing-indicator span {\n          display: inline-block;\n          width: 8px;\n          height: 8px;\n          background-color: #a5b4fc;\n          border-radius: 50%;\n          animation: bounce 1.5s infinite;\n      }\n      \n      .typing-indicator span:nth-child(2) {\n          animation-delay: 0.2s;\n      }\n      \n      .typing-indicator span:nth-child(3) {\n          animation-delay: 0.4s;\n      }\n      \n      @keyframes bounce {\n          0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }\n          40% { transform: scale(1.2); opacity: 1; }\n      }\n      \n      /* Style dla formatowania Markdown */\n      .ai-message strong {\n          font-weight: 700;\n          color: #a5b4fc;\n      }\n      \n      .ai-message em {\n          font-style: italic;\n          color: #ddd;\n      }\n      \n      .ai-message ul, .ai-message ol {\n          margin-left: 1.5rem;\n          margin-bottom: 1rem;\n      }\n      \n      .ai-message li {\n          margin-bottom: 0.5rem;\n      }\n      \n      .ai-message a {\n          color: #6366f1;\n          text-decoration: none;\n          border-bottom: 1px dotted #6366f1;\n          transition: all 0.2s ease;\n      }\n      \n      .ai-message a:hover {\n          color: #818cf8;\n          border-bottom-color: #818cf8;\n      }\n      \n      .ai-message blockquote {\n          border-left: 3px solid #6366f1;\n          padding-left: 1rem;\n          margin-left: 0;\n          margin-right: 0;\n          font-style: italic;\n          color: #9ca3af;\n      }\n      \n      .ai-message h1, .ai-message h2, .ai-message h3, .ai-message h4 {\n          margin-top: 1.5rem;\n          margin-bottom: 0.75rem;\n          color: #fff;\n          font-weight: 600;\n      }\n      \n      .ai-message h1 {\n          font-size: 1.5rem;\n          border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n          padding-bottom: 0.5rem;\n      }\n      \n      .ai-message h2 {\n          font-size: 1.3rem;\n      }\n      \n      .ai-message h3 {\n          font-size: 1.1rem;\n      }\n      \n      .ai-message h4 {\n          font-size: 1rem;\n      }\n      \n      .ai-message table {\n          width: 100%;\n          border-collapse: collapse;\n          margin: 1rem 0;\n          overflow: hidden;\n          border-radius: 8px;\n      }\n      \n      .ai-message th {\n          background-color: rgba(99, 102, 241, 0.2);\n          text-align: left;\n          padding: 0.5rem;\n      }\n      \n      .ai-message td {\n          padding: 0.5rem;\n          border-top: 1px solid rgba(255, 255, 255, 0.1);\n      }\n      \n      .ai-message tr:nth-child(even) {\n          background-color: rgba(255, 255, 255, 0.02);\n      }\n      \n      @media (max-width: 768px) {\n          .container {\n              width: 100%;\n              height: 100vh;\n              margin: 0;\n              border-radius: 0;\n          }\n          \n          .message {\n              max-width: 90%;\n          }\n          \n          .header, .footer {\n              padding: 1rem;\n          }\n          \n          .chat-area {\n              padding: 1rem;\n          }\n          \n          h1 {\n              font-size: 1.5rem;\n          }\n      }\n    </style>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/marked/4.3.0/marked.min.js\"></script>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <div class=\"logo\">\n                <i class=\"fas fa-robot logo-icon\"></i>\n                <h1>YutAi</h1>\n            </div>\n            <div class=\"status\">\n                <div class=\"status-dot\"></div>\n                <span>Online</span>\n            </div>\n        </div>\n        \n        <div class=\"chat-area\" id=\"chat-area\">\n            <div class=\"message ai-message\">\n                <div>Cześć! Jestem YutAi, Twój zaawansowany asystent AI. W czym mogę Ci dzisiaj pomóc?</div>\n                <div class=\"message-time\">Teraz</div>\n            </div>\n        </div>\n        \n        <div class=\"footer\">\n            <div class=\"input-area\">\n                <i class=\"fas fa-message input-icon\"></i>\n                <textarea id=\"user-input\" placeholder=\"Napisz wiadomość... (Shift+Enter dla nowej linii)\" autocomplete=\"off\"></textarea>\n                <button id=\"send-button\">\n                    <span>Wyślij</span>\n                    <i class=\"fas fa-paper-plane\"></i>\n                </button>\n            </div>\n            \n            <div class=\"image-preview\" id=\"image-preview\">\n                <img id=\"preview-img\" src=\"\" alt=\"Podgląd zdjęcia\">\n                <button class=\"image-preview-close\" id=\"remove-image\">\n                    <i class=\"fas fa-times\"></i>\n                </button>\n            </div>\n            \n            <div class=\"tools-bar\">\n                <div class=\"file-upload\">\n                    <input type=\"file\" id=\"image-upload\" accept=\"image/*\">\n                    <div class=\"file-upload-btn\">\n                        <i class=\"fas fa-image\"></i>\n                        <span>Dodaj zdjęcie</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <script>\n    (function() {\n        const chatArea = document.getElementById('chat-area');\n        const userInput = document.getElementById('user-input');\n        const sendButton = document.getElementById('send-button');\n        const imageUpload = document.getElementById('image-upload');\n        const imagePreview = document.getElementById('image-preview');\n        const previewImg = document.getElementById('preview-img');\n        const removeImageBtn = document.getElementById('remove-image');\n        \n        let selectedImage = null;\n        \n        // Funkcja kopiowania kodu\n        window.copyCode = function(blockId) {\n            const codeElement = document.getElementById(blockId);\n            if (!codeElement) return;\n            \n            // Pobierz tekst z HTML, zamieniając encje HTML z powrotem na znaki\n            const encodedText = codeElement.innerHTML;\n            const textarea = document.createElement('textarea');\n            textarea.innerHTML = encodedText; // Automatycznie konwertuje encje HTML\n            const decodedText = textarea.value;\n            \n            navigator.clipboard.writeText(decodedText)\n                .then(() => {\n                    const btn = codeElement.closest('.code-container').querySelector('.copy-btn');\n                    const originalText = btn.textContent;\n                    btn.textContent = 'Skopiowano!';\n                    setTimeout(() => {\n                        btn.textContent = originalText;\n                    }, 2000);\n                });\n        };\n        \n        // Formatowanie czasu\n        function formatTime() {\n            const now = new Date();\n            return now.getHours().toString().padStart(2, '0') + ':' + \n                   now.getMinutes().toString().padStart(2, '0');\n        }\n        \n        // Funkcja do dodawania wiadomości\n        function addMessage(text, isUser, imageUrl = null) {\n            const messageDiv = document.createElement('div');\n            messageDiv.className = isUser ? 'message user-message' : 'message ai-message';\n            \n            const contentDiv = document.createElement('div');\n            \n            if (isUser) {\n                // Escape HTML tags w wiadomościach użytkownika\n                contentDiv.textContent = text;\n                \n                // Dodaj zdjęcie jeśli zostało wybrane\n                if (imageUrl) {\n                    const img = document.createElement('img');\n                    img.src = imageUrl;\n                    img.className = 'user-message-image';\n                    img.alt = 'Przesłane zdjęcie';\n                    messageDiv.appendChild(img);\n                }\n            } else {\n                // Dla wiadomości AI używamy marked.js do formatowania Markdown\n                // Skonfiguruj marked.js do obsługi pogrubienia i innych stylów Markdown\n                const renderer = new marked.Renderer();\n                \n                // Bezpieczne przetwarzanie kodu HTML\n                renderer.text = function(text) {\n                    return text.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n                };\n                \n                // Użyj marked do konwersji Markdown na HTML\n                marked.setOptions({\n                    renderer: renderer,\n                    breaks: true,\n                    gfm: true,\n                    sanitize: false  // Wyłączamy wbudowane sanitize, bo używamy własnego renderer.text\n                });\n                \n                // Przetwórz tekst na HTML z zachowaniem bloków kodu\n                let processedText = text;\n                \n                // Najpierw zabezpiecz bloki kodu, aby marked ich nie przetwarzał\n                const codeBlocks = [];\n                processedText = processedText.replace(/\\`\\`\\`([\\s\\S]*?)\\`\\`\\`/g, function(match, code) {\n                    // Escape HTML special characters in code blocks\n                    const escapedCode = code\n                        .replace(/</g, '&lt;')\n                        .replace(/>/g, '&gt;');\n                    codeBlocks.push(escapedCode);\n                    return \"{{CODE_BLOCK_\" + (codeBlocks.length - 1) + \"}}\";\n                });\n                \n                // Zastosuj formatowanie Markdown\n                processedText = marked.parse(processedText);\n                \n                // Przywróć bloki kodu z odpowiednim formatowaniem HTML\n                processedText = processedText.replace(/{{CODE_BLOCK_(\\d+)}}/g, function(match, index) {\n                    const codeContent = codeBlocks[parseInt(index)];\n                    const codeId = 'code-block-' + Date.now() + '-' + index;\n                    return '<div class=\"code-container\">' +\n                        '<div class=\"code-header\">' +\n                        '<span>Code</span>' +\n                        '<div class=\"code-actions\">' +\n                        '<button class=\"copy-btn\" onclick=\"copyCode(\\'' + codeId + '\\')\">' +\n                        '<i class=\"fas fa-copy\"></i> Kopiuj' +\n                        '</button>' +\n                        '</div>' +\n                        '</div>' +\n                        '<pre class=\"code-block\"><code id=\"' + codeId + '\">' + codeContent + '</code></pre>' +\n                        '<div class=\"code-footer\">' +\n                        '<div class=\"mini-counter\"><i class=\"fas fa-code\"></i> kod</div>' +\n                        '</div>' +\n                        '</div>';\n                });\n                \n                contentDiv.innerHTML = processedText;\n            }\n            \n            const timeDiv = document.createElement('div');\n            timeDiv.className = 'message-time';\n            timeDiv.textContent = formatTime();\n            \n            messageDiv.appendChild(contentDiv);\n            messageDiv.appendChild(timeDiv);\n            \n            chatArea.appendChild(messageDiv);\n            chatArea.scrollTop = chatArea.scrollHeight;\n        }\n        \n        // Funkcja do wysyłania wiadomości\n        function sendMessage() {\n            const message = userInput.value.trim();\n            if (!message && !selectedImage) return;\n            \n            // Dodaj wiadomość użytkownika\n            const imageUrl = selectedImage ? URL.createObjectURL(selectedImage) : null;\n            addMessage(message, true, imageUrl);\n            \n            // Wyczyść pole wprowadzania\n            userInput.value = '';\n            \n            // Przygotuj dane do wysłania\n            const formData = new FormData();\n            formData.append('message', message);\n            \n            // Dodaj zdjęcie jeśli zostało wybrane\n            if (selectedImage) {\n                formData.append('image', selectedImage);\n            }\n            \n            // Ukryj podgląd zdjęcia\n            imagePreview.style.display = 'none';\n            selectedImage = null;\n            \n            // Dodaj wiadomość ładowania\n            const loadingId = Date.now();\n            const loadingDiv = document.createElement('div');\n            loadingDiv.className = 'message ai-message';\n            loadingDiv.id = 'loading-' + loadingId;\n            \n            const loadingContent = document.createElement('div');\n            loadingContent.innerHTML = '<div class=\"typing-indicator\"><span>.</span><span>.</span><span>.</span></div>';\n            \n            const timeDiv = document.createElement('div');\n            timeDiv.className = 'message-time';\n            timeDiv.textContent = formatTime();\n            \n            loadingDiv.appendChild(loadingContent);\n            loadingDiv.appendChild(timeDiv);\n            \n            chatArea.appendChild(loadingDiv);\n            chatArea.scrollTop = chatArea.scrollHeight;\n            \n            // Wyślij zapytanie do API\n            fetch('/api/chat', {\n                method: 'POST',\n                body: formData\n            })\n            .then(function(response) {\n                return response.json();\n            })\n            .then(function(data) {\n                // Usuń wiadomość ładowania\n                const loadingMessage = document.getElementById('loading-' + loadingId);\n                if (loadingMessage) loadingMessage.remove();\n                \n                // Dodaj odpowiedź AI\n                addMessage(data.reply, false);\n            })\n            .catch(function(error) {\n                console.error('Error:', error);\n                // Usuń wiadomość ładowania\n                const loadingMessage = document.getElementById('loading-' + loadingId);\n                if (loadingMessage) loadingMessage.remove();\n                \n                // Dodaj komunikat o błędzie\n                addMessage('Przepraszam, wystąpił błąd. Spróbuj ponownie.', false);\n            });\n        }\n        \n        // Obsługa wyboru zdjęcia\n        function handleImageUpload(event) {\n            const file = event.target.files[0];\n            if (!file) return;\n            \n            // Akceptuj tylko obrazy\n            if (!file.type.startsWith('image/')) {\n                alert('Proszę wybrać plik obrazu');\n                return;\n            }\n            \n            // Pokaż podgląd zdjęcia\n            const reader = new FileReader();\n            reader.onload = function(e) {\n                previewImg.src = e.target.result;\n                imagePreview.style.display = 'block';\n                selectedImage = file;\n            };\n            reader.readAsDataURL(file);\n        }\n        \n        // Usunięcie wybranego zdjęcia\n        function removeSelectedImage() {\n            imagePreview.style.display = 'none';\n            imageUpload.value = '';\n            selectedImage = null;\n        }\n        \n        // Obsługa przycisku wysyłania\n        sendButton.addEventListener('click', function() {\n            sendMessage();\n        });\n        \n        // Obsługa klawisza Enter\n        userInput.addEventListener('keydown', function(e) {\n            if (e.key === 'Enter') {\n                if (e.shiftKey) {\n                    // Shift+Enter - dodaj nową linię (domyślne zachowanie)\n                    return true;\n                } else {\n                    // Sam Enter - wyślij wiadomość\n                    e.preventDefault();\n                    sendMessage();\n                }\n            }\n        });\n        \n        // Obsługa uploadu zdjęć\n        imageUpload.addEventListener('change', handleImageUpload);\n        \n        // Obsługa usuwania zdjęcia\n        removeImageBtn.addEventListener('click', removeSelectedImage);\n        \n        // Ustaw focus na pole wprowadzania\n        userInput.focus();\n    })();\n    </script>\n</body>\n</html>`;\n\n  res.send(chatHtml);\n});\n\n// Add API endpoint for Gemini with image support\napp.post('/api/chat', tempUpload.single('image'), async (req, res) => {\n  try {\n    const userMessage = req.body.message || '';\n    \n    // Podstawowa instrukcja dla modelu\n    let instruction = \"Odpowiadaj zawsze w języku polskim, bez względu na język zapytania. Twoje odpowiedzi powinny być pomocne, dokładne i przyjazne.\";\n    \n    const fullMessage = instruction + \" \" + userMessage;\n    \n    let apiRequestBody = {\n      contents: [\n        {\n          parts: [\n            {\n              text: fullMessage\n            }\n          ]\n        }\n      ],\n      generationConfig: {\n        temperature: 0.7,\n        topK: 40,\n        topP: 0.95,\n        maxOutputTokens: 8192\n      }\n    };\n    \n    // If image is present, add it to the API request\n    if (req.file) {\n      const imagePath = path.join(__dirname, req.file.path);\n      const imageBuffer = fs.readFileSync(imagePath);\n      const base64Image = imageBuffer.toString('base64');\n      \n      // Modify the request to include image\n      apiRequestBody.contents[0].parts = [\n        {\n          text: fullMessage || \"Opisz to zdjęcie w języku polskim\"\n        },\n        {\n          inlineData: {\n            mimeType: req.file.mimetype,\n            data: base64Image\n          }\n        }\n      ];\n    }\n    \n    // Determine the appropriate model based on whether an image is included\n    const apiModel = req.file ? 'gemini-1.5-pro-latest' : 'gemini-1.5-flash-latest';\n    \n    const response = await axios.post(\n      `https://generativelanguage.googleapis.com/v1beta/models/${apiModel}:generateContent?key=${GEMINI_API_KEY}`,\n      apiRequestBody,\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n    \n    // Extract the AI's response text\n    let aiReply = response.data.candidates[0].content.parts[0].text;\n    \n    // Format code blocks properly\n    // Replace markdown code blocks with styled HTML code containers\n    aiReply = aiReply.replace(/\\`\\`\\`(.*)\\n([\\s\\S]*?)\\`\\`\\`/g, function(match, language, code) {\n        // Generate a unique ID for this code block\n        const blockId = 'code-block-' + Date.now() + '-' + Math.floor(Math.random() * 1000);\n        \n        // Escape HTML in the code content\n        const escapedCode = code\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;');\n        \n        // Determine language display name\n        let displayLang = 'Code';\n        if (language) {\n            if (language === 'c++' || language === 'cpp') displayLang = 'C++';\n            else if (language === 'js') displayLang = 'JavaScript';\n            else displayLang = language.charAt(0).toUpperCase() + language.slice(1);\n        }\n        \n        return '<div class=\"code-container\">' +\n            '<div class=\"code-header\">' +\n            '<span>' + displayLang + '</span>' +\n            '<div class=\"code-actions\">' +\n            '<button class=\"copy-btn\" onclick=\"copyCode(\\'' + blockId + '\\')\">' +\n            '<i class=\"fas fa-copy\"></i> Kopiuj' +\n            '</button>' +\n            '</div>' +\n            '</div>' +\n            '<pre class=\"code-block\"><code id=\"' + blockId + '\">' + escapedCode + '</code></pre>' +\n            '<div class=\"code-footer\">' +\n            '<div class=\"mini-counter\"><i class=\"fas fa-code\"></i> kod</div>' +\n            '</div>' +\n            '</div>';\n    });\n    \n    // If image was uploaded temporarily, delete it after processing\n    if (req.file) {\n      fs.unlink(path.join(__dirname, req.file.path), (err) => {\n        if (err) console.error('Error deleting temporary image:', err);\n      });\n    }\n    \n    res.json({ reply: aiReply });\n  } catch (error) {\n    console.error('Error calling Gemini API:', error);\n    res.status(500).json({ error: 'Failed to get response from Gemini', reply: 'Przepraszam, wystąpił błąd. Spróbuj ponownie później.' });\n  }\n});\n\napp.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));\n"
        }
    ]
}