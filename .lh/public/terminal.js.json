{
    "sourceFile": "public/terminal.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1744134183321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744134588489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,66 +1,206 @@\n // Terminal functionality\r\n-\r\n document.addEventListener('DOMContentLoaded', function() {\r\n     const terminal = document.getElementById('terminal');\r\n-    const commandInput = document.getElementById('command-input');\r\n+    const commandInput = document.getElementById('terminal-input');\r\n+    let commandHistory = [];\r\n+    let historyIndex = -1;\r\n     \r\n-    if (terminal && commandInput) {\r\n-        commandInput.addEventListener('keydown', function(e) {\r\n-            if (e.key === 'Enter') {\r\n-                const command = this.value.trim();\r\n-                if (command) {\r\n-                    executeCommand(command);\r\n-                    this.value = '';\r\n-                }\r\n+    // Load command history from localStorage\r\n+    try {\r\n+        const savedHistory = localStorage.getItem('commandInputHistory');\r\n+        if (savedHistory) {\r\n+            commandHistory = JSON.parse(savedHistory);\r\n+        }\r\n+    } catch (e) {\r\n+        console.error('Error loading command history:', e);\r\n+        commandHistory = [];\r\n+    }\r\n+    \r\n+    // Load terminal content from localStorage\r\n+    function loadCommandHistory() {\r\n+        try {\r\n+            const savedTerminal = localStorage.getItem('terminalHistory');\r\n+            if (savedTerminal) {\r\n+                terminal.innerHTML = savedTerminal;\r\n             }\r\n-        });\r\n+        } catch (e) {\r\n+            console.error('Error loading terminal history:', e);\r\n+        }\r\n     }\r\n     \r\n-    function executeCommand(command) {\r\n+    // Save terminal content to localStorage\r\n+    function saveCommandHistory() {\r\n+        localStorage.setItem('terminalHistory', terminal.innerHTML);\r\n+    }\r\n+    \r\n+    // Save input command history for arrow navigation\r\n+    function saveInputHistory(command) {\r\n+        // Don't add empty commands or duplicates of the last command\r\n+        if (command && (commandHistory.length === 0 || commandHistory[commandHistory.length - 1] !== command)) {\r\n+            commandHistory.push(command);\r\n+            // Keep only the last 50 commands\r\n+            if (commandHistory.length > 50) {\r\n+                commandHistory.shift();\r\n+            }\r\n+            localStorage.setItem('commandInputHistory', JSON.stringify(commandHistory));\r\n+        }\r\n+        // Reset the history index\r\n+        historyIndex = -1;\r\n+    }\r\n+    \r\n+    // Handle arrow key navigation through command history\r\n+    function handleArrowKeys(e) {\r\n+        if (e.key === 'ArrowUp') {\r\n+            e.preventDefault();\r\n+            if (historyIndex < commandHistory.length - 1) {\r\n+                historyIndex++;\r\n+                commandInput.value = commandHistory[commandHistory.length - 1 - historyIndex];\r\n+            }\r\n+        } else if (e.key === 'ArrowDown') {\r\n+            e.preventDefault();\r\n+            if (historyIndex > 0) {\r\n+                historyIndex--;\r\n+                commandInput.value = commandHistory[commandHistory.length - 1 - historyIndex];\r\n+            } else if (historyIndex === 0) {\r\n+                historyIndex = -1;\r\n+                commandInput.value = '';\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    // Process command input\r\n+    async function processCommand(command) {\r\n+        if (!command.trim()) return; // Don't process empty commands\r\n+        \r\n+        // Save to input history for arrow key navigation\r\n+        saveInputHistory(command);\r\n+        \r\n         // Create a new history item element\r\n         const historyItem = document.createElement('div');\r\n         historyItem.className = 'history-item';\r\n         historyItem.innerHTML = `<span class=\"command\">$ ${command}</span>\\n`;\r\n         terminal.appendChild(historyItem);\r\n         \r\n         try {\r\n-            // Process the command here\r\n-            let response = processCommand(command);\r\n+            // For client-side processing\r\n+            const parts = command.split(' ');\r\n+            const cmd = parts[0].toLowerCase();\r\n             \r\n-            // Add response to history item\r\n-            if (response) {\r\n-                const responseElement = document.createElement('div');\r\n-                responseElement.className = 'response';\r\n-                responseElement.textContent = response;\r\n-                historyItem.appendChild(responseElement);\r\n+            switch (cmd) {\r\n+                case 'help':\r\n+                    const helpText = 'Available commands: help, echo, clear, date, time';\r\n+                    const responseElement = document.createElement('span');\r\n+                    responseElement.className = 'response';\r\n+                    responseElement.textContent = helpText;\r\n+                    historyItem.appendChild(document.createTextNode('\\n'));\r\n+                    historyItem.appendChild(responseElement);\r\n+                    break;\r\n+                    \r\n+                case 'echo':\r\n+                    const echoText = parts.slice(1).join(' ');\r\n+                    const echoElement = document.createElement('span');\r\n+                    echoElement.className = 'response';\r\n+                    echoElement.textContent = echoText;\r\n+                    historyItem.appendChild(document.createTextNode('\\n'));\r\n+                    historyItem.appendChild(echoElement);\r\n+                    break;\r\n+                    \r\n+                case 'clear':\r\n+                    terminal.innerHTML = '';\r\n+                    break;\r\n+                    \r\n+                case 'date':\r\n+                    const dateElement = document.createElement('span');\r\n+                    dateElement.className = 'response';\r\n+                    dateElement.textContent = new Date().toLocaleDateString();\r\n+                    historyItem.appendChild(document.createTextNode('\\n'));\r\n+                    historyItem.appendChild(dateElement);\r\n+                    break;\r\n+                    \r\n+                case 'time':\r\n+                    const timeElement = document.createElement('span');\r\n+                    timeElement.className = 'response';\r\n+                    timeElement.textContent = new Date().toLocaleTimeString();\r\n+                    historyItem.appendChild(document.createTextNode('\\n'));\r\n+                    historyItem.appendChild(timeElement);\r\n+                    break;\r\n+                    \r\n+                default:\r\n+                    // Try to fetch from server\r\n+                    try {\r\n+                        const response = await fetch('/cmd/execute', {\r\n+                            method: 'POST',\r\n+                            headers: {\r\n+                                'Content-Type': 'application/json'\r\n+                            },\r\n+                            body: JSON.stringify({ command })\r\n+                        });\r\n+                        \r\n+                        if (response.ok) {\r\n+                            const data = await response.json();\r\n+                            if (data.output) {\r\n+                                const outputSpan = document.createElement('span');\r\n+                                outputSpan.className = 'response';\r\n+                                outputSpan.textContent = data.output;\r\n+                                historyItem.appendChild(document.createTextNode('\\n'));\r\n+                                historyItem.appendChild(outputSpan);\r\n+                            }\r\n+                        } else {\r\n+                            throw new Error('Command not found');\r\n+                        }\r\n+                    } catch (error) {\r\n+                        const errorSpan = document.createElement('span');\r\n+                        errorSpan.className = 'error';\r\n+                        errorSpan.textContent = `Command not found: ${cmd}. Type 'help' for available commands.`;\r\n+                        historyItem.appendChild(document.createTextNode('\\n'));\r\n+                        historyItem.appendChild(errorSpan);\r\n+                    }\r\n             }\r\n         } catch (error) {\r\n-            // Handle errors\r\n-            const errorElement = document.createElement('div');\r\n-            errorElement.className = 'error';\r\n-            errorElement.textContent = `Error: ${error.message}`;\r\n-            historyItem.appendChild(errorElement);\r\n+            const errorSpan = document.createElement('span');\r\n+            errorSpan.className = 'error';\r\n+            errorSpan.textContent = `Error: ${error.message}`;\r\n+            historyItem.appendChild(document.createTextNode('\\n'));\r\n+            historyItem.appendChild(errorSpan);\r\n         }\r\n         \r\n         // Scroll to bottom of terminal\r\n         terminal.scrollTop = terminal.scrollHeight;\r\n+        \r\n+        // Save terminal state\r\n+        saveCommandHistory();\r\n     }\r\n     \r\n-    function processCommand(command) {\r\n-        // Simple command processing logic\r\n-        const parts = command.split(' ');\r\n-        const cmd = parts[0].toLowerCase();\r\n+    // Initialize terminal\r\n+    function initTerminal() {\r\n+        // Load history when page loads\r\n+        loadCommandHistory();\r\n         \r\n-        switch (cmd) {\r\n-            case 'help':\r\n-                return 'Available commands: help, echo, clear';\r\n-            case 'echo':\r\n-                return parts.slice(1).join(' ');\r\n-            case 'clear':\r\n+        // Set up event listeners\r\n+        if (commandInput) {\r\n+            commandInput.addEventListener('keydown', function(e) {\r\n+                if (e.key === 'Enter') {\r\n+                    const command = this.value;\r\n+                    this.value = '';\r\n+                    processCommand(command);\r\n+                } else if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\r\n+                    handleArrowKeys(e);\r\n+                }\r\n+            });\r\n+        }\r\n+        \r\n+        // Set up clear button if it exists\r\n+        const clearButton = document.getElementById('clear-terminal');\r\n+        if (clearButton) {\r\n+            clearButton.addEventListener('click', function() {\r\n                 terminal.innerHTML = '';\r\n-                return '';\r\n-            default:\r\n-                return `Command not found: ${cmd}. Type 'help' for available commands.`;\r\n+                saveCommandHistory();\r\n+            });\r\n         }\r\n     }\r\n+    \r\n+    // Initialize the terminal\r\n+    if (terminal && commandInput) {\r\n+        initTerminal();\r\n+    }\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744134940772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n         \r\n         // Create a new history item element\r\n         const historyItem = document.createElement('div');\r\n         historyItem.className = 'history-item';\r\n-        historyItem.innerHTML = `<span class=\"command\">$ ${command}</span>\\n`;\r\n+        historyItem.innerHTML = '<span class=\"command\">$ ' + command + '</span>\\n';\r\n         terminal.appendChild(historyItem);\r\n         \r\n         try {\r\n             // For client-side processing\r\n@@ -150,17 +150,17 @@\n                         }\r\n                     } catch (error) {\r\n                         const errorSpan = document.createElement('span');\r\n                         errorSpan.className = 'error';\r\n-                        errorSpan.textContent = `Command not found: ${cmd}. Type 'help' for available commands.`;\r\n+                        errorSpan.textContent = \"Command not found: \" + cmd + \". Type 'help' for available commands.\";\r\n                         historyItem.appendChild(document.createTextNode('\\n'));\r\n                         historyItem.appendChild(errorSpan);\r\n                     }\r\n             }\r\n         } catch (error) {\r\n             const errorSpan = document.createElement('span');\r\n             errorSpan.className = 'error';\r\n-            errorSpan.textContent = `Error: ${error.message}`;\r\n+            errorSpan.textContent = \"Error: \" + error.message;\r\n             historyItem.appendChild(document.createTextNode('\\n'));\r\n             historyItem.appendChild(errorSpan);\r\n         }\r\n         \r\n"
                }
            ],
            "date": 1744134183321,
            "name": "Commit-0",
            "content": "// Terminal functionality\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    const terminal = document.getElementById('terminal');\r\n    const commandInput = document.getElementById('command-input');\r\n    \r\n    if (terminal && commandInput) {\r\n        commandInput.addEventListener('keydown', function(e) {\r\n            if (e.key === 'Enter') {\r\n                const command = this.value.trim();\r\n                if (command) {\r\n                    executeCommand(command);\r\n                    this.value = '';\r\n                }\r\n            }\r\n        });\r\n    }\r\n    \r\n    function executeCommand(command) {\r\n        // Create a new history item element\r\n        const historyItem = document.createElement('div');\r\n        historyItem.className = 'history-item';\r\n        historyItem.innerHTML = `<span class=\"command\">$ ${command}</span>\\n`;\r\n        terminal.appendChild(historyItem);\r\n        \r\n        try {\r\n            // Process the command here\r\n            let response = processCommand(command);\r\n            \r\n            // Add response to history item\r\n            if (response) {\r\n                const responseElement = document.createElement('div');\r\n                responseElement.className = 'response';\r\n                responseElement.textContent = response;\r\n                historyItem.appendChild(responseElement);\r\n            }\r\n        } catch (error) {\r\n            // Handle errors\r\n            const errorElement = document.createElement('div');\r\n            errorElement.className = 'error';\r\n            errorElement.textContent = `Error: ${error.message}`;\r\n            historyItem.appendChild(errorElement);\r\n        }\r\n        \r\n        // Scroll to bottom of terminal\r\n        terminal.scrollTop = terminal.scrollHeight;\r\n    }\r\n    \r\n    function processCommand(command) {\r\n        // Simple command processing logic\r\n        const parts = command.split(' ');\r\n        const cmd = parts[0].toLowerCase();\r\n        \r\n        switch (cmd) {\r\n            case 'help':\r\n                return 'Available commands: help, echo, clear';\r\n            case 'echo':\r\n                return parts.slice(1).join(' ');\r\n            case 'clear':\r\n                terminal.innerHTML = '';\r\n                return '';\r\n            default:\r\n                return `Command not found: ${cmd}. Type 'help' for available commands.`;\r\n        }\r\n    }\r\n});"
        }
    ]
}